{"version":3,"file":"static/js/85782.155448d71a.chunk.js","mappings":"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","sources":["webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/esm/base.mjs","webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/esm/bigint.mjs","webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/esm/decimal.mjs","webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/esm/native.mjs","webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/esm/web3.mjs","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/hashes/esm/_assert.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/hashes/esm/crypto.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/hashes/esm/utils.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/hashes/esm/_md.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/hashes/esm/_u64.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/hashes/esm/sha512.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/abstract/utils.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/abstract/modular.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/abstract/curve.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/abstract/edwards.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/ed25519.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/hashes/esm/sha256.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/hashes/esm/sha3.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/hashes/esm/hmac.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/abstract/weierstrass.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/_shortw_utils.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/secp256k1.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/@solana/web3.js/lib/index.browser.esm.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/rpc-websockets/dist/lib/client.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/node_modules/rpc-websockets/dist/lib/utils.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/cjs/base.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/cjs/bigint.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/cjs/decimal.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/cjs/index.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/cjs/native.js","webpack://web/../../node_modules/@solana/buffer-layout-utils/lib/cjs/web3.js","webpack://web/../../node_modules/@solana/codecs-core/dist/index.browser.cjs","webpack://web/../../node_modules/@solana/codecs-core/node_modules/@solana/errors/dist/index.browser.cjs","webpack://web/../../node_modules/@solana/codecs-numbers/dist/index.browser.cjs","webpack://web/../../node_modules/@solana/codecs-numbers/node_modules/@solana/errors/dist/index.browser.cjs","webpack://web/../../node_modules/@solana/codecs/dist/index.browser.cjs","webpack://web/../../node_modules/@solana/codecs/node_modules/@solana/codecs-data-structures/dist/index.browser.cjs","webpack://web/../../node_modules/@solana/codecs/node_modules/@solana/codecs-strings/dist/index.browser.cjs","webpack://web/../../node_modules/@solana/codecs/node_modules/@solana/errors/dist/index.browser.cjs","webpack://web/../../node_modules/@solana/options/dist/index.browser.cjs","webpack://web/../../node_modules/@solana/spl-type-length-value/lib/cjs/errors.js","webpack://web/../../node_modules/@solana/spl-type-length-value/lib/cjs/index.js","webpack://web/../../node_modules/@solana/spl-type-length-value/lib/cjs/splDiscriminate.js","webpack://web/../../node_modules/@solana/spl-type-length-value/lib/cjs/tlvState.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/constants.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/errors.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/associatedTokenAccount.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/amountToUiAmount.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/approve.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/approveChecked.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/burn.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/burnChecked.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/closeAccount.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/freezeAccount.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/initializeAccount.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/initializeAccount2.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/initializeAccount3.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/serialization.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMint.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMint2.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMultisig.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/mintTo.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/mintToChecked.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/revoke.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/setAuthority.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/syncNative.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/thawAccount.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/uiAmountToAmount.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/decode.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/transfer.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/transferChecked.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/internal.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/instructions/types.js","webpack://web/../../node_modules/@solana/spl-token/lib/esm/state/mint.js","webpack://web/../../node_modules/timeout-signal/index.js"],"sourcesContent":["export const encodeDecode = (layout) => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n//# sourceMappingURL=base.js.map","import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferLE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const bigIntBE = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntBE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferBE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);\n//# sourceMappingURL=bigint.js.map","import BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base.mjs';\nimport { u128 } from './bigint.mjs';\nexport const WAD = new BigNumber('1e+18');\nexport const decimal = (property) => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n    const decimalLayout = layout;\n    decimalLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n    decimalLayout.encode = (decimal, buffer, offset) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n    return decimalLayout;\n};\n//# sourceMappingURL=decimal.js.map","import { u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base.mjs';\nexport const bool = (property) => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n    const boolLayout = layout;\n    boolLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n    boolLayout.encode = (bool, buffer, offset) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n    return boolLayout;\n};\n//# sourceMappingURL=native.js.map","import { blob } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base.mjs';\nexport const publicKey = (property) => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n    const publicKeyLayout = layout;\n    publicKeyLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n    publicKeyLayout.encode = (publicKey, buffer, offset) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n    return publicKeyLayout;\n};\n//# sourceMappingURL=web3.js.map","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    const inBig = (n) => typeof n === 'bigint' && _0n < n; // n in [1..]\n    const inRange = (n, max) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n    const in0MaskRange = (n) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n    function assertInRange(n, max) {\n        // n in [1..max-1]\n        if (inRange(n, max))\n            return n;\n        throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n    }\n    function assertGE0(n) {\n        // n in [0..CURVE_ORDER-1]\n        return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n    }\n    const pointPrecomputes = new Map();\n    function isPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            if (!in0MaskRange(ex))\n                throw new Error('x required');\n            if (!in0MaskRange(ey))\n                throw new Error('y required');\n            if (!in0MaskRange(ez))\n                throw new Error('z required');\n            if (!in0MaskRange(et))\n                throw new Error('t required');\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            if (!in0MaskRange(x) || !in0MaskRange(y))\n                throw new Error('invalid affine point');\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            const { a, d } = CURVE;\n            if (this.is0())\n                throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n            // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n            // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n            const { ex: X, ey: Y, ez: Z, et: T } = this;\n            const X2 = modP(X * X); // X²\n            const Y2 = modP(Y * Y); // Y²\n            const Z2 = modP(Z * Z); // Z²\n            const Z4 = modP(Z2 * Z2); // Z⁴\n            const aX2 = modP(X2 * a); // aX²\n            const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n            const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n            if (left !== right)\n                throw new Error('bad point: equation left != right (1)');\n            // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n            const XY = modP(X * Y);\n            const ZT = modP(Z * T);\n            if (XY !== ZT)\n                throw new Error('bad point: equation left != right (2)');\n        }\n        // Compare one point to another.\n        equals(other) {\n            isPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            isPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        multiplyUnsafe(scalar) {\n            let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n            if (n === _0n)\n                return I;\n            if (this.equals(I) || n === _1n)\n                return this;\n            if (this.equals(G))\n                return this.wNAF(n).p;\n            return wnaf.unsafeLadder(this, n);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            const { ex: x, ey: y, ez: z } = this;\n            const is0 = this.is0();\n            if (iz == null)\n                iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n            const ax = modP(x * iz);\n            const ay = modP(y * iz);\n            const zz = modP(z * iz);\n            if (is0)\n                return { x: _0n, y: _1n };\n            if (zz !== _1n)\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = ut.bytesToNumberLE(normed);\n            if (y === _0n) {\n                // y=0 is allowed\n            }\n            else {\n                // RFC8032 prohibits >= p, but ZIP215 doesn't\n                if (zip215)\n                    assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n                else\n                    assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n            }\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = wNAF(Point, nByteLength * 8);\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(ut.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = nByteLength;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = ut.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        assertGE0(s); // 0 <= s < l\n        const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n        return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n        // zip215: true is good for consensus-critical apps and allows points < 2^256\n        // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n        let A, R, SB;\n        try {\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from './abstract/utils.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x) {\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n    const b10 = (pow2(b5, _5n, P) * b5) % P;\n    const b20 = (pow2(b10, _10n, P) * b10) % P;\n    const b40 = (pow2(b20, _20n, P) * b20) % P;\n    const b80 = (pow2(b40, _40n, P) * b40) % P;\n    const b160 = (pow2(b80, _80n, P) * b80) % P;\n    const b240 = (pow2(b160, _80n, P) * b80) % P;\n    const b250 = (pow2(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = mod(v * v * v, P); // v³\n    const v7 = mod(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if (isNegativeLE(x, P))\n        x = mod(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = Field(ED25519_P, undefined, true);\nconst ed25519Defaults = {\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: BigInt(8),\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n};\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n    prehash: sha512,\n});\nexport const x25519 = /* @__PURE__ */ (() => montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!isNegativeLE(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if (isNegativeLE(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || isNegativeLE(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if (isNegativeLE(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if (isNegativeLE(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 32); // 11\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, isLE, byteSwap32, } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        if (!isLE)\n            byteSwap32(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!isLE)\n            byteSwap32(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        exists(this, false);\n        bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","import { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport createRpc from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\nvar _PublicKey;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [Symbol.toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_PublicKey = PublicKey;\nPublicKey.default = new _PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nvar fastStableStringify = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n\nvar fastStableStringify$1 = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringify);\n\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\nvar fetchImpl = globalThis.fetch;\n\nclass RpcWebSocketClient extends RpcWebSocketCommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"0.0.0-development\" }`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify$1(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64');\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, filters ? {\n      filters: filters\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nvar _Lockup;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_Lockup = Lockup;\nLockup.default = new _Lockup(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n//# sourceMappingURL=index.browser.esm.js.map\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\nconst eventemitter3_1 = require(\"eventemitter3\");\nconst utils_1 = require(\"./utils\");\nclass CommonClient extends eventemitter3_1.EventEmitter {\n    address;\n    rpc_id;\n    queue;\n    options;\n    autoconnect;\n    ready;\n    reconnect;\n    reconnect_timer_id;\n    reconnect_interval;\n    max_reconnects;\n    rest_options;\n    current_reconnects;\n    generate_request_id;\n    socket;\n    webSocketFactory;\n    dataPack;\n    /**\n     * Instantiate a Client class.\n     * @constructor\n     * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n     * @param {String} address - url to a websocket server\n     * @param {Object} options - ws options object with reconnect parameters\n     * @param {Function} generate_request_id - custom generation request Id\n     * @param {DataPack} dataPack - data pack contains encoder and decoder\n     * @return {CommonClient}\n     */\n    constructor(webSocketFactory, address = \"ws://localhost:8080\", { autoconnect = true, reconnect = true, reconnect_interval = 1000, max_reconnects = 5, ...rest_options } = {}, generate_request_id, dataPack) {\n        super();\n        this.webSocketFactory = webSocketFactory;\n        this.queue = {};\n        this.rpc_id = 0;\n        this.address = address;\n        this.autoconnect = autoconnect;\n        this.ready = false;\n        this.reconnect = reconnect;\n        this.reconnect_timer_id = undefined;\n        this.reconnect_interval = reconnect_interval;\n        this.max_reconnects = max_reconnects;\n        this.rest_options = rest_options;\n        this.current_reconnects = 0;\n        this.generate_request_id = generate_request_id || (() => ++this.rpc_id);\n        if (!dataPack)\n            this.dataPack = new utils_1.DefaultDataPack();\n        else\n            this.dataPack = dataPack;\n        if (this.autoconnect)\n            this._connect(this.address, {\n                autoconnect: this.autoconnect,\n                reconnect: this.reconnect,\n                reconnect_interval: this.reconnect_interval,\n                max_reconnects: this.max_reconnects,\n                ...this.rest_options\n            });\n    }\n    /**\n     * Connects to a defined server if not connected already.\n     * @method\n     * @return {Undefined}\n     */\n    connect() {\n        if (this.socket)\n            return;\n        this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options\n        });\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n    call(method, params, timeout, ws_opts) {\n        if (!ws_opts && \"object\" === typeof timeout) {\n            ws_opts = timeout;\n            timeout = null;\n        }\n        return new Promise((resolve, reject) => {\n            if (!this.ready)\n                return reject(new Error(\"socket not ready\"));\n            const rpc_id = this.generate_request_id(method, params);\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params: params || undefined,\n                id: rpc_id\n            };\n            this.socket.send(this.dataPack.encode(message), ws_opts, (error) => {\n                if (error)\n                    return reject(error);\n                this.queue[rpc_id] = { promise: [resolve, reject] };\n                if (timeout) {\n                    this.queue[rpc_id].timeout = setTimeout(() => {\n                        delete this.queue[rpc_id];\n                        reject(new Error(\"reply timeout\"));\n                    }, timeout);\n                }\n            });\n        });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n    async login(params) {\n        const resp = await this.call(\"rpc.login\", params);\n        if (!resp)\n            throw new Error(\"authentication failed\");\n        return resp;\n    }\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n    async listMethods() {\n        return await this.call(\"__listMethods\");\n    }\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n    notify(method, params) {\n        return new Promise((resolve, reject) => {\n            if (!this.ready)\n                return reject(new Error(\"socket not ready\"));\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params\n            };\n            this.socket.send(this.dataPack.encode(message), (error) => {\n                if (error)\n                    return reject(error);\n                resolve();\n            });\n        });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n    async subscribe(event) {\n        if (typeof event === \"string\")\n            event = [event];\n        const result = await this.call(\"rpc.on\", event);\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n        return result;\n    }\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n    async unsubscribe(event) {\n        if (typeof event === \"string\")\n            event = [event];\n        const result = await this.call(\"rpc.off\", event);\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\"Failed unsubscribing from an event with: \" + result);\n        return result;\n    }\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n    close(code, data) {\n        this.socket.close(code || 1000, data);\n    }\n    /**\n     * Enable / disable automatic reconnection.\n     * @method\n     * @param {Boolean} reconnect - enable / disable reconnection\n     * @return {Undefined}\n     */\n    setAutoReconnect(reconnect) {\n        this.reconnect = reconnect;\n    }\n    /**\n     * Set the interval between reconnection attempts.\n     * @method\n     * @param {Number} interval - reconnection interval in milliseconds\n     * @return {Undefined}\n     */\n    setReconnectInterval(interval) {\n        this.reconnect_interval = interval;\n    }\n    /**\n     * Set the maximum number of reconnection attempts.\n     * @method\n     * @param {Number} max_reconnects - maximum reconnection attempts\n     * @return {Undefined}\n     */\n    setMaxReconnects(max_reconnects) {\n        this.max_reconnects = max_reconnects;\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n    _connect(address, options) {\n        clearTimeout(this.reconnect_timer_id);\n        this.socket = this.webSocketFactory(address, options);\n        this.socket.addEventListener(\"open\", () => {\n            this.ready = true;\n            this.emit(\"open\");\n            this.current_reconnects = 0;\n        });\n        this.socket.addEventListener(\"message\", ({ data: message }) => {\n            if (message instanceof ArrayBuffer)\n                message = Buffer.from(message).toString();\n            try {\n                message = this.dataPack.decode(message);\n            }\n            catch (error) {\n                return;\n            }\n            // check if any listeners are attached and forward event\n            if (message.notification && this.listeners(message.notification).length) {\n                if (!Object.keys(message.params).length)\n                    return this.emit(message.notification);\n                const args = [message.notification];\n                if (message.params.constructor === Object)\n                    args.push(message.params);\n                else\n                    // using for-loop instead of unshift/spread because performance is better\n                    for (let i = 0; i < message.params.length; i++)\n                        args.push(message.params[i]);\n                // run as microtask so that pending queue messages are resolved first\n                // eslint-disable-next-line prefer-spread\n                return Promise.resolve().then(() => { this.emit.apply(this, args); });\n            }\n            if (!this.queue[message.id]) {\n                // general JSON RPC 2.0 events\n                if (message.method) {\n                    // run as microtask so that pending queue messages are resolved first\n                    return Promise.resolve().then(() => {\n                        this.emit(message.method, message?.params);\n                    });\n                }\n                return;\n            }\n            // reject early since server's response is invalid\n            if (\"error\" in message === \"result\" in message)\n                this.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" +\n                    \" or \\\"error\\\", but not both.\"));\n            if (this.queue[message.id].timeout)\n                clearTimeout(this.queue[message.id].timeout);\n            if (message.error)\n                this.queue[message.id].promise[1](message.error);\n            else\n                this.queue[message.id].promise[0](message.result);\n            delete this.queue[message.id];\n        });\n        this.socket.addEventListener(\"error\", (error) => this.emit(\"error\", error));\n        this.socket.addEventListener(\"close\", ({ code, reason }) => {\n            if (this.ready) // Delay close event until internal state is updated\n                setTimeout(() => this.emit(\"close\", code, reason), 0);\n            this.ready = false;\n            this.socket = undefined;\n            if (code === 1000)\n                return;\n            this.current_reconnects++;\n            if (this.reconnect && ((this.max_reconnects > this.current_reconnects) ||\n                this.max_reconnects === 0))\n                this.reconnect_timer_id = setTimeout(() => this._connect(address, options), this.reconnect_interval);\n        });\n    }\n}\nexports.default = CommonClient;\n","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst eventemitter3_1 = require(\"eventemitter3\");\nclass WebSocketBrowserImpl extends eventemitter3_1.EventEmitter {\n    socket;\n    /** Instantiate a WebSocket class\n     * @constructor\n     * @param {String} address - url to a websocket server\n     * @param {(Object)} options - websocket options\n     * @param {(String|Array)} protocols - a list of protocols\n     * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n     */\n    constructor(address, options, protocols) {\n        super();\n        this.socket = new window.WebSocket(address, protocols);\n        this.socket.onopen = () => this.emit(\"open\");\n        this.socket.onmessage = (event) => this.emit(\"message\", event.data);\n        this.socket.onerror = (error) => this.emit(\"error\", error);\n        this.socket.onclose = (event) => {\n            this.emit(\"close\", event.code, event.reason);\n        };\n    }\n    /**\n     * Sends data through a websocket connection\n     * @method\n     * @param {(String|Object)} data - data to be sent via websocket\n     * @param {Object} optionsOrCallback - ws options\n     * @param {Function} callback - a callback called once the data is sent\n     * @return {Undefined}\n     */\n    send(data, optionsOrCallback, callback) {\n        const cb = callback || optionsOrCallback;\n        try {\n            this.socket.send(data);\n            cb();\n        }\n        catch (error) {\n            cb(error);\n        }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n    close(code, reason) {\n        this.socket.close(code, reason);\n    }\n    addEventListener(type, listener, options) {\n        this.socket.addEventListener(type, listener, options);\n    }\n}\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nfunction default_1(address, options) {\n    return new WebSocketBrowserImpl(address, options);\n}\nexports.default = default_1;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createError = exports.DefaultDataPack = void 0;\nconst errors = new Map([\n    [-32000, \"Event not provided\"],\n    [-32600, \"Invalid Request\"],\n    [-32601, \"Method not found\"],\n    [-32602, \"Invalid params\"],\n    [-32603, \"Internal error\"],\n    [-32604, \"Params not found\"],\n    [-32605, \"Method forbidden\"],\n    [-32606, \"Event forbidden\"],\n    [-32700, \"Parse error\"]\n]);\nclass DefaultDataPack {\n    encode(value) {\n        return JSON.stringify(value);\n    }\n    decode(value) {\n        return JSON.parse(value);\n    }\n}\nexports.DefaultDataPack = DefaultDataPack;\n/**\n * Creates a JSON-RPC 2.0-compliant error.\n * @param {Number} code - error code\n * @param {String} details - error details\n * @return {Object}\n */\nfunction createError(code, details) {\n    const error = {\n        code: code,\n        message: errors.get(code) || \"Internal Server Error\"\n    };\n    if (details)\n        error[\"data\"] = details;\n    return error;\n}\nexports.createError = createError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeDecode = void 0;\nconst encodeDecode = (layout) => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\nexports.encodeDecode = encodeDecode;\n//# sourceMappingURL=base.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.u256be = exports.u256 = exports.u192be = exports.u192 = exports.u128be = exports.u128 = exports.u64be = exports.u64 = exports.bigIntBE = exports.bigInt = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst bigint_buffer_1 = require(\"bigint-buffer\");\nconst base_1 = require(\"./base\");\nconst bigInt = (length) => (property) => {\n    const layout = (0, buffer_layout_1.blob)(length, property);\n    const { encode, decode } = (0, base_1.encodeDecode)(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return (0, bigint_buffer_1.toBigIntLE)(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = (0, bigint_buffer_1.toBufferLE)(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexports.bigInt = bigInt;\nconst bigIntBE = (length) => (property) => {\n    const layout = (0, buffer_layout_1.blob)(length, property);\n    const { encode, decode } = (0, base_1.encodeDecode)(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return (0, bigint_buffer_1.toBigIntBE)(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = (0, bigint_buffer_1.toBufferBE)(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexports.bigIntBE = bigIntBE;\nexports.u64 = (0, exports.bigInt)(8);\nexports.u64be = (0, exports.bigIntBE)(8);\nexports.u128 = (0, exports.bigInt)(16);\nexports.u128be = (0, exports.bigIntBE)(16);\nexports.u192 = (0, exports.bigInt)(24);\nexports.u192be = (0, exports.bigIntBE)(24);\nexports.u256 = (0, exports.bigInt)(32);\nexports.u256be = (0, exports.bigIntBE)(32);\n//# sourceMappingURL=bigint.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decimal = exports.WAD = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst base_1 = require(\"./base\");\nconst bigint_1 = require(\"./bigint\");\nexports.WAD = new bignumber_js_1.default('1e+18');\nconst decimal = (property) => {\n    const layout = (0, bigint_1.u128)(property);\n    const { encode, decode } = (0, base_1.encodeDecode)(layout);\n    const decimalLayout = layout;\n    decimalLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset).toString();\n        return new bignumber_js_1.default(src).div(exports.WAD);\n    };\n    decimalLayout.encode = (decimal, buffer, offset) => {\n        const src = BigInt(decimal.times(exports.WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n    return decimalLayout;\n};\nexports.decimal = decimal;\n//# sourceMappingURL=decimal.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./base\"), exports);\n__exportStar(require(\"./bigint\"), exports);\n__exportStar(require(\"./decimal\"), exports);\n__exportStar(require(\"./native\"), exports);\n__exportStar(require(\"./web3\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bool = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst base_1 = require(\"./base\");\nconst bool = (property) => {\n    const layout = (0, buffer_layout_1.u8)(property);\n    const { encode, decode } = (0, base_1.encodeDecode)(layout);\n    const boolLayout = layout;\n    boolLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n    boolLayout.encode = (bool, buffer, offset) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n    return boolLayout;\n};\nexports.bool = bool;\n//# sourceMappingURL=native.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.publicKey = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst base_1 = require(\"./base\");\nconst publicKey = (property) => {\n    const layout = (0, buffer_layout_1.blob)(32, property);\n    const { encode, decode } = (0, base_1.encodeDecode)(layout);\n    const publicKeyLayout = layout;\n    publicKeyLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return new web3_js_1.PublicKey(src);\n    };\n    publicKeyLayout.encode = (publicKey, buffer, offset) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n    return publicKeyLayout;\n};\nexports.publicKey = publicKey;\n//# sourceMappingURL=web3.js.map","'use strict';\n\nvar errors = require('@solana/errors');\n\n// src/assertions.ts\nfunction assertByteArrayIsNotEmptyForCodec(codecDescription, bytes, offset = 0) {\n  if (bytes.length - offset <= 0) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY, {\n      codecDescription\n    });\n  }\n}\nfunction assertByteArrayHasEnoughBytesForCodec(codecDescription, expected, bytes, offset = 0) {\n  const bytesLength = bytes.length - offset;\n  if (bytesLength < expected) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH, {\n      bytesLength,\n      codecDescription,\n      expected\n    });\n  }\n}\nfunction assertByteArrayOffsetIsNotOutOfRange(codecDescription, offset, bytesLength) {\n  if (offset < 0 || offset > bytesLength) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE, {\n      bytesLength,\n      codecDescription,\n      offset\n    });\n  }\n}\n\n// src/bytes.ts\nvar mergeBytes = (byteArrays) => {\n  const nonEmptyByteArrays = byteArrays.filter((arr) => arr.length);\n  if (nonEmptyByteArrays.length === 0) {\n    return byteArrays.length ? byteArrays[0] : new Uint8Array();\n  }\n  if (nonEmptyByteArrays.length === 1) {\n    return nonEmptyByteArrays[0];\n  }\n  const totalLength = nonEmptyByteArrays.reduce((total, arr) => total + arr.length, 0);\n  const result = new Uint8Array(totalLength);\n  let offset = 0;\n  nonEmptyByteArrays.forEach((arr) => {\n    result.set(arr, offset);\n    offset += arr.length;\n  });\n  return result;\n};\nvar padBytes = (bytes, length) => {\n  if (bytes.length >= length)\n    return bytes;\n  const paddedBytes = new Uint8Array(length).fill(0);\n  paddedBytes.set(bytes);\n  return paddedBytes;\n};\nvar fixBytes = (bytes, length) => padBytes(bytes.length <= length ? bytes : bytes.slice(0, length), length);\nfunction getEncodedSize(value, encoder) {\n  return \"fixedSize\" in encoder ? encoder.fixedSize : encoder.getSizeFromValue(value);\n}\nfunction createEncoder(encoder) {\n  return Object.freeze({\n    ...encoder,\n    encode: (value) => {\n      const bytes = new Uint8Array(getEncodedSize(value, encoder));\n      encoder.write(value, bytes, 0);\n      return bytes;\n    }\n  });\n}\nfunction createDecoder(decoder) {\n  return Object.freeze({\n    ...decoder,\n    decode: (bytes, offset = 0) => decoder.read(bytes, offset)[0]\n  });\n}\nfunction createCodec(codec) {\n  return Object.freeze({\n    ...codec,\n    decode: (bytes, offset = 0) => codec.read(bytes, offset)[0],\n    encode: (value) => {\n      const bytes = new Uint8Array(getEncodedSize(value, codec));\n      codec.write(value, bytes, 0);\n      return bytes;\n    }\n  });\n}\nfunction isFixedSize(codec) {\n  return \"fixedSize\" in codec && typeof codec.fixedSize === \"number\";\n}\nfunction assertIsFixedSize(codec) {\n  if (!isFixedSize(codec)) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH);\n  }\n}\nfunction isVariableSize(codec) {\n  return !isFixedSize(codec);\n}\nfunction assertIsVariableSize(codec) {\n  if (!isVariableSize(codec)) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH);\n  }\n}\nfunction combineCodec(encoder, decoder) {\n  if (isFixedSize(encoder) !== isFixedSize(decoder)) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH);\n  }\n  if (isFixedSize(encoder) && isFixedSize(decoder) && encoder.fixedSize !== decoder.fixedSize) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH, {\n      decoderFixedSize: decoder.fixedSize,\n      encoderFixedSize: encoder.fixedSize\n    });\n  }\n  if (!isFixedSize(encoder) && !isFixedSize(decoder) && encoder.maxSize !== decoder.maxSize) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH, {\n      decoderMaxSize: decoder.maxSize,\n      encoderMaxSize: encoder.maxSize\n    });\n  }\n  return {\n    ...decoder,\n    ...encoder,\n    decode: decoder.decode,\n    encode: encoder.encode,\n    read: decoder.read,\n    write: encoder.write\n  };\n}\n\n// src/fix-codec.ts\nfunction fixEncoder(encoder, fixedBytes) {\n  return createEncoder({\n    fixedSize: fixedBytes,\n    write: (value, bytes, offset) => {\n      const variableByteArray = encoder.encode(value);\n      const fixedByteArray = variableByteArray.length > fixedBytes ? variableByteArray.slice(0, fixedBytes) : variableByteArray;\n      bytes.set(fixedByteArray, offset);\n      return offset + fixedBytes;\n    }\n  });\n}\nfunction fixDecoder(decoder, fixedBytes) {\n  return createDecoder({\n    fixedSize: fixedBytes,\n    read: (bytes, offset) => {\n      assertByteArrayHasEnoughBytesForCodec(\"fixCodec\", fixedBytes, bytes, offset);\n      if (offset > 0 || bytes.length > fixedBytes) {\n        bytes = bytes.slice(offset, offset + fixedBytes);\n      }\n      if (isFixedSize(decoder)) {\n        bytes = fixBytes(bytes, decoder.fixedSize);\n      }\n      const [value] = decoder.read(bytes, 0);\n      return [value, offset + fixedBytes];\n    }\n  });\n}\nfunction fixCodec(codec, fixedBytes) {\n  return combineCodec(fixEncoder(codec, fixedBytes), fixDecoder(codec, fixedBytes));\n}\n\n// src/map-codec.ts\nfunction mapEncoder(encoder, unmap) {\n  return createEncoder({\n    ...isVariableSize(encoder) ? { ...encoder, getSizeFromValue: (value) => encoder.getSizeFromValue(unmap(value)) } : encoder,\n    write: (value, bytes, offset) => encoder.write(unmap(value), bytes, offset)\n  });\n}\nfunction mapDecoder(decoder, map) {\n  return createDecoder({\n    ...decoder,\n    read: (bytes, offset) => {\n      const [value, newOffset] = decoder.read(bytes, offset);\n      return [map(value, bytes, offset), newOffset];\n    }\n  });\n}\nfunction mapCodec(codec, unmap, map) {\n  return createCodec({\n    ...mapEncoder(codec, unmap),\n    read: map ? mapDecoder(codec, map).read : codec.read\n  });\n}\n\n// src/offset-codec.ts\nfunction offsetEncoder(encoder, config) {\n  return createEncoder({\n    ...encoder,\n    write: (value, bytes, preOffset) => {\n      const wrapBytes = (offset) => modulo(offset, bytes.length);\n      const newPreOffset = config.preOffset ? config.preOffset({ bytes, preOffset, wrapBytes }) : preOffset;\n      assertByteArrayOffsetIsNotOutOfRange(\"offsetEncoder\", newPreOffset, bytes.length);\n      const postOffset = encoder.write(value, bytes, newPreOffset);\n      const newPostOffset = config.postOffset ? config.postOffset({ bytes, newPreOffset, postOffset, preOffset, wrapBytes }) : postOffset;\n      assertByteArrayOffsetIsNotOutOfRange(\"offsetEncoder\", newPostOffset, bytes.length);\n      return newPostOffset;\n    }\n  });\n}\nfunction offsetDecoder(decoder, config) {\n  return createDecoder({\n    ...decoder,\n    read: (bytes, preOffset) => {\n      const wrapBytes = (offset) => modulo(offset, bytes.length);\n      const newPreOffset = config.preOffset ? config.preOffset({ bytes, preOffset, wrapBytes }) : preOffset;\n      assertByteArrayOffsetIsNotOutOfRange(\"offsetDecoder\", newPreOffset, bytes.length);\n      const [value, postOffset] = decoder.read(bytes, newPreOffset);\n      const newPostOffset = config.postOffset ? config.postOffset({ bytes, newPreOffset, postOffset, preOffset, wrapBytes }) : postOffset;\n      assertByteArrayOffsetIsNotOutOfRange(\"offsetDecoder\", newPostOffset, bytes.length);\n      return [value, newPostOffset];\n    }\n  });\n}\nfunction offsetCodec(codec, config) {\n  return combineCodec(offsetEncoder(codec, config), offsetDecoder(codec, config));\n}\nfunction modulo(dividend, divisor) {\n  if (divisor === 0)\n    return 0;\n  return (dividend % divisor + divisor) % divisor;\n}\nfunction resizeEncoder(encoder, resize) {\n  if (isFixedSize(encoder)) {\n    const fixedSize = resize(encoder.fixedSize);\n    if (fixedSize < 0) {\n      throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, {\n        bytesLength: fixedSize,\n        codecDescription: \"resizeEncoder\"\n      });\n    }\n    return createEncoder({ ...encoder, fixedSize });\n  }\n  return createEncoder({\n    ...encoder,\n    getSizeFromValue: (value) => {\n      const newSize = resize(encoder.getSizeFromValue(value));\n      if (newSize < 0) {\n        throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, {\n          bytesLength: newSize,\n          codecDescription: \"resizeEncoder\"\n        });\n      }\n      return newSize;\n    }\n  });\n}\nfunction resizeDecoder(decoder, resize) {\n  if (isFixedSize(decoder)) {\n    const fixedSize = resize(decoder.fixedSize);\n    if (fixedSize < 0) {\n      throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, {\n        bytesLength: fixedSize,\n        codecDescription: \"resizeDecoder\"\n      });\n    }\n    return createDecoder({ ...decoder, fixedSize });\n  }\n  return decoder;\n}\nfunction resizeCodec(codec, resize) {\n  return combineCodec(resizeEncoder(codec, resize), resizeDecoder(codec, resize));\n}\n\n// src/pad-codec.ts\nfunction padLeftEncoder(encoder, offset) {\n  return offsetEncoder(\n    resizeEncoder(encoder, (size) => size + offset),\n    { preOffset: ({ preOffset }) => preOffset + offset }\n  );\n}\nfunction padRightEncoder(encoder, offset) {\n  return offsetEncoder(\n    resizeEncoder(encoder, (size) => size + offset),\n    { postOffset: ({ postOffset }) => postOffset + offset }\n  );\n}\nfunction padLeftDecoder(decoder, offset) {\n  return offsetDecoder(\n    resizeDecoder(decoder, (size) => size + offset),\n    { preOffset: ({ preOffset }) => preOffset + offset }\n  );\n}\nfunction padRightDecoder(decoder, offset) {\n  return offsetDecoder(\n    resizeDecoder(decoder, (size) => size + offset),\n    { postOffset: ({ postOffset }) => postOffset + offset }\n  );\n}\nfunction padLeftCodec(codec, offset) {\n  return combineCodec(padLeftEncoder(codec, offset), padLeftDecoder(codec, offset));\n}\nfunction padRightCodec(codec, offset) {\n  return combineCodec(padRightEncoder(codec, offset), padRightDecoder(codec, offset));\n}\n\n// src/reverse-codec.ts\nfunction reverseEncoder(encoder) {\n  assertIsFixedSize(encoder);\n  return createEncoder({\n    ...encoder,\n    write: (value, bytes, offset) => {\n      const newOffset = encoder.write(value, bytes, offset);\n      const slice = bytes.slice(offset, offset + encoder.fixedSize).reverse();\n      bytes.set(slice, offset);\n      return newOffset;\n    }\n  });\n}\nfunction reverseDecoder(decoder) {\n  assertIsFixedSize(decoder);\n  return createDecoder({\n    ...decoder,\n    read: (bytes, offset) => {\n      const reverseEnd = offset + decoder.fixedSize;\n      if (offset === 0 && bytes.length === reverseEnd) {\n        return decoder.read(bytes.reverse(), offset);\n      }\n      const reversedBytes = bytes.slice();\n      reversedBytes.set(bytes.slice(offset, reverseEnd).reverse(), offset);\n      return decoder.read(reversedBytes, offset);\n    }\n  });\n}\nfunction reverseCodec(codec) {\n  return combineCodec(reverseEncoder(codec), reverseDecoder(codec));\n}\n\nexports.assertByteArrayHasEnoughBytesForCodec = assertByteArrayHasEnoughBytesForCodec;\nexports.assertByteArrayIsNotEmptyForCodec = assertByteArrayIsNotEmptyForCodec;\nexports.assertByteArrayOffsetIsNotOutOfRange = assertByteArrayOffsetIsNotOutOfRange;\nexports.assertIsFixedSize = assertIsFixedSize;\nexports.assertIsVariableSize = assertIsVariableSize;\nexports.combineCodec = combineCodec;\nexports.createCodec = createCodec;\nexports.createDecoder = createDecoder;\nexports.createEncoder = createEncoder;\nexports.fixBytes = fixBytes;\nexports.fixCodec = fixCodec;\nexports.fixDecoder = fixDecoder;\nexports.fixEncoder = fixEncoder;\nexports.getEncodedSize = getEncodedSize;\nexports.isFixedSize = isFixedSize;\nexports.isVariableSize = isVariableSize;\nexports.mapCodec = mapCodec;\nexports.mapDecoder = mapDecoder;\nexports.mapEncoder = mapEncoder;\nexports.mergeBytes = mergeBytes;\nexports.offsetCodec = offsetCodec;\nexports.offsetDecoder = offsetDecoder;\nexports.offsetEncoder = offsetEncoder;\nexports.padBytes = padBytes;\nexports.padLeftCodec = padLeftCodec;\nexports.padLeftDecoder = padLeftDecoder;\nexports.padLeftEncoder = padLeftEncoder;\nexports.padRightCodec = padRightCodec;\nexports.padRightDecoder = padRightDecoder;\nexports.padRightEncoder = padRightEncoder;\nexports.resizeCodec = resizeCodec;\nexports.resizeDecoder = resizeDecoder;\nexports.resizeEncoder = resizeEncoder;\nexports.reverseCodec = reverseCodec;\nexports.reverseDecoder = reverseDecoder;\nexports.reverseEncoder = reverseEncoder;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.cjs.map","'use strict';\n\n// ../build-scripts/env-shim.ts\nvar __DEV__ = /* @__PURE__ */ (() => process[\"env\"].NODE_ENV === \"development\")();\n\n// src/codes.ts\nvar SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = 1;\nvar SOLANA_ERROR__INVALID_NONCE = 2;\nvar SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = 3;\nvar SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = 4;\nvar SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = 5;\nvar SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = 6;\nvar SOLANA_ERROR__MALFORMED_BIGINT_STRING = 7;\nvar SOLANA_ERROR__MALFORMED_NUMBER_STRING = 8;\nvar SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = 9;\nvar SOLANA_ERROR__JSON_RPC__PARSE_ERROR = -32700;\nvar SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = -32603;\nvar SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = -32602;\nvar SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = -32601;\nvar SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = -32600;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = -32016;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = -32015;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = -32014;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = -32013;\nvar SOLANA_ERROR__JSON_RPC__SCAN_ERROR = -32012;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = -32011;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = -32010;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = -32009;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = -32008;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = -32007;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE = -32006;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = -32005;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = -32004;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE = -32003;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = -32002;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = -32001;\nvar SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = 28e5;\nvar SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = 2800001;\nvar SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = 2800002;\nvar SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = 2800003;\nvar SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = 2800004;\nvar SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = 2800005;\nvar SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = 2800006;\nvar SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = 2800007;\nvar SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = 2800008;\nvar SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = 2800009;\nvar SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = 2800010;\nvar SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = 323e4;\nvar SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = 32300001;\nvar SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = 3230002;\nvar SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = 3230003;\nvar SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = 3230004;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = 361e4;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = 3610001;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = 3610002;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = 3610003;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = 3610004;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = 3610005;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = 3610006;\nvar SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = 3704e3;\nvar SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = 3704001;\nvar SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = 3704002;\nvar SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = 3704003;\nvar SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = 4128e3;\nvar SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = 4128001;\nvar SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = 4128002;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = 4615e3;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = 4615001;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = 4615002;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = 4615003;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = 4615004;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = 4615005;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = 4615006;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = 4615007;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = 4615008;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = 4615009;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = 4615010;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = 4615011;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = 4615012;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = 4615013;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = 4615014;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = 4615015;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = 4615016;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = 4615017;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = 4615018;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = 4615019;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = 4615020;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = 4615021;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = 4615022;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = 4615023;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 4615024;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = 4615025;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = 4615026;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = 4615027;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = 4615028;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = 4615029;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = 4615030;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = 4615031;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = 4615032;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = 4615033;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = 4615034;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = 4615035;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = 4615036;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = 4615037;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = 4615038;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = 4615039;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = 4615040;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = 4615041;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = 4615042;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = 4615043;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = 4615044;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = 4615045;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = 4615046;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = 4615047;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = 4615048;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = 4615049;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = 4615050;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = 4615051;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = 4615052;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = 4615053;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS = 4615054;\nvar SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = 5508e3;\nvar SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = 5508001;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = 5508002;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = 5508003;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = 5508004;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = 5508005;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = 5508006;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = 5508007;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = 5508008;\nvar SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = 5508009;\nvar SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = 5508010;\nvar SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = 5663e3;\nvar SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = 5663001;\nvar SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = 5663002;\nvar SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = 5663003;\nvar SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = 5663004;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING = 5663005;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE = 5663006;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND = 5663007;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = 5663008;\nvar SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = 5663009;\nvar SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = 5663010;\nvar SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = 5663011;\nvar SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = 5663012;\nvar SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING = 5663013;\nvar SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE = 5663014;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = 705e4;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = 7050001;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = 7050002;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = 7050003;\nvar SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = 7050004;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = 7050005;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = 7050006;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = 7050007;\nvar SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = 7050008;\nvar SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = 7050009;\nvar SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = 7050010;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = 7050011;\nvar SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = 7050012;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = 7050013;\nvar SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = 7050014;\nvar SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = 7050015;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 7050016;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = 7050017;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = 7050018;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = 7050019;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = 7050020;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = 7050021;\nvar SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = 7050022;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = 7050023;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = 7050024;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = 7050025;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = 7050026;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = 7050027;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = 7050028;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = 7050029;\nvar SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = 7050030;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = 7050031;\nvar SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = 7050032;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = 7050033;\nvar SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = 7050034;\nvar SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED = 7050035;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = 7050036;\nvar SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = 8078e3;\nvar SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = 8078001;\nvar SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = 8078002;\nvar SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = 8078003;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = 8078004;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = 8078005;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = 8078006;\nvar SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = 8078007;\nvar SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = 8078008;\nvar SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT = 8078009;\nvar SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT = 8078010;\nvar SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = 8078011;\nvar SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = 8078012;\nvar SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = 8078013;\nvar SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = 8078014;\nvar SOLANA_ERROR__RPC__INTEGER_OVERFLOW = 81e5;\nvar SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = 8100001;\nvar SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = 8100002;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST = 819e4;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = 8190001;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED = 8190002;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED = 8190003;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT = 8190004;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING = 99e5;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE = 9900001;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING = 9900002;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = 9900003;\n\n// src/messages.ts\nvar SolanaErrorMessages = {\n  [SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND]: \"Account not found at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED]: \"Not all accounts were decoded. Encoded accounts found at addresses: $addresses.\",\n  [SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT]: \"Expected decoded account at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT]: \"Failed to decode account data at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND]: \"Accounts not found at addresses: $addresses\",\n  [SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED]: \"Unable to find a viable program address bump seed.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS]: \"$putativeAddress is not a base58-encoded address.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH]: \"Expected base58 encoded address to decode to a byte array of length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY]: \"The `CryptoKey` must be an `Ed25519` public key.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE]: \"Invalid seeds; point must fall off the Ed25519 curve.\",\n  [SOLANA_ERROR__ADDRESSES__MALFORMED_PDA]: \"Expected given program derived address to have the following format: [Address, ProgramDerivedAddressBump].\",\n  [SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED]: \"A maximum of $maxSeeds seeds, including the bump seed, may be supplied when creating an address. Received: $actual.\",\n  [SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED]: \"The seed at index $index with length $actual exceeds the maximum length of $maxSeedLength bytes.\",\n  [SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE]: \"Expected program derived address bump to be in the range [0, 255], got: $bump.\",\n  [SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER]: \"Program address cannot end with PDA marker.\",\n  [SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded address string of length in the range [32, 44]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded blockash string of length in the range [32, 44]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED]: \"The network has progressed past the last block for which this transaction could have been committed.\",\n  [SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY]: \"Codec [$codecDescription] cannot decode empty byte arrays.\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH]: \"Encoder and decoder must have the same fixed size, got [$encoderFixedSize] and [$decoderFixedSize].\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH]: \"Encoder and decoder must have the same max size, got [$encoderMaxSize] and [$decoderMaxSize].\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH]: \"Encoder and decoder must either both be fixed-size or variable-size.\",\n  [SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE]: \"Enum discriminator out of range. Expected a number between $minRange and $maxRange, got $discriminator.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH]: \"Expected a fixed-size codec, got a variable-size one.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH]: \"Codec [$codecDescription] expected a positive byte length, got $bytesLength.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH]: \"Expected a variable-size codec, got a fixed-size one.\",\n  [SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH]: \"Codec [$codecDescription] expected $expected bytes, got $bytesLength.\",\n  [SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT]: \"Invalid data enum variant. Expected one of [$variants], got $value.\",\n  [SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS]: \"Expected [$codecDescription] to have $expected items, got $actual.\",\n  [SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT]: \"Invalid scalar enum variant. Expected one of [$variants] or a number between $minRange and $maxRange, got $value.\",\n  [SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE]: \"Invalid value $value for base $base with alphabet $alphabet.\",\n  [SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE]: \"Codec [$codecDescription] expected number to be in the range [$min, $max], got $value.\",\n  [SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE]: \"Codec [$codecDescription] expected offset to be in the range [0, $bytesLength], got $offset.\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED]: \"instruction requires an uninitialized account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED]: \"instruction tries to borrow reference for an account which is already borrowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]: \"instruction left account with an outstanding borrowed reference\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED]: \"program other than the account's owner changed the size of the account data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL]: \"account data too small for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE]: \"instruction expected an executable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT]: \"An account does not have enough lamports to be rent-exempt\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW]: \"Program arithmetic overflowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR]: \"Failed to serialize or deserialize account data: $encodedData\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS]: \"Builtin programs must consume compute units\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH]: \"Cross-program invocation call depth too deep\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED]: \"Computational budget exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM]: \"custom program error: #$code\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX]: \"instruction contains duplicate accounts\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC]: \"instruction modifications of multiply-passed account differ\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT]: \"executable accounts must be rent exempt\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED]: \"instruction changed executable accounts data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE]: \"instruction changed the balance of an executable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED]: \"instruction changed executable bit of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED]: \"instruction modified data of an account it does not own\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND]: \"instruction spent from the balance of an account it does not own\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR]: \"generic instruction error\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER]: \"Provided owner is not allowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE]: \"Account is immutable\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY]: \"Incorrect authority provided\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID]: \"incorrect program id for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS]: \"insufficient funds for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA]: \"invalid account data for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER]: \"Invalid account owner\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT]: \"invalid program argument\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR]: \"program returned invalid error code\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA]: \"invalid instruction data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC]: \"Failed to reallocate account data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS]: \"Provided seeds do not result in a valid address\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED]: \"Accounts data allocations exceeded the maximum allowed per transaction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED]: \"Max accounts exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED]: \"Max instruction trace length exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED]: \"Length of the seed is too long for address generation\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT]: \"An account required by the instruction is missing\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE]: \"missing required signature for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID]: \"instruction illegally modified the program id of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS]: \"insufficient account keys for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION]: \"Cross-program invocation with unauthorized signer or writable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE]: \"Failed to create program execution environment\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE]: \"Program failed to compile\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE]: \"Program failed to complete\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED]: \"instruction modified data of a read-only account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE]: \"instruction changed the balance of a read-only account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED]: \"Cross-program invocation reentrancy not allowed for this instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED]: \"instruction modified rent epoch of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION]: \"sum of account balances before and after instruction do not match\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT]: \"instruction requires an initialized account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN]: \"\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID]: \"Unsupported program id\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR]: \"Unsupported sysvar\",\n  [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS]: \"The instruction does not have any accounts.\",\n  [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA]: \"The instruction does not have any data.\",\n  [SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH]: \"Expected instruction to have progress address $expectedProgramAddress, got $actualProgramAddress.\",\n  [SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH]: \"Expected base58 encoded blockhash to decode to a byte array of length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__INVALID_NONCE]: \"The nonce `$expectedNonceValue` is no longer valid. It has advanced to `$actualNonceValue`\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING]: \"Invariant violation: Found no abortable iterable cache entry for key `$cacheKey`. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE]: \"Invariant violation: Switch statement non-exhaustive. Received unexpected value `$unexpectedValue`. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE]: \"Invariant violation: WebSocket message iterator state is corrupt; iterated without first resolving existing message promise. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING]: \"Invariant violation: WebSocket message iterator is missing state storage. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR]: \"JSON-RPC error: Internal JSON-RPC error ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__INVALID_PARAMS]: \"JSON-RPC error: Invalid method parameter(s) ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__INVALID_REQUEST]: \"JSON-RPC error: The JSON sent is not a valid `Request` object ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND]: \"JSON-RPC error: The method does not exist / is not available ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__PARSE_ERROR]: \"JSON-RPC error: An error occurred on the server while parsing the JSON text ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__SCAN_ERROR]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED]: \"Minimum context slot has not been reached\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY]: \"Node is unhealthy; behind by $numSlotsBehind slots\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT]: \"No snapshot\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE]: \"Transaction simulation failed\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE]: \"Transaction history is not available from this node\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH]: \"Transaction signature length mismatch\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE]: \"Transaction signature verification failure\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION]: \"$__serverMessage\",\n  [SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH]: \"Key pair bytes must be of length 64, got $byteLength.\",\n  [SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH]: \"Expected private key bytes with length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH]: \"Expected base58-encoded signature to decode to a byte array of length 64. Actual length: $actualLength.\",\n  [SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded signature string of length in the range [64, 88]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE]: \"Lamports value must be in the range [0, 2e64-1]\",\n  [SOLANA_ERROR__MALFORMED_BIGINT_STRING]: \"`$value` cannot be parsed as a `BigInt`\",\n  [SOLANA_ERROR__MALFORMED_NUMBER_STRING]: \"`$value` cannot be parsed as a `Number`\",\n  [SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND]: \"No nonce account could be found at address `$nonceAccountAddress`\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST]: \"Either the notification name must end in 'Notifications' or the API must supply a subscription creator function for the notification '$notificationName' to map between the notification name and the subscribe/unsubscribe method names.\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID]: \"Failed to obtain a subscription id from the server\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED]: \"WebSocket was closed before payload could be added to the send buffer\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED]: \"WebSocket connection closed\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT]: \"WebSocket failed to connect\",\n  [SOLANA_ERROR__RPC__INTEGER_OVERFLOW]: \"The $argumentLabel argument to the `$methodName` RPC method$optionalPathLabel was `$value`. This number is unsafe for use with the Solana JSON-RPC because it exceeds `Number.MAX_SAFE_INTEGER`.\",\n  [SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR]: \"HTTP error ($statusCode): $message\",\n  [SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN]: \"HTTP header(s) forbidden: $headers. Learn more at https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name.\",\n  [SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS]: \"Multiple distinct signers were identified for address `$address`. Please ensure that you are using the same signer instance for each address.\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER]: \"The provided value does not implement the `KeyPairSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER]: \"The provided value does not implement the `MessageModifyingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER]: \"The provided value does not implement the `MessagePartialSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER]: \"The provided value does not implement any of the `MessageSigner` interfaces\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER]: \"The provided value does not implement the `TransactionModifyingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER]: \"The provided value does not implement the `TransactionPartialSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER]: \"The provided value does not implement the `TransactionSendingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER]: \"The provided value does not implement any of the `TransactionSigner` interfaces\",\n  [SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS]: \"More than one `TransactionSendingSigner` was identified.\",\n  [SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING]: \"No `TransactionSendingSigner` was identified. Please provide a valid `ITransactionWithSingleSendingSigner` transaction.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED]: \"No digest implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT]: \"Cryptographic operations are only allowed in secure browser contexts. Read more here: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED]: \"This runtime does not support the generation of Ed25519 key pairs.\\n\\nInstall and import `@solana/webcrypto-ed25519-polyfill` before generating keys in environments that do not support Ed25519.\\n\\nFor a list of runtimes that currently support Ed25519 operations, visit https://github.com/WICG/webcrypto-secure-curves/issues/20.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED]: \"No signature verification implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED]: \"No key generation implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED]: \"No signing implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED]: \"No key export implementation could be found.\",\n  [SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE]: \"Timestamp value must be in the range [-8.64e15, 8.64e15]. `$value` given\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]: \"Transaction processing left an account with an outstanding borrowed reference\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE]: \"Account in use\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE]: \"Account loaded twice\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND]: \"Attempt to debit an account but found no record of a prior credit.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND]: \"Transaction loads an address table account that doesn't exist\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED]: \"This transaction has already been processed\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND]: \"Blockhash not found\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP]: \"Loader call chain is too deep\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE]: \"Transactions are currently disabled due to cluster maintenance\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION]: \"Transaction contains a duplicate instruction ($index) that is not allowed\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE]: \"Insufficient funds for fee\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT]: \"Transaction results in an account ($accountIndex) with insufficient funds for rent\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE]: \"This account may not be used to pay transaction fees\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX]: \"Transaction contains an invalid account reference\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA]: \"Transaction loads an address table account with invalid data\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX]: \"Transaction address table lookup uses an invalid index\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER]: \"Transaction loads an address table account with an invalid owner\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT]: \"LoadedAccountsDataSizeLimit set for transaction must be greater than 0.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION]: \"This program may not be used for executing instructions\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT]: \"Transaction leaves an account with a lower balance than rent-exempt minimum\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT]: \"Transaction loads a writable account that cannot be written\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED]: \"Transaction exceeded max loaded accounts data size cap\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE]: \"Transaction requires a fee but has no signature present\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND]: \"Attempt to load a program that does not exist\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED]: \"Execution of the program referenced by account at index $accountIndex is temporarily restricted.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED]: \"ResanitizationNeeded\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE]: \"Transaction failed to sanitize accounts offsets correctly\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE]: \"Transaction did not pass signature verification\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS]: \"Transaction locked too many accounts\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION]: \"Sum of account balances before and after transaction do not match\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN]: \"The transaction failed with the error `$errorName`\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION]: \"Transaction version is unsupported\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT]: \"Transaction would exceed account data limit within the block\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT]: \"Transaction would exceed total account data limit\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT]: \"Transaction would exceed max account limit within the block\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT]: \"Transaction would exceed max Block Cost Limit\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT]: \"Transaction would exceed max Vote Cost Limit\",\n  [SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING]: \"Transaction is missing an address at index: $index.\",\n  [SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME]: \"Transaction does not have a blockhash lifetime\",\n  [SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME]: \"Transaction is not a durable nonce transaction\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING]: \"Contents of these address lookup tables unknown: $lookupTableAddresses\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE]: \"Lookup of address at index $highestRequestedIndex failed for lookup table `$lookupTableAddress`. Highest known index is $highestKnownIndex. The lookup table may have been extended since its contents were retrieved\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING]: \"No fee payer set in CompiledTransaction\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND]: \"Could not find program address at index $index\",\n  [SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING]: \"Transaction is missing a fee payer.\",\n  [SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING]: \"Could not determine this transaction's signature. Make sure that the transaction has been signed by its fee payer.\",\n  [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE]: \"Transaction first instruction is not advance nonce account instruction.\",\n  [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING]: \"Transaction with no instructions cannot be durable nonce transaction.\",\n  [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES]: \"This transaction includes an address (`$programAddress`) which is both invoked and set as the fee payer. Program addresses may not pay fees\",\n  [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE]: \"This transaction includes an address (`$programAddress`) which is both invoked and marked writable. Program addresses may not be writable\",\n  [SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING]: \"Transaction is missing signatures for addresses: $addresses.\",\n  [SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE]: \"Transaction version must be in the range [0, 127]. `$actualVersion` given\"\n};\n\n// src/message-formatter.ts\nfunction encodeValue(value) {\n  if (Array.isArray(value)) {\n    return (\n      /* \"[\" */\n      \"%5B\" + value.map(\n        (element) => typeof element === \"string\" ? encodeURIComponent(`\"${element.replace(/\"/g, '\\\\\"')}\"`) : encodeValue(element)\n      ).join(\n        /* \", \" */\n        \"%2C%20\"\n      ) + /* \"]\" */\n      \"%5D\"\n    );\n  } else if (typeof value === \"bigint\") {\n    return `${value}n`;\n  } else {\n    return encodeURIComponent(\n      String(\n        value != null && Object.getPrototypeOf(value) === null ? (\n          // Plain objects with no protoype don't have a `toString` method.\n          // Convert them before stringifying them.\n          { ...value }\n        ) : value\n      )\n    );\n  }\n}\nfunction encodeObjectContextEntry([key, value]) {\n  return `${key}=${encodeValue(value)}`;\n}\nfunction encodeContextObject(context) {\n  return Object.entries(context).map(encodeObjectContextEntry).join(\"&\");\n}\nfunction getHumanReadableErrorMessage(code, context = {}) {\n  const messageFormatString = SolanaErrorMessages[code];\n  const message = messageFormatString.replace(\n    /(?<!\\\\)\\$(\\w+)/g,\n    (substring, variableName) => variableName in context ? `${context[variableName]}` : substring\n  );\n  return message;\n}\nfunction getErrorMessage(code, context = {}) {\n  if (__DEV__) {\n    return getHumanReadableErrorMessage(code, context);\n  } else {\n    let decodingAdviceMessage = `Solana error #${code}; Decode this error by running \\`npx @solana/errors decode ${code}`;\n    if (Object.keys(context).length) {\n      decodingAdviceMessage += ` $\"${encodeContextObject(context)}\"`;\n    }\n    return `${decodingAdviceMessage}\\``;\n  }\n}\n\n// src/error.ts\nfunction isSolanaError(e, code) {\n  const isSolanaError2 = e instanceof Error && e.name === \"SolanaError\";\n  if (isSolanaError2) {\n    if (code !== void 0) {\n      return e.context.__code === code;\n    }\n    return true;\n  }\n  return false;\n}\nvar SolanaError = class extends Error {\n  context;\n  constructor(...[code, contextAndErrorOptions]) {\n    let context;\n    let errorOptions;\n    if (contextAndErrorOptions) {\n      const { cause, ...contextRest } = contextAndErrorOptions;\n      if (cause) {\n        errorOptions = { cause };\n      }\n      if (Object.keys(contextRest).length > 0) {\n        context = contextRest;\n      }\n    }\n    const message = getErrorMessage(code, context);\n    super(message, errorOptions);\n    this.context = {\n      __code: code,\n      ...context\n    };\n    this.name = \"SolanaError\";\n  }\n};\n\n// src/stack-trace.ts\nfunction safeCaptureStackTrace(...args) {\n  if (\"captureStackTrace\" in Error && typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(...args);\n  }\n}\n\n// src/rpc-enum-errors.ts\nfunction getSolanaErrorFromRpcError({ errorCodeBaseOffset, getErrorContext, orderedErrorNames, rpcEnumError }, constructorOpt) {\n  let rpcErrorName;\n  let rpcErrorContext;\n  if (typeof rpcEnumError === \"string\") {\n    rpcErrorName = rpcEnumError;\n  } else {\n    rpcErrorName = Object.keys(rpcEnumError)[0];\n    rpcErrorContext = rpcEnumError[rpcErrorName];\n  }\n  const codeOffset = orderedErrorNames.indexOf(rpcErrorName);\n  const errorCode = errorCodeBaseOffset + codeOffset;\n  const errorContext = getErrorContext(errorCode, rpcErrorName, rpcErrorContext);\n  const err = new SolanaError(errorCode, errorContext);\n  safeCaptureStackTrace(err, constructorOpt);\n  return err;\n}\n\n// src/instruction-error.ts\nvar ORDERED_ERROR_NAMES = [\n  // Keep synced with RPC source: https://github.com/anza-xyz/agave/blob/master/sdk/program/src/instruction.rs\n  // If this list ever gets too large, consider implementing a compression strategy like this:\n  // https://gist.github.com/steveluscher/aaa7cbbb5433b1197983908a40860c47\n  \"GenericError\",\n  \"InvalidArgument\",\n  \"InvalidInstructionData\",\n  \"InvalidAccountData\",\n  \"AccountDataTooSmall\",\n  \"InsufficientFunds\",\n  \"IncorrectProgramId\",\n  \"MissingRequiredSignature\",\n  \"AccountAlreadyInitialized\",\n  \"UninitializedAccount\",\n  \"UnbalancedInstruction\",\n  \"ModifiedProgramId\",\n  \"ExternalAccountLamportSpend\",\n  \"ExternalAccountDataModified\",\n  \"ReadonlyLamportChange\",\n  \"ReadonlyDataModified\",\n  \"DuplicateAccountIndex\",\n  \"ExecutableModified\",\n  \"RentEpochModified\",\n  \"NotEnoughAccountKeys\",\n  \"AccountDataSizeChanged\",\n  \"AccountNotExecutable\",\n  \"AccountBorrowFailed\",\n  \"AccountBorrowOutstanding\",\n  \"DuplicateAccountOutOfSync\",\n  \"Custom\",\n  \"InvalidError\",\n  \"ExecutableDataModified\",\n  \"ExecutableLamportChange\",\n  \"ExecutableAccountNotRentExempt\",\n  \"UnsupportedProgramId\",\n  \"CallDepth\",\n  \"MissingAccount\",\n  \"ReentrancyNotAllowed\",\n  \"MaxSeedLengthExceeded\",\n  \"InvalidSeeds\",\n  \"InvalidRealloc\",\n  \"ComputationalBudgetExceeded\",\n  \"PrivilegeEscalation\",\n  \"ProgramEnvironmentSetupFailure\",\n  \"ProgramFailedToComplete\",\n  \"ProgramFailedToCompile\",\n  \"Immutable\",\n  \"IncorrectAuthority\",\n  \"BorshIoError\",\n  \"AccountNotRentExempt\",\n  \"InvalidAccountOwner\",\n  \"ArithmeticOverflow\",\n  \"UnsupportedSysvar\",\n  \"IllegalOwner\",\n  \"MaxAccountsDataAllocationsExceeded\",\n  \"MaxAccountsExceeded\",\n  \"MaxInstructionTraceLengthExceeded\",\n  \"BuiltinProgramsMustConsumeComputeUnits\"\n];\nfunction getSolanaErrorFromInstructionError(index, instructionError) {\n  return getSolanaErrorFromRpcError(\n    {\n      errorCodeBaseOffset: 4615001,\n      getErrorContext(errorCode, rpcErrorName, rpcErrorContext) {\n        if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN) {\n          return {\n            errorName: rpcErrorName,\n            index,\n            ...rpcErrorContext !== void 0 ? { instructionErrorContext: rpcErrorContext } : null\n          };\n        } else if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM) {\n          return {\n            code: rpcErrorContext,\n            index\n          };\n        } else if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR) {\n          return {\n            encodedData: rpcErrorContext,\n            index\n          };\n        }\n        return { index };\n      },\n      orderedErrorNames: ORDERED_ERROR_NAMES,\n      rpcEnumError: instructionError\n    },\n    getSolanaErrorFromInstructionError\n  );\n}\n\n// src/transaction-error.ts\nvar ORDERED_ERROR_NAMES2 = [\n  // Keep synced with RPC source: https://github.com/anza-xyz/agave/blob/master/sdk/src/transaction/error.rs\n  // If this list ever gets too large, consider implementing a compression strategy like this:\n  // https://gist.github.com/steveluscher/aaa7cbbb5433b1197983908a40860c47\n  \"AccountInUse\",\n  \"AccountLoadedTwice\",\n  \"AccountNotFound\",\n  \"ProgramAccountNotFound\",\n  \"InsufficientFundsForFee\",\n  \"InvalidAccountForFee\",\n  \"AlreadyProcessed\",\n  \"BlockhashNotFound\",\n  // `InstructionError` intentionally omitted; delegated to `getSolanaErrorFromInstructionError`\n  \"CallChainTooDeep\",\n  \"MissingSignatureForFee\",\n  \"InvalidAccountIndex\",\n  \"SignatureFailure\",\n  \"InvalidProgramForExecution\",\n  \"SanitizeFailure\",\n  \"ClusterMaintenance\",\n  \"AccountBorrowOutstanding\",\n  \"WouldExceedMaxBlockCostLimit\",\n  \"UnsupportedVersion\",\n  \"InvalidWritableAccount\",\n  \"WouldExceedMaxAccountCostLimit\",\n  \"WouldExceedAccountDataBlockLimit\",\n  \"TooManyAccountLocks\",\n  \"AddressLookupTableNotFound\",\n  \"InvalidAddressLookupTableOwner\",\n  \"InvalidAddressLookupTableData\",\n  \"InvalidAddressLookupTableIndex\",\n  \"InvalidRentPayingAccount\",\n  \"WouldExceedMaxVoteCostLimit\",\n  \"WouldExceedAccountDataTotalLimit\",\n  \"DuplicateInstruction\",\n  \"InsufficientFundsForRent\",\n  \"MaxLoadedAccountsDataSizeExceeded\",\n  \"InvalidLoadedAccountsDataSizeLimit\",\n  \"ResanitizationNeeded\",\n  \"ProgramExecutionTemporarilyRestricted\",\n  \"UnbalancedTransaction\"\n];\nfunction getSolanaErrorFromTransactionError(transactionError) {\n  if (typeof transactionError === \"object\" && \"InstructionError\" in transactionError) {\n    return getSolanaErrorFromInstructionError(\n      ...transactionError.InstructionError\n    );\n  }\n  return getSolanaErrorFromRpcError(\n    {\n      errorCodeBaseOffset: 7050001,\n      getErrorContext(errorCode, rpcErrorName, rpcErrorContext) {\n        if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN) {\n          return {\n            errorName: rpcErrorName,\n            ...rpcErrorContext !== void 0 ? { transactionErrorContext: rpcErrorContext } : null\n          };\n        } else if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION) {\n          return {\n            index: rpcErrorContext\n          };\n        } else if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT || errorCode === SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED) {\n          return {\n            accountIndex: rpcErrorContext.account_index\n          };\n        }\n      },\n      orderedErrorNames: ORDERED_ERROR_NAMES2,\n      rpcEnumError: transactionError\n    },\n    getSolanaErrorFromTransactionError\n  );\n}\n\n// src/json-rpc-error.ts\nfunction getSolanaErrorFromJsonRpcError({ code, data, message }) {\n  let out;\n  if (code === SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE) {\n    const { err, ...preflightErrorContext } = data;\n    const causeObject = err ? { cause: getSolanaErrorFromTransactionError(err) } : null;\n    out = new SolanaError(SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE, {\n      ...preflightErrorContext,\n      ...causeObject\n    });\n  } else {\n    let errorContext;\n    switch (code) {\n      case SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR:\n      case SOLANA_ERROR__JSON_RPC__INVALID_PARAMS:\n      case SOLANA_ERROR__JSON_RPC__INVALID_REQUEST:\n      case SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND:\n      case SOLANA_ERROR__JSON_RPC__PARSE_ERROR:\n      case SOLANA_ERROR__JSON_RPC__SCAN_ERROR:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION:\n        errorContext = { __serverMessage: message };\n        break;\n      default:\n        if (typeof data === \"object\" && !Array.isArray(data)) {\n          errorContext = data;\n        }\n    }\n    out = new SolanaError(code, errorContext);\n  }\n  safeCaptureStackTrace(out, getSolanaErrorFromJsonRpcError);\n  return out;\n}\n\nexports.SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED;\nexports.SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT;\nexports.SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT;\nexports.SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND;\nexports.SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE;\nexports.SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = SOLANA_ERROR__ADDRESSES__MALFORMED_PDA;\nexports.SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED;\nexports.SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED;\nexports.SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE;\nexports.SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER;\nexports.SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE;\nexports.SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE;\nexports.SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED;\nexports.SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY;\nexports.SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH;\nexports.SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH;\nexports.SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH;\nexports.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE;\nexports.SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH;\nexports.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH;\nexports.SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH;\nexports.SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH;\nexports.SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT = SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT;\nexports.SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS;\nexports.SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT = SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT;\nexports.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE;\nexports.SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE;\nexports.SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS = SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR;\nexports.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS;\nexports.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA;\nexports.SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH;\nexports.SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH;\nexports.SOLANA_ERROR__INVALID_NONCE = SOLANA_ERROR__INVALID_NONCE;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING = SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE = SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING = SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING;\nexports.SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR;\nexports.SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = SOLANA_ERROR__JSON_RPC__INVALID_PARAMS;\nexports.SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = SOLANA_ERROR__JSON_RPC__INVALID_REQUEST;\nexports.SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND;\nexports.SOLANA_ERROR__JSON_RPC__PARSE_ERROR = SOLANA_ERROR__JSON_RPC__PARSE_ERROR;\nexports.SOLANA_ERROR__JSON_RPC__SCAN_ERROR = SOLANA_ERROR__JSON_RPC__SCAN_ERROR;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION;\nexports.SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH;\nexports.SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH;\nexports.SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH;\nexports.SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE;\nexports.SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE;\nexports.SOLANA_ERROR__MALFORMED_BIGINT_STRING = SOLANA_ERROR__MALFORMED_BIGINT_STRING;\nexports.SOLANA_ERROR__MALFORMED_NUMBER_STRING = SOLANA_ERROR__MALFORMED_NUMBER_STRING;\nexports.SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST = SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED = SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED = SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT = SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT;\nexports.SOLANA_ERROR__RPC__INTEGER_OVERFLOW = SOLANA_ERROR__RPC__INTEGER_OVERFLOW;\nexports.SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR;\nexports.SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN;\nexports.SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER;\nexports.SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS;\nexports.SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED = SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME;\nexports.SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE = SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE;\nexports.SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING = SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES;\nexports.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE;\nexports.SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE;\nexports.SolanaError = SolanaError;\nexports.getSolanaErrorFromInstructionError = getSolanaErrorFromInstructionError;\nexports.getSolanaErrorFromJsonRpcError = getSolanaErrorFromJsonRpcError;\nexports.getSolanaErrorFromTransactionError = getSolanaErrorFromTransactionError;\nexports.isSolanaError = isSolanaError;\nexports.safeCaptureStackTrace = safeCaptureStackTrace;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.cjs.map","'use strict';\n\nvar errors = require('@solana/errors');\nvar codecsCore = require('@solana/codecs-core');\n\n// src/assertions.ts\nfunction assertNumberIsBetweenForCodec(codecDescription, min, max, value) {\n  if (value < min || value > max) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, {\n      codecDescription,\n      max,\n      min,\n      value\n    });\n  }\n}\n\n// src/common.ts\nvar Endian = /* @__PURE__ */ ((Endian2) => {\n  Endian2[Endian2[\"LITTLE\"] = 0] = \"LITTLE\";\n  Endian2[Endian2[\"BIG\"] = 1] = \"BIG\";\n  return Endian2;\n})(Endian || {});\nfunction isLittleEndian(config) {\n  return config?.endian === 1 /* BIG */ ? false : true;\n}\nfunction numberEncoderFactory(input) {\n  return codecsCore.createEncoder({\n    fixedSize: input.size,\n    write(value, bytes, offset) {\n      if (input.range) {\n        assertNumberIsBetweenForCodec(input.name, input.range[0], input.range[1], value);\n      }\n      const arrayBuffer = new ArrayBuffer(input.size);\n      input.set(new DataView(arrayBuffer), value, isLittleEndian(input.config));\n      bytes.set(new Uint8Array(arrayBuffer), offset);\n      return offset + input.size;\n    }\n  });\n}\nfunction numberDecoderFactory(input) {\n  return codecsCore.createDecoder({\n    fixedSize: input.size,\n    read(bytes, offset = 0) {\n      codecsCore.assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset);\n      codecsCore.assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset);\n      const view = new DataView(toArrayBuffer(bytes, offset, input.size));\n      return [input.get(view, isLittleEndian(input.config)), offset + input.size];\n    }\n  });\n}\nfunction toArrayBuffer(bytes, offset, length) {\n  const bytesOffset = bytes.byteOffset + (offset ?? 0);\n  const bytesLength = length ?? bytes.byteLength;\n  return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);\n}\n\n// src/f32.ts\nvar getF32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"f32\",\n  set: (view, value, le) => view.setFloat32(0, value, le),\n  size: 4\n});\nvar getF32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getFloat32(0, le),\n  name: \"f32\",\n  size: 4\n});\nvar getF32Codec = (config = {}) => codecsCore.combineCodec(getF32Encoder(config), getF32Decoder(config));\nvar getF64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"f64\",\n  set: (view, value, le) => view.setFloat64(0, value, le),\n  size: 8\n});\nvar getF64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getFloat64(0, le),\n  name: \"f64\",\n  size: 8\n});\nvar getF64Codec = (config = {}) => codecsCore.combineCodec(getF64Encoder(config), getF64Decoder(config));\nvar getI128Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i128\",\n  range: [-BigInt(\"0x7fffffffffffffffffffffffffffffff\") - 1n, BigInt(\"0x7fffffffffffffffffffffffffffffff\")],\n  set: (view, value, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const rightMask = 0xffffffffffffffffn;\n    view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);\n    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n  },\n  size: 16\n});\nvar getI128Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const left = view.getBigInt64(leftOffset, le);\n    const right = view.getBigUint64(rightOffset, le);\n    return (left << 64n) + right;\n  },\n  name: \"i128\",\n  size: 16\n});\nvar getI128Codec = (config = {}) => codecsCore.combineCodec(getI128Encoder(config), getI128Decoder(config));\nvar getI16Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i16\",\n  range: [-Number(\"0x7fff\") - 1, Number(\"0x7fff\")],\n  set: (view, value, le) => view.setInt16(0, value, le),\n  size: 2\n});\nvar getI16Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getInt16(0, le),\n  name: \"i16\",\n  size: 2\n});\nvar getI16Codec = (config = {}) => codecsCore.combineCodec(getI16Encoder(config), getI16Decoder(config));\nvar getI32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i32\",\n  range: [-Number(\"0x7fffffff\") - 1, Number(\"0x7fffffff\")],\n  set: (view, value, le) => view.setInt32(0, value, le),\n  size: 4\n});\nvar getI32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getInt32(0, le),\n  name: \"i32\",\n  size: 4\n});\nvar getI32Codec = (config = {}) => codecsCore.combineCodec(getI32Encoder(config), getI32Decoder(config));\nvar getI64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i64\",\n  range: [-BigInt(\"0x7fffffffffffffff\") - 1n, BigInt(\"0x7fffffffffffffff\")],\n  set: (view, value, le) => view.setBigInt64(0, BigInt(value), le),\n  size: 8\n});\nvar getI64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getBigInt64(0, le),\n  name: \"i64\",\n  size: 8\n});\nvar getI64Codec = (config = {}) => codecsCore.combineCodec(getI64Encoder(config), getI64Decoder(config));\nvar getI8Encoder = () => numberEncoderFactory({\n  name: \"i8\",\n  range: [-Number(\"0x7f\") - 1, Number(\"0x7f\")],\n  set: (view, value) => view.setInt8(0, value),\n  size: 1\n});\nvar getI8Decoder = () => numberDecoderFactory({\n  get: (view) => view.getInt8(0),\n  name: \"i8\",\n  size: 1\n});\nvar getI8Codec = () => codecsCore.combineCodec(getI8Encoder(), getI8Decoder());\nvar getShortU16Encoder = () => codecsCore.createEncoder({\n  getSizeFromValue: (value) => {\n    if (value <= 127)\n      return 1;\n    if (value <= 16383)\n      return 2;\n    return 3;\n  },\n  maxSize: 3,\n  write: (value, bytes, offset) => {\n    assertNumberIsBetweenForCodec(\"shortU16\", 0, 65535, value);\n    const shortU16Bytes = [0];\n    for (let ii = 0; ; ii += 1) {\n      const alignedValue = value >> ii * 7;\n      if (alignedValue === 0) {\n        break;\n      }\n      const nextSevenBits = 127 & alignedValue;\n      shortU16Bytes[ii] = nextSevenBits;\n      if (ii > 0) {\n        shortU16Bytes[ii - 1] |= 128;\n      }\n    }\n    bytes.set(shortU16Bytes, offset);\n    return offset + shortU16Bytes.length;\n  }\n});\nvar getShortU16Decoder = () => codecsCore.createDecoder({\n  maxSize: 3,\n  read: (bytes, offset) => {\n    let value = 0;\n    let byteCount = 0;\n    while (++byteCount) {\n      const byteIndex = byteCount - 1;\n      const currentByte = bytes[offset + byteIndex];\n      const nextSevenBits = 127 & currentByte;\n      value |= nextSevenBits << byteIndex * 7;\n      if ((currentByte & 128) === 0) {\n        break;\n      }\n    }\n    return [value, offset + byteCount];\n  }\n});\nvar getShortU16Codec = () => codecsCore.combineCodec(getShortU16Encoder(), getShortU16Decoder());\nvar getU128Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u128\",\n  range: [0n, BigInt(\"0xffffffffffffffffffffffffffffffff\")],\n  set: (view, value, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const rightMask = 0xffffffffffffffffn;\n    view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);\n    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n  },\n  size: 16\n});\nvar getU128Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const left = view.getBigUint64(leftOffset, le);\n    const right = view.getBigUint64(rightOffset, le);\n    return (left << 64n) + right;\n  },\n  name: \"u128\",\n  size: 16\n});\nvar getU128Codec = (config = {}) => codecsCore.combineCodec(getU128Encoder(config), getU128Decoder(config));\nvar getU16Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u16\",\n  range: [0, Number(\"0xffff\")],\n  set: (view, value, le) => view.setUint16(0, value, le),\n  size: 2\n});\nvar getU16Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getUint16(0, le),\n  name: \"u16\",\n  size: 2\n});\nvar getU16Codec = (config = {}) => codecsCore.combineCodec(getU16Encoder(config), getU16Decoder(config));\nvar getU32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u32\",\n  range: [0, Number(\"0xffffffff\")],\n  set: (view, value, le) => view.setUint32(0, value, le),\n  size: 4\n});\nvar getU32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getUint32(0, le),\n  name: \"u32\",\n  size: 4\n});\nvar getU32Codec = (config = {}) => codecsCore.combineCodec(getU32Encoder(config), getU32Decoder(config));\nvar getU64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u64\",\n  range: [0n, BigInt(\"0xffffffffffffffff\")],\n  set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),\n  size: 8\n});\nvar getU64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getBigUint64(0, le),\n  name: \"u64\",\n  size: 8\n});\nvar getU64Codec = (config = {}) => codecsCore.combineCodec(getU64Encoder(config), getU64Decoder(config));\nvar getU8Encoder = () => numberEncoderFactory({\n  name: \"u8\",\n  range: [0, Number(\"0xff\")],\n  set: (view, value) => view.setUint8(0, value),\n  size: 1\n});\nvar getU8Decoder = () => numberDecoderFactory({\n  get: (view) => view.getUint8(0),\n  name: \"u8\",\n  size: 1\n});\nvar getU8Codec = () => codecsCore.combineCodec(getU8Encoder(), getU8Decoder());\n\nexports.Endian = Endian;\nexports.assertNumberIsBetweenForCodec = assertNumberIsBetweenForCodec;\nexports.getF32Codec = getF32Codec;\nexports.getF32Decoder = getF32Decoder;\nexports.getF32Encoder = getF32Encoder;\nexports.getF64Codec = getF64Codec;\nexports.getF64Decoder = getF64Decoder;\nexports.getF64Encoder = getF64Encoder;\nexports.getI128Codec = getI128Codec;\nexports.getI128Decoder = getI128Decoder;\nexports.getI128Encoder = getI128Encoder;\nexports.getI16Codec = getI16Codec;\nexports.getI16Decoder = getI16Decoder;\nexports.getI16Encoder = getI16Encoder;\nexports.getI32Codec = getI32Codec;\nexports.getI32Decoder = getI32Decoder;\nexports.getI32Encoder = getI32Encoder;\nexports.getI64Codec = getI64Codec;\nexports.getI64Decoder = getI64Decoder;\nexports.getI64Encoder = getI64Encoder;\nexports.getI8Codec = getI8Codec;\nexports.getI8Decoder = getI8Decoder;\nexports.getI8Encoder = getI8Encoder;\nexports.getShortU16Codec = getShortU16Codec;\nexports.getShortU16Decoder = getShortU16Decoder;\nexports.getShortU16Encoder = getShortU16Encoder;\nexports.getU128Codec = getU128Codec;\nexports.getU128Decoder = getU128Decoder;\nexports.getU128Encoder = getU128Encoder;\nexports.getU16Codec = getU16Codec;\nexports.getU16Decoder = getU16Decoder;\nexports.getU16Encoder = getU16Encoder;\nexports.getU32Codec = getU32Codec;\nexports.getU32Decoder = getU32Decoder;\nexports.getU32Encoder = getU32Encoder;\nexports.getU64Codec = getU64Codec;\nexports.getU64Decoder = getU64Decoder;\nexports.getU64Encoder = getU64Encoder;\nexports.getU8Codec = getU8Codec;\nexports.getU8Decoder = getU8Decoder;\nexports.getU8Encoder = getU8Encoder;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.cjs.map","'use strict';\n\n// ../build-scripts/env-shim.ts\nvar __DEV__ = /* @__PURE__ */ (() => process[\"env\"].NODE_ENV === \"development\")();\n\n// src/codes.ts\nvar SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = 1;\nvar SOLANA_ERROR__INVALID_NONCE = 2;\nvar SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = 3;\nvar SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = 4;\nvar SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = 5;\nvar SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = 6;\nvar SOLANA_ERROR__MALFORMED_BIGINT_STRING = 7;\nvar SOLANA_ERROR__MALFORMED_NUMBER_STRING = 8;\nvar SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = 9;\nvar SOLANA_ERROR__JSON_RPC__PARSE_ERROR = -32700;\nvar SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = -32603;\nvar SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = -32602;\nvar SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = -32601;\nvar SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = -32600;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = -32016;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = -32015;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = -32014;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = -32013;\nvar SOLANA_ERROR__JSON_RPC__SCAN_ERROR = -32012;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = -32011;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = -32010;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = -32009;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = -32008;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = -32007;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE = -32006;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = -32005;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = -32004;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE = -32003;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = -32002;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = -32001;\nvar SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = 28e5;\nvar SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = 2800001;\nvar SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = 2800002;\nvar SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = 2800003;\nvar SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = 2800004;\nvar SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = 2800005;\nvar SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = 2800006;\nvar SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = 2800007;\nvar SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = 2800008;\nvar SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = 2800009;\nvar SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = 2800010;\nvar SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = 323e4;\nvar SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = 32300001;\nvar SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = 3230002;\nvar SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = 3230003;\nvar SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = 3230004;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = 361e4;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = 3610001;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = 3610002;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = 3610003;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = 3610004;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = 3610005;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = 3610006;\nvar SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = 3704e3;\nvar SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = 3704001;\nvar SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = 3704002;\nvar SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = 3704003;\nvar SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = 4128e3;\nvar SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = 4128001;\nvar SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = 4128002;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = 4615e3;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = 4615001;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = 4615002;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = 4615003;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = 4615004;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = 4615005;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = 4615006;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = 4615007;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = 4615008;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = 4615009;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = 4615010;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = 4615011;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = 4615012;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = 4615013;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = 4615014;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = 4615015;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = 4615016;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = 4615017;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = 4615018;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = 4615019;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = 4615020;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = 4615021;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = 4615022;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = 4615023;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 4615024;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = 4615025;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = 4615026;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = 4615027;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = 4615028;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = 4615029;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = 4615030;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = 4615031;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = 4615032;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = 4615033;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = 4615034;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = 4615035;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = 4615036;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = 4615037;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = 4615038;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = 4615039;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = 4615040;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = 4615041;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = 4615042;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = 4615043;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = 4615044;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = 4615045;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = 4615046;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = 4615047;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = 4615048;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = 4615049;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = 4615050;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = 4615051;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = 4615052;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = 4615053;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS = 4615054;\nvar SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = 5508e3;\nvar SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = 5508001;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = 5508002;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = 5508003;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = 5508004;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = 5508005;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = 5508006;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = 5508007;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = 5508008;\nvar SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = 5508009;\nvar SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = 5508010;\nvar SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = 5663e3;\nvar SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = 5663001;\nvar SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = 5663002;\nvar SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = 5663003;\nvar SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = 5663004;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING = 5663005;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE = 5663006;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND = 5663007;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = 5663008;\nvar SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = 5663009;\nvar SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = 5663010;\nvar SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = 5663011;\nvar SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = 5663012;\nvar SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING = 5663013;\nvar SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE = 5663014;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = 705e4;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = 7050001;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = 7050002;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = 7050003;\nvar SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = 7050004;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = 7050005;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = 7050006;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = 7050007;\nvar SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = 7050008;\nvar SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = 7050009;\nvar SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = 7050010;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = 7050011;\nvar SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = 7050012;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = 7050013;\nvar SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = 7050014;\nvar SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = 7050015;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 7050016;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = 7050017;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = 7050018;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = 7050019;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = 7050020;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = 7050021;\nvar SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = 7050022;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = 7050023;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = 7050024;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = 7050025;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = 7050026;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = 7050027;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = 7050028;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = 7050029;\nvar SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = 7050030;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = 7050031;\nvar SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = 7050032;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = 7050033;\nvar SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = 7050034;\nvar SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED = 7050035;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = 7050036;\nvar SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = 8078e3;\nvar SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = 8078001;\nvar SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = 8078002;\nvar SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = 8078003;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = 8078004;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = 8078005;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = 8078006;\nvar SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = 8078007;\nvar SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = 8078008;\nvar SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT = 8078009;\nvar SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT = 8078010;\nvar SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = 8078011;\nvar SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = 8078012;\nvar SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = 8078013;\nvar SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = 8078014;\nvar SOLANA_ERROR__RPC__INTEGER_OVERFLOW = 81e5;\nvar SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = 8100001;\nvar SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = 8100002;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST = 819e4;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = 8190001;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED = 8190002;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED = 8190003;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT = 8190004;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING = 99e5;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE = 9900001;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING = 9900002;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = 9900003;\n\n// src/messages.ts\nvar SolanaErrorMessages = {\n  [SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND]: \"Account not found at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED]: \"Not all accounts were decoded. Encoded accounts found at addresses: $addresses.\",\n  [SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT]: \"Expected decoded account at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT]: \"Failed to decode account data at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND]: \"Accounts not found at addresses: $addresses\",\n  [SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED]: \"Unable to find a viable program address bump seed.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS]: \"$putativeAddress is not a base58-encoded address.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH]: \"Expected base58 encoded address to decode to a byte array of length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY]: \"The `CryptoKey` must be an `Ed25519` public key.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE]: \"Invalid seeds; point must fall off the Ed25519 curve.\",\n  [SOLANA_ERROR__ADDRESSES__MALFORMED_PDA]: \"Expected given program derived address to have the following format: [Address, ProgramDerivedAddressBump].\",\n  [SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED]: \"A maximum of $maxSeeds seeds, including the bump seed, may be supplied when creating an address. Received: $actual.\",\n  [SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED]: \"The seed at index $index with length $actual exceeds the maximum length of $maxSeedLength bytes.\",\n  [SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE]: \"Expected program derived address bump to be in the range [0, 255], got: $bump.\",\n  [SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER]: \"Program address cannot end with PDA marker.\",\n  [SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded address string of length in the range [32, 44]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded blockash string of length in the range [32, 44]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED]: \"The network has progressed past the last block for which this transaction could have been committed.\",\n  [SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY]: \"Codec [$codecDescription] cannot decode empty byte arrays.\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH]: \"Encoder and decoder must have the same fixed size, got [$encoderFixedSize] and [$decoderFixedSize].\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH]: \"Encoder and decoder must have the same max size, got [$encoderMaxSize] and [$decoderMaxSize].\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH]: \"Encoder and decoder must either both be fixed-size or variable-size.\",\n  [SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE]: \"Enum discriminator out of range. Expected a number between $minRange and $maxRange, got $discriminator.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH]: \"Expected a fixed-size codec, got a variable-size one.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH]: \"Codec [$codecDescription] expected a positive byte length, got $bytesLength.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH]: \"Expected a variable-size codec, got a fixed-size one.\",\n  [SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH]: \"Codec [$codecDescription] expected $expected bytes, got $bytesLength.\",\n  [SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT]: \"Invalid data enum variant. Expected one of [$variants], got $value.\",\n  [SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS]: \"Expected [$codecDescription] to have $expected items, got $actual.\",\n  [SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT]: \"Invalid scalar enum variant. Expected one of [$variants] or a number between $minRange and $maxRange, got $value.\",\n  [SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE]: \"Invalid value $value for base $base with alphabet $alphabet.\",\n  [SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE]: \"Codec [$codecDescription] expected number to be in the range [$min, $max], got $value.\",\n  [SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE]: \"Codec [$codecDescription] expected offset to be in the range [0, $bytesLength], got $offset.\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED]: \"instruction requires an uninitialized account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED]: \"instruction tries to borrow reference for an account which is already borrowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]: \"instruction left account with an outstanding borrowed reference\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED]: \"program other than the account's owner changed the size of the account data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL]: \"account data too small for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE]: \"instruction expected an executable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT]: \"An account does not have enough lamports to be rent-exempt\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW]: \"Program arithmetic overflowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR]: \"Failed to serialize or deserialize account data: $encodedData\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS]: \"Builtin programs must consume compute units\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH]: \"Cross-program invocation call depth too deep\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED]: \"Computational budget exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM]: \"custom program error: #$code\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX]: \"instruction contains duplicate accounts\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC]: \"instruction modifications of multiply-passed account differ\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT]: \"executable accounts must be rent exempt\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED]: \"instruction changed executable accounts data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE]: \"instruction changed the balance of an executable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED]: \"instruction changed executable bit of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED]: \"instruction modified data of an account it does not own\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND]: \"instruction spent from the balance of an account it does not own\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR]: \"generic instruction error\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER]: \"Provided owner is not allowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE]: \"Account is immutable\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY]: \"Incorrect authority provided\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID]: \"incorrect program id for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS]: \"insufficient funds for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA]: \"invalid account data for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER]: \"Invalid account owner\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT]: \"invalid program argument\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR]: \"program returned invalid error code\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA]: \"invalid instruction data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC]: \"Failed to reallocate account data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS]: \"Provided seeds do not result in a valid address\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED]: \"Accounts data allocations exceeded the maximum allowed per transaction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED]: \"Max accounts exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED]: \"Max instruction trace length exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED]: \"Length of the seed is too long for address generation\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT]: \"An account required by the instruction is missing\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE]: \"missing required signature for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID]: \"instruction illegally modified the program id of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS]: \"insufficient account keys for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION]: \"Cross-program invocation with unauthorized signer or writable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE]: \"Failed to create program execution environment\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE]: \"Program failed to compile\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE]: \"Program failed to complete\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED]: \"instruction modified data of a read-only account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE]: \"instruction changed the balance of a read-only account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED]: \"Cross-program invocation reentrancy not allowed for this instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED]: \"instruction modified rent epoch of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION]: \"sum of account balances before and after instruction do not match\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT]: \"instruction requires an initialized account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN]: \"\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID]: \"Unsupported program id\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR]: \"Unsupported sysvar\",\n  [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS]: \"The instruction does not have any accounts.\",\n  [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA]: \"The instruction does not have any data.\",\n  [SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH]: \"Expected instruction to have progress address $expectedProgramAddress, got $actualProgramAddress.\",\n  [SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH]: \"Expected base58 encoded blockhash to decode to a byte array of length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__INVALID_NONCE]: \"The nonce `$expectedNonceValue` is no longer valid. It has advanced to `$actualNonceValue`\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING]: \"Invariant violation: Found no abortable iterable cache entry for key `$cacheKey`. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE]: \"Invariant violation: Switch statement non-exhaustive. Received unexpected value `$unexpectedValue`. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE]: \"Invariant violation: WebSocket message iterator state is corrupt; iterated without first resolving existing message promise. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING]: \"Invariant violation: WebSocket message iterator is missing state storage. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR]: \"JSON-RPC error: Internal JSON-RPC error ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__INVALID_PARAMS]: \"JSON-RPC error: Invalid method parameter(s) ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__INVALID_REQUEST]: \"JSON-RPC error: The JSON sent is not a valid `Request` object ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND]: \"JSON-RPC error: The method does not exist / is not available ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__PARSE_ERROR]: \"JSON-RPC error: An error occurred on the server while parsing the JSON text ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__SCAN_ERROR]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED]: \"Minimum context slot has not been reached\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY]: \"Node is unhealthy; behind by $numSlotsBehind slots\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT]: \"No snapshot\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE]: \"Transaction simulation failed\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE]: \"Transaction history is not available from this node\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH]: \"Transaction signature length mismatch\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE]: \"Transaction signature verification failure\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION]: \"$__serverMessage\",\n  [SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH]: \"Key pair bytes must be of length 64, got $byteLength.\",\n  [SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH]: \"Expected private key bytes with length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH]: \"Expected base58-encoded signature to decode to a byte array of length 64. Actual length: $actualLength.\",\n  [SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded signature string of length in the range [64, 88]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE]: \"Lamports value must be in the range [0, 2e64-1]\",\n  [SOLANA_ERROR__MALFORMED_BIGINT_STRING]: \"`$value` cannot be parsed as a `BigInt`\",\n  [SOLANA_ERROR__MALFORMED_NUMBER_STRING]: \"`$value` cannot be parsed as a `Number`\",\n  [SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND]: \"No nonce account could be found at address `$nonceAccountAddress`\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST]: \"Either the notification name must end in 'Notifications' or the API must supply a subscription creator function for the notification '$notificationName' to map between the notification name and the subscribe/unsubscribe method names.\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID]: \"Failed to obtain a subscription id from the server\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED]: \"WebSocket was closed before payload could be added to the send buffer\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED]: \"WebSocket connection closed\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT]: \"WebSocket failed to connect\",\n  [SOLANA_ERROR__RPC__INTEGER_OVERFLOW]: \"The $argumentLabel argument to the `$methodName` RPC method$optionalPathLabel was `$value`. This number is unsafe for use with the Solana JSON-RPC because it exceeds `Number.MAX_SAFE_INTEGER`.\",\n  [SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR]: \"HTTP error ($statusCode): $message\",\n  [SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN]: \"HTTP header(s) forbidden: $headers. Learn more at https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name.\",\n  [SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS]: \"Multiple distinct signers were identified for address `$address`. Please ensure that you are using the same signer instance for each address.\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER]: \"The provided value does not implement the `KeyPairSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER]: \"The provided value does not implement the `MessageModifyingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER]: \"The provided value does not implement the `MessagePartialSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER]: \"The provided value does not implement any of the `MessageSigner` interfaces\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER]: \"The provided value does not implement the `TransactionModifyingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER]: \"The provided value does not implement the `TransactionPartialSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER]: \"The provided value does not implement the `TransactionSendingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER]: \"The provided value does not implement any of the `TransactionSigner` interfaces\",\n  [SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS]: \"More than one `TransactionSendingSigner` was identified.\",\n  [SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING]: \"No `TransactionSendingSigner` was identified. Please provide a valid `ITransactionWithSingleSendingSigner` transaction.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED]: \"No digest implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT]: \"Cryptographic operations are only allowed in secure browser contexts. Read more here: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED]: \"This runtime does not support the generation of Ed25519 key pairs.\\n\\nInstall and import `@solana/webcrypto-ed25519-polyfill` before generating keys in environments that do not support Ed25519.\\n\\nFor a list of runtimes that currently support Ed25519 operations, visit https://github.com/WICG/webcrypto-secure-curves/issues/20.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED]: \"No signature verification implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED]: \"No key generation implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED]: \"No signing implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED]: \"No key export implementation could be found.\",\n  [SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE]: \"Timestamp value must be in the range [-8.64e15, 8.64e15]. `$value` given\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]: \"Transaction processing left an account with an outstanding borrowed reference\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE]: \"Account in use\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE]: \"Account loaded twice\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND]: \"Attempt to debit an account but found no record of a prior credit.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND]: \"Transaction loads an address table account that doesn't exist\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED]: \"This transaction has already been processed\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND]: \"Blockhash not found\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP]: \"Loader call chain is too deep\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE]: \"Transactions are currently disabled due to cluster maintenance\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION]: \"Transaction contains a duplicate instruction ($index) that is not allowed\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE]: \"Insufficient funds for fee\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT]: \"Transaction results in an account ($accountIndex) with insufficient funds for rent\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE]: \"This account may not be used to pay transaction fees\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX]: \"Transaction contains an invalid account reference\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA]: \"Transaction loads an address table account with invalid data\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX]: \"Transaction address table lookup uses an invalid index\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER]: \"Transaction loads an address table account with an invalid owner\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT]: \"LoadedAccountsDataSizeLimit set for transaction must be greater than 0.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION]: \"This program may not be used for executing instructions\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT]: \"Transaction leaves an account with a lower balance than rent-exempt minimum\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT]: \"Transaction loads a writable account that cannot be written\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED]: \"Transaction exceeded max loaded accounts data size cap\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE]: \"Transaction requires a fee but has no signature present\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND]: \"Attempt to load a program that does not exist\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED]: \"Execution of the program referenced by account at index $accountIndex is temporarily restricted.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED]: \"ResanitizationNeeded\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE]: \"Transaction failed to sanitize accounts offsets correctly\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE]: \"Transaction did not pass signature verification\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS]: \"Transaction locked too many accounts\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION]: \"Sum of account balances before and after transaction do not match\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN]: \"The transaction failed with the error `$errorName`\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION]: \"Transaction version is unsupported\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT]: \"Transaction would exceed account data limit within the block\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT]: \"Transaction would exceed total account data limit\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT]: \"Transaction would exceed max account limit within the block\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT]: \"Transaction would exceed max Block Cost Limit\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT]: \"Transaction would exceed max Vote Cost Limit\",\n  [SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING]: \"Transaction is missing an address at index: $index.\",\n  [SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME]: \"Transaction does not have a blockhash lifetime\",\n  [SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME]: \"Transaction is not a durable nonce transaction\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING]: \"Contents of these address lookup tables unknown: $lookupTableAddresses\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE]: \"Lookup of address at index $highestRequestedIndex failed for lookup table `$lookupTableAddress`. Highest known index is $highestKnownIndex. The lookup table may have been extended since its contents were retrieved\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING]: \"No fee payer set in CompiledTransaction\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND]: \"Could not find program address at index $index\",\n  [SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING]: \"Transaction is missing a fee payer.\",\n  [SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING]: \"Could not determine this transaction's signature. Make sure that the transaction has been signed by its fee payer.\",\n  [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE]: \"Transaction first instruction is not advance nonce account instruction.\",\n  [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING]: \"Transaction with no instructions cannot be durable nonce transaction.\",\n  [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES]: \"This transaction includes an address (`$programAddress`) which is both invoked and set as the fee payer. Program addresses may not pay fees\",\n  [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE]: \"This transaction includes an address (`$programAddress`) which is both invoked and marked writable. Program addresses may not be writable\",\n  [SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING]: \"Transaction is missing signatures for addresses: $addresses.\",\n  [SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE]: \"Transaction version must be in the range [0, 127]. `$actualVersion` given\"\n};\n\n// src/message-formatter.ts\nfunction encodeValue(value) {\n  if (Array.isArray(value)) {\n    return (\n      /* \"[\" */\n      \"%5B\" + value.map(\n        (element) => typeof element === \"string\" ? encodeURIComponent(`\"${element.replace(/\"/g, '\\\\\"')}\"`) : encodeValue(element)\n      ).join(\n        /* \", \" */\n        \"%2C%20\"\n      ) + /* \"]\" */\n      \"%5D\"\n    );\n  } else if (typeof value === \"bigint\") {\n    return `${value}n`;\n  } else {\n    return encodeURIComponent(\n      String(\n        value != null && Object.getPrototypeOf(value) === null ? (\n          // Plain objects with no protoype don't have a `toString` method.\n          // Convert them before stringifying them.\n          { ...value }\n        ) : value\n      )\n    );\n  }\n}\nfunction encodeObjectContextEntry([key, value]) {\n  return `${key}=${encodeValue(value)}`;\n}\nfunction encodeContextObject(context) {\n  return Object.entries(context).map(encodeObjectContextEntry).join(\"&\");\n}\nfunction getHumanReadableErrorMessage(code, context = {}) {\n  const messageFormatString = SolanaErrorMessages[code];\n  const message = messageFormatString.replace(\n    /(?<!\\\\)\\$(\\w+)/g,\n    (substring, variableName) => variableName in context ? `${context[variableName]}` : substring\n  );\n  return message;\n}\nfunction getErrorMessage(code, context = {}) {\n  if (__DEV__) {\n    return getHumanReadableErrorMessage(code, context);\n  } else {\n    let decodingAdviceMessage = `Solana error #${code}; Decode this error by running \\`npx @solana/errors decode ${code}`;\n    if (Object.keys(context).length) {\n      decodingAdviceMessage += ` $\"${encodeContextObject(context)}\"`;\n    }\n    return `${decodingAdviceMessage}\\``;\n  }\n}\n\n// src/error.ts\nfunction isSolanaError(e, code) {\n  const isSolanaError2 = e instanceof Error && e.name === \"SolanaError\";\n  if (isSolanaError2) {\n    if (code !== void 0) {\n      return e.context.__code === code;\n    }\n    return true;\n  }\n  return false;\n}\nvar SolanaError = class extends Error {\n  context;\n  constructor(...[code, contextAndErrorOptions]) {\n    let context;\n    let errorOptions;\n    if (contextAndErrorOptions) {\n      const { cause, ...contextRest } = contextAndErrorOptions;\n      if (cause) {\n        errorOptions = { cause };\n      }\n      if (Object.keys(contextRest).length > 0) {\n        context = contextRest;\n      }\n    }\n    const message = getErrorMessage(code, context);\n    super(message, errorOptions);\n    this.context = {\n      __code: code,\n      ...context\n    };\n    this.name = \"SolanaError\";\n  }\n};\n\n// src/stack-trace.ts\nfunction safeCaptureStackTrace(...args) {\n  if (\"captureStackTrace\" in Error && typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(...args);\n  }\n}\n\n// src/rpc-enum-errors.ts\nfunction getSolanaErrorFromRpcError({ errorCodeBaseOffset, getErrorContext, orderedErrorNames, rpcEnumError }, constructorOpt) {\n  let rpcErrorName;\n  let rpcErrorContext;\n  if (typeof rpcEnumError === \"string\") {\n    rpcErrorName = rpcEnumError;\n  } else {\n    rpcErrorName = Object.keys(rpcEnumError)[0];\n    rpcErrorContext = rpcEnumError[rpcErrorName];\n  }\n  const codeOffset = orderedErrorNames.indexOf(rpcErrorName);\n  const errorCode = errorCodeBaseOffset + codeOffset;\n  const errorContext = getErrorContext(errorCode, rpcErrorName, rpcErrorContext);\n  const err = new SolanaError(errorCode, errorContext);\n  safeCaptureStackTrace(err, constructorOpt);\n  return err;\n}\n\n// src/instruction-error.ts\nvar ORDERED_ERROR_NAMES = [\n  // Keep synced with RPC source: https://github.com/anza-xyz/agave/blob/master/sdk/program/src/instruction.rs\n  // If this list ever gets too large, consider implementing a compression strategy like this:\n  // https://gist.github.com/steveluscher/aaa7cbbb5433b1197983908a40860c47\n  \"GenericError\",\n  \"InvalidArgument\",\n  \"InvalidInstructionData\",\n  \"InvalidAccountData\",\n  \"AccountDataTooSmall\",\n  \"InsufficientFunds\",\n  \"IncorrectProgramId\",\n  \"MissingRequiredSignature\",\n  \"AccountAlreadyInitialized\",\n  \"UninitializedAccount\",\n  \"UnbalancedInstruction\",\n  \"ModifiedProgramId\",\n  \"ExternalAccountLamportSpend\",\n  \"ExternalAccountDataModified\",\n  \"ReadonlyLamportChange\",\n  \"ReadonlyDataModified\",\n  \"DuplicateAccountIndex\",\n  \"ExecutableModified\",\n  \"RentEpochModified\",\n  \"NotEnoughAccountKeys\",\n  \"AccountDataSizeChanged\",\n  \"AccountNotExecutable\",\n  \"AccountBorrowFailed\",\n  \"AccountBorrowOutstanding\",\n  \"DuplicateAccountOutOfSync\",\n  \"Custom\",\n  \"InvalidError\",\n  \"ExecutableDataModified\",\n  \"ExecutableLamportChange\",\n  \"ExecutableAccountNotRentExempt\",\n  \"UnsupportedProgramId\",\n  \"CallDepth\",\n  \"MissingAccount\",\n  \"ReentrancyNotAllowed\",\n  \"MaxSeedLengthExceeded\",\n  \"InvalidSeeds\",\n  \"InvalidRealloc\",\n  \"ComputationalBudgetExceeded\",\n  \"PrivilegeEscalation\",\n  \"ProgramEnvironmentSetupFailure\",\n  \"ProgramFailedToComplete\",\n  \"ProgramFailedToCompile\",\n  \"Immutable\",\n  \"IncorrectAuthority\",\n  \"BorshIoError\",\n  \"AccountNotRentExempt\",\n  \"InvalidAccountOwner\",\n  \"ArithmeticOverflow\",\n  \"UnsupportedSysvar\",\n  \"IllegalOwner\",\n  \"MaxAccountsDataAllocationsExceeded\",\n  \"MaxAccountsExceeded\",\n  \"MaxInstructionTraceLengthExceeded\",\n  \"BuiltinProgramsMustConsumeComputeUnits\"\n];\nfunction getSolanaErrorFromInstructionError(index, instructionError) {\n  return getSolanaErrorFromRpcError(\n    {\n      errorCodeBaseOffset: 4615001,\n      getErrorContext(errorCode, rpcErrorName, rpcErrorContext) {\n        if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN) {\n          return {\n            errorName: rpcErrorName,\n            index,\n            ...rpcErrorContext !== void 0 ? { instructionErrorContext: rpcErrorContext } : null\n          };\n        } else if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM) {\n          return {\n            code: rpcErrorContext,\n            index\n          };\n        } else if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR) {\n          return {\n            encodedData: rpcErrorContext,\n            index\n          };\n        }\n        return { index };\n      },\n      orderedErrorNames: ORDERED_ERROR_NAMES,\n      rpcEnumError: instructionError\n    },\n    getSolanaErrorFromInstructionError\n  );\n}\n\n// src/transaction-error.ts\nvar ORDERED_ERROR_NAMES2 = [\n  // Keep synced with RPC source: https://github.com/anza-xyz/agave/blob/master/sdk/src/transaction/error.rs\n  // If this list ever gets too large, consider implementing a compression strategy like this:\n  // https://gist.github.com/steveluscher/aaa7cbbb5433b1197983908a40860c47\n  \"AccountInUse\",\n  \"AccountLoadedTwice\",\n  \"AccountNotFound\",\n  \"ProgramAccountNotFound\",\n  \"InsufficientFundsForFee\",\n  \"InvalidAccountForFee\",\n  \"AlreadyProcessed\",\n  \"BlockhashNotFound\",\n  // `InstructionError` intentionally omitted; delegated to `getSolanaErrorFromInstructionError`\n  \"CallChainTooDeep\",\n  \"MissingSignatureForFee\",\n  \"InvalidAccountIndex\",\n  \"SignatureFailure\",\n  \"InvalidProgramForExecution\",\n  \"SanitizeFailure\",\n  \"ClusterMaintenance\",\n  \"AccountBorrowOutstanding\",\n  \"WouldExceedMaxBlockCostLimit\",\n  \"UnsupportedVersion\",\n  \"InvalidWritableAccount\",\n  \"WouldExceedMaxAccountCostLimit\",\n  \"WouldExceedAccountDataBlockLimit\",\n  \"TooManyAccountLocks\",\n  \"AddressLookupTableNotFound\",\n  \"InvalidAddressLookupTableOwner\",\n  \"InvalidAddressLookupTableData\",\n  \"InvalidAddressLookupTableIndex\",\n  \"InvalidRentPayingAccount\",\n  \"WouldExceedMaxVoteCostLimit\",\n  \"WouldExceedAccountDataTotalLimit\",\n  \"DuplicateInstruction\",\n  \"InsufficientFundsForRent\",\n  \"MaxLoadedAccountsDataSizeExceeded\",\n  \"InvalidLoadedAccountsDataSizeLimit\",\n  \"ResanitizationNeeded\",\n  \"ProgramExecutionTemporarilyRestricted\",\n  \"UnbalancedTransaction\"\n];\nfunction getSolanaErrorFromTransactionError(transactionError) {\n  if (typeof transactionError === \"object\" && \"InstructionError\" in transactionError) {\n    return getSolanaErrorFromInstructionError(\n      ...transactionError.InstructionError\n    );\n  }\n  return getSolanaErrorFromRpcError(\n    {\n      errorCodeBaseOffset: 7050001,\n      getErrorContext(errorCode, rpcErrorName, rpcErrorContext) {\n        if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN) {\n          return {\n            errorName: rpcErrorName,\n            ...rpcErrorContext !== void 0 ? { transactionErrorContext: rpcErrorContext } : null\n          };\n        } else if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION) {\n          return {\n            index: rpcErrorContext\n          };\n        } else if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT || errorCode === SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED) {\n          return {\n            accountIndex: rpcErrorContext.account_index\n          };\n        }\n      },\n      orderedErrorNames: ORDERED_ERROR_NAMES2,\n      rpcEnumError: transactionError\n    },\n    getSolanaErrorFromTransactionError\n  );\n}\n\n// src/json-rpc-error.ts\nfunction getSolanaErrorFromJsonRpcError({ code, data, message }) {\n  let out;\n  if (code === SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE) {\n    const { err, ...preflightErrorContext } = data;\n    const causeObject = err ? { cause: getSolanaErrorFromTransactionError(err) } : null;\n    out = new SolanaError(SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE, {\n      ...preflightErrorContext,\n      ...causeObject\n    });\n  } else {\n    let errorContext;\n    switch (code) {\n      case SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR:\n      case SOLANA_ERROR__JSON_RPC__INVALID_PARAMS:\n      case SOLANA_ERROR__JSON_RPC__INVALID_REQUEST:\n      case SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND:\n      case SOLANA_ERROR__JSON_RPC__PARSE_ERROR:\n      case SOLANA_ERROR__JSON_RPC__SCAN_ERROR:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION:\n        errorContext = { __serverMessage: message };\n        break;\n      default:\n        if (typeof data === \"object\" && !Array.isArray(data)) {\n          errorContext = data;\n        }\n    }\n    out = new SolanaError(code, errorContext);\n  }\n  safeCaptureStackTrace(out, getSolanaErrorFromJsonRpcError);\n  return out;\n}\n\nexports.SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED;\nexports.SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT;\nexports.SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT;\nexports.SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND;\nexports.SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE;\nexports.SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = SOLANA_ERROR__ADDRESSES__MALFORMED_PDA;\nexports.SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED;\nexports.SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED;\nexports.SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE;\nexports.SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER;\nexports.SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE;\nexports.SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE;\nexports.SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED;\nexports.SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY;\nexports.SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH;\nexports.SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH;\nexports.SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH;\nexports.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE;\nexports.SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH;\nexports.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH;\nexports.SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH;\nexports.SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH;\nexports.SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT = SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT;\nexports.SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS;\nexports.SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT = SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT;\nexports.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE;\nexports.SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE;\nexports.SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS = SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR;\nexports.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS;\nexports.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA;\nexports.SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH;\nexports.SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH;\nexports.SOLANA_ERROR__INVALID_NONCE = SOLANA_ERROR__INVALID_NONCE;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING = SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE = SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING = SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING;\nexports.SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR;\nexports.SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = SOLANA_ERROR__JSON_RPC__INVALID_PARAMS;\nexports.SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = SOLANA_ERROR__JSON_RPC__INVALID_REQUEST;\nexports.SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND;\nexports.SOLANA_ERROR__JSON_RPC__PARSE_ERROR = SOLANA_ERROR__JSON_RPC__PARSE_ERROR;\nexports.SOLANA_ERROR__JSON_RPC__SCAN_ERROR = SOLANA_ERROR__JSON_RPC__SCAN_ERROR;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION;\nexports.SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH;\nexports.SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH;\nexports.SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH;\nexports.SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE;\nexports.SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE;\nexports.SOLANA_ERROR__MALFORMED_BIGINT_STRING = SOLANA_ERROR__MALFORMED_BIGINT_STRING;\nexports.SOLANA_ERROR__MALFORMED_NUMBER_STRING = SOLANA_ERROR__MALFORMED_NUMBER_STRING;\nexports.SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST = SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED = SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED = SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT = SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT;\nexports.SOLANA_ERROR__RPC__INTEGER_OVERFLOW = SOLANA_ERROR__RPC__INTEGER_OVERFLOW;\nexports.SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR;\nexports.SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN;\nexports.SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER;\nexports.SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS;\nexports.SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED = SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME;\nexports.SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE = SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE;\nexports.SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING = SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES;\nexports.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE;\nexports.SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE;\nexports.SolanaError = SolanaError;\nexports.getSolanaErrorFromInstructionError = getSolanaErrorFromInstructionError;\nexports.getSolanaErrorFromJsonRpcError = getSolanaErrorFromJsonRpcError;\nexports.getSolanaErrorFromTransactionError = getSolanaErrorFromTransactionError;\nexports.isSolanaError = isSolanaError;\nexports.safeCaptureStackTrace = safeCaptureStackTrace;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.cjs.map","'use strict';\n\nvar codecsCore = require('@solana/codecs-core');\nvar codecsDataStructures = require('@solana/codecs-data-structures');\nvar codecsNumbers = require('@solana/codecs-numbers');\nvar codecsStrings = require('@solana/codecs-strings');\nvar options = require('@solana/options');\n\n\n\nObject.keys(codecsCore).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {\n\t\tenumerable: true,\n\t\tget: function () { return codecsCore[k]; }\n\t});\n});\nObject.keys(codecsDataStructures).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {\n\t\tenumerable: true,\n\t\tget: function () { return codecsDataStructures[k]; }\n\t});\n});\nObject.keys(codecsNumbers).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {\n\t\tenumerable: true,\n\t\tget: function () { return codecsNumbers[k]; }\n\t});\n});\nObject.keys(codecsStrings).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {\n\t\tenumerable: true,\n\t\tget: function () { return codecsStrings[k]; }\n\t});\n});\nObject.keys(options).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {\n\t\tenumerable: true,\n\t\tget: function () { return options[k]; }\n\t});\n});\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.cjs.map","'use strict';\n\nvar codecsCore = require('@solana/codecs-core');\nvar codecsNumbers = require('@solana/codecs-numbers');\nvar errors = require('@solana/errors');\n\n// src/array.ts\nfunction assertValidNumberOfItemsForCodec(codecDescription, expected, actual) {\n  if (expected !== actual) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, {\n      actual,\n      codecDescription,\n      expected\n    });\n  }\n}\nfunction maxCodecSizes(sizes) {\n  return sizes.reduce(\n    (all, size) => all === null || size === null ? null : Math.max(all, size),\n    0\n  );\n}\nfunction sumCodecSizes(sizes) {\n  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);\n}\nfunction getFixedSize(codec) {\n  return codecsCore.isFixedSize(codec) ? codec.fixedSize : null;\n}\nfunction getMaxSize(codec) {\n  return codecsCore.isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;\n}\n\n// src/array.ts\nfunction getArrayEncoder(item, config = {}) {\n  const size = config.size ?? codecsNumbers.getU32Encoder();\n  const fixedSize = computeArrayLikeCodecSize(size, getFixedSize(item));\n  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n  return codecsCore.createEncoder({\n    ...fixedSize !== null ? { fixedSize } : {\n      getSizeFromValue: (array) => {\n        const prefixSize = typeof size === \"object\" ? codecsCore.getEncodedSize(array.length, size) : 0;\n        return prefixSize + [...array].reduce((all, value) => all + codecsCore.getEncodedSize(value, item), 0);\n      },\n      maxSize\n    },\n    write: (array, bytes, offset) => {\n      if (typeof size === \"number\") {\n        assertValidNumberOfItemsForCodec(\"array\", size, array.length);\n      }\n      if (typeof size === \"object\") {\n        offset = size.write(array.length, bytes, offset);\n      }\n      array.forEach((value) => {\n        offset = item.write(value, bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getArrayDecoder(item, config = {}) {\n  const size = config.size ?? codecsNumbers.getU32Decoder();\n  const itemSize = getFixedSize(item);\n  const fixedSize = computeArrayLikeCodecSize(size, itemSize);\n  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n  return codecsCore.createDecoder({\n    ...fixedSize !== null ? { fixedSize } : { maxSize },\n    read: (bytes, offset) => {\n      const array = [];\n      if (typeof size === \"object\" && bytes.slice(offset).length === 0) {\n        return [array, offset];\n      }\n      if (size === \"remainder\") {\n        while (offset < bytes.length) {\n          const [value, newOffset2] = item.read(bytes, offset);\n          offset = newOffset2;\n          array.push(value);\n        }\n        return [array, offset];\n      }\n      const [resolvedSize, newOffset] = typeof size === \"number\" ? [size, offset] : size.read(bytes, offset);\n      offset = newOffset;\n      for (let i = 0; i < resolvedSize; i += 1) {\n        const [value, newOffset2] = item.read(bytes, offset);\n        offset = newOffset2;\n        array.push(value);\n      }\n      return [array, offset];\n    }\n  });\n}\nfunction getArrayCodec(item, config = {}) {\n  return codecsCore.combineCodec(getArrayEncoder(item, config), getArrayDecoder(item, config));\n}\nfunction computeArrayLikeCodecSize(size, itemSize) {\n  if (typeof size !== \"number\")\n    return null;\n  if (size === 0)\n    return 0;\n  return itemSize === null ? null : itemSize * size;\n}\nfunction getBitArrayEncoder(size, config = {}) {\n  const parsedConfig = typeof config === \"boolean\" ? { backward: config } : config;\n  const backward = parsedConfig.backward ?? false;\n  return codecsCore.createEncoder({\n    fixedSize: size,\n    write(value, bytes, offset) {\n      const bytesToAdd = [];\n      for (let i = 0; i < size; i += 1) {\n        let byte = 0;\n        for (let j = 0; j < 8; j += 1) {\n          const feature = Number(value[i * 8 + j] ?? 0);\n          byte |= feature << (backward ? j : 7 - j);\n        }\n        if (backward) {\n          bytesToAdd.unshift(byte);\n        } else {\n          bytesToAdd.push(byte);\n        }\n      }\n      bytes.set(bytesToAdd, offset);\n      return size;\n    }\n  });\n}\nfunction getBitArrayDecoder(size, config = {}) {\n  const parsedConfig = typeof config === \"boolean\" ? { backward: config } : config;\n  const backward = parsedConfig.backward ?? false;\n  return codecsCore.createDecoder({\n    fixedSize: size,\n    read(bytes, offset) {\n      codecsCore.assertByteArrayHasEnoughBytesForCodec(\"bitArray\", size, bytes, offset);\n      const booleans = [];\n      let slice = bytes.slice(offset, offset + size);\n      slice = backward ? slice.reverse() : slice;\n      slice.forEach((byte) => {\n        for (let i = 0; i < 8; i += 1) {\n          if (backward) {\n            booleans.push(Boolean(byte & 1));\n            byte >>= 1;\n          } else {\n            booleans.push(Boolean(byte & 128));\n            byte <<= 1;\n          }\n        }\n      });\n      return [booleans, offset + size];\n    }\n  });\n}\nfunction getBitArrayCodec(size, config = {}) {\n  return codecsCore.combineCodec(getBitArrayEncoder(size, config), getBitArrayDecoder(size, config));\n}\nfunction getBooleanEncoder(config = {}) {\n  const size = config.size ?? codecsNumbers.getU8Encoder();\n  codecsCore.assertIsFixedSize(size);\n  return codecsCore.mapEncoder(size, (value) => value ? 1 : 0);\n}\nfunction getBooleanDecoder(config = {}) {\n  const size = config.size ?? codecsNumbers.getU8Decoder();\n  codecsCore.assertIsFixedSize(size);\n  return codecsCore.mapDecoder(size, (value) => Number(value) === 1);\n}\nfunction getBooleanCodec(config = {}) {\n  return codecsCore.combineCodec(getBooleanEncoder(config), getBooleanDecoder(config));\n}\nfunction getBytesEncoder(config = {}) {\n  const size = config.size ?? \"variable\";\n  const byteEncoder = codecsCore.createEncoder({\n    getSizeFromValue: (value) => value.length,\n    write: (value, bytes, offset) => {\n      bytes.set(value, offset);\n      return offset + value.length;\n    }\n  });\n  if (size === \"variable\") {\n    return byteEncoder;\n  }\n  if (typeof size === \"number\") {\n    return codecsCore.fixEncoder(byteEncoder, size);\n  }\n  return codecsCore.createEncoder({\n    getSizeFromValue: (value) => codecsCore.getEncodedSize(value.length, size) + value.length,\n    write: (value, bytes, offset) => {\n      offset = size.write(value.length, bytes, offset);\n      return byteEncoder.write(value, bytes, offset);\n    }\n  });\n}\nfunction getBytesDecoder(config = {}) {\n  const size = config.size ?? \"variable\";\n  const byteDecoder = codecsCore.createDecoder({\n    read: (bytes, offset) => {\n      const slice = bytes.slice(offset);\n      return [slice, offset + slice.length];\n    }\n  });\n  if (size === \"variable\") {\n    return byteDecoder;\n  }\n  if (typeof size === \"number\") {\n    return codecsCore.fixDecoder(byteDecoder, size);\n  }\n  return codecsCore.createDecoder({\n    read: (bytes, offset) => {\n      codecsCore.assertByteArrayIsNotEmptyForCodec(\"bytes\", bytes, offset);\n      const [lengthBigInt, lengthOffset] = size.read(bytes, offset);\n      const length = Number(lengthBigInt);\n      offset = lengthOffset;\n      const contentBytes = bytes.slice(offset, offset + length);\n      codecsCore.assertByteArrayHasEnoughBytesForCodec(\"bytes\", length, contentBytes);\n      const [value, contentOffset] = byteDecoder.read(contentBytes, 0);\n      offset += contentOffset;\n      return [value, offset];\n    }\n  });\n}\nfunction getBytesCodec(config = {}) {\n  return codecsCore.combineCodec(getBytesEncoder(config), getBytesDecoder(config));\n}\nfunction getDataEnumEncoder(variants, config = {}) {\n  const prefix = config.size ?? codecsNumbers.getU8Encoder();\n  const fixedSize = getDataEnumFixedSize(variants, prefix);\n  return codecsCore.createEncoder({\n    ...fixedSize !== null ? { fixedSize } : {\n      getSizeFromValue: (variant) => {\n        const discriminator = getVariantDiscriminator(variants, variant);\n        const variantEncoder = variants[discriminator][1];\n        return codecsCore.getEncodedSize(discriminator, prefix) + codecsCore.getEncodedSize(variant, variantEncoder);\n      },\n      maxSize: getDataEnumMaxSize(variants, prefix)\n    },\n    write: (variant, bytes, offset) => {\n      const discriminator = getVariantDiscriminator(variants, variant);\n      offset = prefix.write(discriminator, bytes, offset);\n      const variantEncoder = variants[discriminator][1];\n      return variantEncoder.write(variant, bytes, offset);\n    }\n  });\n}\nfunction getDataEnumDecoder(variants, config = {}) {\n  const prefix = config.size ?? codecsNumbers.getU8Decoder();\n  const fixedSize = getDataEnumFixedSize(variants, prefix);\n  return codecsCore.createDecoder({\n    ...fixedSize !== null ? { fixedSize } : { maxSize: getDataEnumMaxSize(variants, prefix) },\n    read: (bytes, offset) => {\n      codecsCore.assertByteArrayIsNotEmptyForCodec(\"dataEnum\", bytes, offset);\n      const [discriminator, dOffset] = prefix.read(bytes, offset);\n      offset = dOffset;\n      const variantField = variants[Number(discriminator)] ?? null;\n      if (!variantField) {\n        throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n          discriminator,\n          maxRange: variants.length - 1,\n          minRange: 0\n        });\n      }\n      const [variant, vOffset] = variantField[1].read(bytes, offset);\n      offset = vOffset;\n      return [{ __kind: variantField[0], ...variant ?? {} }, offset];\n    }\n  });\n}\nfunction getDataEnumCodec(variants, config = {}) {\n  return codecsCore.combineCodec(\n    getDataEnumEncoder(variants, config),\n    getDataEnumDecoder(variants, config)\n  );\n}\nfunction getDataEnumFixedSize(variants, prefix) {\n  if (variants.length === 0)\n    return codecsCore.isFixedSize(prefix) ? prefix.fixedSize : null;\n  if (!codecsCore.isFixedSize(variants[0][1]))\n    return null;\n  const variantSize = variants[0][1].fixedSize;\n  const sameSizedVariants = variants.every(\n    (variant) => codecsCore.isFixedSize(variant[1]) && variant[1].fixedSize === variantSize\n  );\n  if (!sameSizedVariants)\n    return null;\n  return codecsCore.isFixedSize(prefix) ? prefix.fixedSize + variantSize : null;\n}\nfunction getDataEnumMaxSize(variants, prefix) {\n  const maxVariantSize = maxCodecSizes(variants.map(([, codec]) => getMaxSize(codec)));\n  return sumCodecSizes([getMaxSize(prefix), maxVariantSize]) ?? void 0;\n}\nfunction getVariantDiscriminator(variants, variant) {\n  const discriminator = variants.findIndex(([key]) => variant.__kind === key);\n  if (discriminator < 0) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT, {\n      value: variant.__kind,\n      variants: variants.map(([key]) => key)\n    });\n  }\n  return discriminator;\n}\nfunction getTupleEncoder(items) {\n  const fixedSize = sumCodecSizes(items.map(getFixedSize));\n  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n  return codecsCore.createEncoder({\n    ...fixedSize === null ? {\n      getSizeFromValue: (value) => items.map((item, index) => codecsCore.getEncodedSize(value[index], item)).reduce((all, one) => all + one, 0),\n      maxSize\n    } : { fixedSize },\n    write: (value, bytes, offset) => {\n      assertValidNumberOfItemsForCodec(\"tuple\", items.length, value.length);\n      items.forEach((item, index) => {\n        offset = item.write(value[index], bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getTupleDecoder(items) {\n  const fixedSize = sumCodecSizes(items.map(getFixedSize));\n  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n  return codecsCore.createDecoder({\n    ...fixedSize === null ? { maxSize } : { fixedSize },\n    read: (bytes, offset) => {\n      const values = [];\n      items.forEach((item) => {\n        const [newValue, newOffset] = item.read(bytes, offset);\n        values.push(newValue);\n        offset = newOffset;\n      });\n      return [values, offset];\n    }\n  });\n}\nfunction getTupleCodec(items) {\n  return codecsCore.combineCodec(\n    getTupleEncoder(items),\n    getTupleDecoder(items)\n  );\n}\n\n// src/map.ts\nfunction getMapEncoder(key, value, config = {}) {\n  return codecsCore.mapEncoder(\n    getArrayEncoder(getTupleEncoder([key, value]), config),\n    (map) => [...map.entries()]\n  );\n}\nfunction getMapDecoder(key, value, config = {}) {\n  return codecsCore.mapDecoder(\n    getArrayDecoder(getTupleDecoder([key, value]), config),\n    (entries) => new Map(entries)\n  );\n}\nfunction getMapCodec(key, value, config = {}) {\n  return codecsCore.combineCodec(getMapEncoder(key, value, config), getMapDecoder(key, value, config));\n}\nfunction getNullableEncoder(item, config = {}) {\n  const prefix = config.prefix ?? codecsNumbers.getU8Encoder();\n  const fixed = config.fixed ?? false;\n  const isZeroSizeItem = codecsCore.isFixedSize(item) && codecsCore.isFixedSize(prefix) && item.fixedSize === 0;\n  if (fixed || isZeroSizeItem) {\n    codecsCore.assertIsFixedSize(item);\n    codecsCore.assertIsFixedSize(prefix);\n    const fixedSize = prefix.fixedSize + item.fixedSize;\n    return codecsCore.createEncoder({\n      fixedSize,\n      write: (option, bytes, offset) => {\n        const prefixOffset = prefix.write(Number(option !== null), bytes, offset);\n        if (option !== null) {\n          item.write(option, bytes, prefixOffset);\n        }\n        return offset + fixedSize;\n      }\n    });\n  }\n  return codecsCore.createEncoder({\n    getSizeFromValue: (option) => codecsCore.getEncodedSize(Number(option !== null), prefix) + (option !== null ? codecsCore.getEncodedSize(option, item) : 0),\n    maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? void 0,\n    write: (option, bytes, offset) => {\n      offset = prefix.write(Number(option !== null), bytes, offset);\n      if (option !== null) {\n        offset = item.write(option, bytes, offset);\n      }\n      return offset;\n    }\n  });\n}\nfunction getNullableDecoder(item, config = {}) {\n  const prefix = config.prefix ?? codecsNumbers.getU8Decoder();\n  const fixed = config.fixed ?? false;\n  let fixedSize = null;\n  const isZeroSizeItem = codecsCore.isFixedSize(item) && codecsCore.isFixedSize(prefix) && item.fixedSize === 0;\n  if (fixed || isZeroSizeItem) {\n    codecsCore.assertIsFixedSize(item);\n    codecsCore.assertIsFixedSize(prefix);\n    fixedSize = prefix.fixedSize + item.fixedSize;\n  }\n  return codecsCore.createDecoder({\n    ...fixedSize === null ? { maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? void 0 } : { fixedSize },\n    read: (bytes, offset) => {\n      if (bytes.length - offset <= 0) {\n        return [null, offset];\n      }\n      const [isSome, prefixOffset] = prefix.read(bytes, offset);\n      if (isSome === 0) {\n        return [null, fixedSize !== null ? offset + fixedSize : prefixOffset];\n      }\n      const [value, newOffset] = item.read(bytes, prefixOffset);\n      return [value, fixedSize !== null ? offset + fixedSize : newOffset];\n    }\n  });\n}\nfunction getNullableCodec(item, config = {}) {\n  const configCast = config;\n  return codecsCore.combineCodec(getNullableEncoder(item, configCast), getNullableDecoder(item, configCast));\n}\nfunction getScalarEnumEncoder(constructor, config = {}) {\n  const prefix = config.size ?? codecsNumbers.getU8Encoder();\n  const { minRange, maxRange, allStringInputs, enumKeys, enumValues } = getScalarEnumStats(constructor);\n  return codecsCore.mapEncoder(prefix, (value) => {\n    const isInvalidNumber = typeof value === \"number\" && (value < minRange || value > maxRange);\n    const isInvalidString = typeof value === \"string\" && !allStringInputs.includes(value);\n    if (isInvalidNumber || isInvalidString) {\n      throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT, {\n        maxRange,\n        minRange,\n        value,\n        variants: allStringInputs\n      });\n    }\n    if (typeof value === \"number\")\n      return value;\n    const valueIndex = enumValues.indexOf(value);\n    if (valueIndex >= 0)\n      return valueIndex;\n    return enumKeys.indexOf(value);\n  });\n}\nfunction getScalarEnumDecoder(constructor, config = {}) {\n  const prefix = config.size ?? codecsNumbers.getU8Decoder();\n  const { minRange, maxRange, enumKeys } = getScalarEnumStats(constructor);\n  return codecsCore.mapDecoder(prefix, (value) => {\n    const valueAsNumber = Number(value);\n    if (valueAsNumber < minRange || valueAsNumber > maxRange) {\n      throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n        discriminator: valueAsNumber,\n        maxRange,\n        minRange\n      });\n    }\n    return constructor[enumKeys[valueAsNumber]];\n  });\n}\nfunction getScalarEnumCodec(constructor, config = {}) {\n  return codecsCore.combineCodec(getScalarEnumEncoder(constructor, config), getScalarEnumDecoder(constructor, config));\n}\nfunction getScalarEnumStats(constructor) {\n  const numericValues = Object.values(constructor).filter((v) => typeof v === \"number\");\n  const deduplicatedConstructor = Object.fromEntries(\n    Object.entries(constructor).slice(numericValues.length)\n  );\n  const enumKeys = Object.keys(deduplicatedConstructor);\n  const enumValues = Object.values(deduplicatedConstructor);\n  const minRange = 0;\n  const maxRange = enumValues.length - 1;\n  const allStringInputs = [\n    .../* @__PURE__ */ new Set([...enumKeys, ...enumValues.filter((v) => typeof v === \"string\")])\n  ];\n  return {\n    allStringInputs,\n    enumKeys,\n    enumValues,\n    maxRange,\n    minRange\n  };\n}\nfunction getSetEncoder(item, config = {}) {\n  return codecsCore.mapEncoder(getArrayEncoder(item, config), (set) => [...set]);\n}\nfunction getSetDecoder(item, config = {}) {\n  return codecsCore.mapDecoder(getArrayDecoder(item, config), (entries) => new Set(entries));\n}\nfunction getSetCodec(item, config = {}) {\n  return codecsCore.combineCodec(getSetEncoder(item, config), getSetDecoder(item, config));\n}\nfunction getStructEncoder(fields) {\n  const fieldCodecs = fields.map(([, codec]) => codec);\n  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n  return codecsCore.createEncoder({\n    ...fixedSize === null ? {\n      getSizeFromValue: (value) => fields.map(([key, codec]) => codecsCore.getEncodedSize(value[key], codec)).reduce((all, one) => all + one, 0),\n      maxSize\n    } : { fixedSize },\n    write: (struct, bytes, offset) => {\n      fields.forEach(([key, codec]) => {\n        offset = codec.write(struct[key], bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getStructDecoder(fields) {\n  const fieldCodecs = fields.map(([, codec]) => codec);\n  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n  return codecsCore.createDecoder({\n    ...fixedSize === null ? { maxSize } : { fixedSize },\n    read: (bytes, offset) => {\n      const struct = {};\n      fields.forEach(([key, codec]) => {\n        const [value, newOffset] = codec.read(bytes, offset);\n        offset = newOffset;\n        struct[key] = value;\n      });\n      return [struct, offset];\n    }\n  });\n}\nfunction getStructCodec(fields) {\n  return codecsCore.combineCodec(\n    getStructEncoder(fields),\n    getStructDecoder(fields)\n  );\n}\nfunction getUnitEncoder() {\n  return codecsCore.createEncoder({\n    fixedSize: 0,\n    write: (_value, _bytes, offset) => offset\n  });\n}\nfunction getUnitDecoder() {\n  return codecsCore.createDecoder({\n    fixedSize: 0,\n    read: (_bytes, offset) => [void 0, offset]\n  });\n}\nfunction getUnitCodec() {\n  return codecsCore.combineCodec(getUnitEncoder(), getUnitDecoder());\n}\n\nexports.assertValidNumberOfItemsForCodec = assertValidNumberOfItemsForCodec;\nexports.getArrayCodec = getArrayCodec;\nexports.getArrayDecoder = getArrayDecoder;\nexports.getArrayEncoder = getArrayEncoder;\nexports.getBitArrayCodec = getBitArrayCodec;\nexports.getBitArrayDecoder = getBitArrayDecoder;\nexports.getBitArrayEncoder = getBitArrayEncoder;\nexports.getBooleanCodec = getBooleanCodec;\nexports.getBooleanDecoder = getBooleanDecoder;\nexports.getBooleanEncoder = getBooleanEncoder;\nexports.getBytesCodec = getBytesCodec;\nexports.getBytesDecoder = getBytesDecoder;\nexports.getBytesEncoder = getBytesEncoder;\nexports.getDataEnumCodec = getDataEnumCodec;\nexports.getDataEnumDecoder = getDataEnumDecoder;\nexports.getDataEnumEncoder = getDataEnumEncoder;\nexports.getMapCodec = getMapCodec;\nexports.getMapDecoder = getMapDecoder;\nexports.getMapEncoder = getMapEncoder;\nexports.getNullableCodec = getNullableCodec;\nexports.getNullableDecoder = getNullableDecoder;\nexports.getNullableEncoder = getNullableEncoder;\nexports.getScalarEnumCodec = getScalarEnumCodec;\nexports.getScalarEnumDecoder = getScalarEnumDecoder;\nexports.getScalarEnumEncoder = getScalarEnumEncoder;\nexports.getSetCodec = getSetCodec;\nexports.getSetDecoder = getSetDecoder;\nexports.getSetEncoder = getSetEncoder;\nexports.getStructCodec = getStructCodec;\nexports.getStructDecoder = getStructDecoder;\nexports.getStructEncoder = getStructEncoder;\nexports.getTupleCodec = getTupleCodec;\nexports.getTupleDecoder = getTupleDecoder;\nexports.getTupleEncoder = getTupleEncoder;\nexports.getUnitCodec = getUnitCodec;\nexports.getUnitDecoder = getUnitDecoder;\nexports.getUnitEncoder = getUnitEncoder;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.cjs.map","'use strict';\n\nvar errors = require('@solana/errors');\nvar codecsCore = require('@solana/codecs-core');\nvar codecsNumbers = require('@solana/codecs-numbers');\n\n// src/assertions.ts\nfunction assertValidBaseString(alphabet4, testValue, givenValue = testValue) {\n  if (!testValue.match(new RegExp(`^[${alphabet4}]*$`))) {\n    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n      alphabet: alphabet4,\n      base: alphabet4.length,\n      value: givenValue\n    });\n  }\n}\nvar getBaseXEncoder = (alphabet4) => {\n  return codecsCore.createEncoder({\n    getSizeFromValue: (value) => {\n      const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet4[0]);\n      if (!tailChars)\n        return value.length;\n      const base10Number = getBigIntFromBaseX(tailChars, alphabet4);\n      return leadingZeroes.length + Math.ceil(base10Number.toString(16).length / 2);\n    },\n    write(value, bytes, offset) {\n      assertValidBaseString(alphabet4, value);\n      if (value === \"\")\n        return offset;\n      const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet4[0]);\n      if (!tailChars) {\n        bytes.set(new Uint8Array(leadingZeroes.length).fill(0), offset);\n        return offset + leadingZeroes.length;\n      }\n      let base10Number = getBigIntFromBaseX(tailChars, alphabet4);\n      const tailBytes = [];\n      while (base10Number > 0n) {\n        tailBytes.unshift(Number(base10Number % 256n));\n        base10Number /= 256n;\n      }\n      const bytesToAdd = [...Array(leadingZeroes.length).fill(0), ...tailBytes];\n      bytes.set(bytesToAdd, offset);\n      return offset + bytesToAdd.length;\n    }\n  });\n};\nvar getBaseXDecoder = (alphabet4) => {\n  return codecsCore.createDecoder({\n    read(rawBytes, offset) {\n      const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);\n      if (bytes.length === 0)\n        return [\"\", 0];\n      let trailIndex = bytes.findIndex((n) => n !== 0);\n      trailIndex = trailIndex === -1 ? bytes.length : trailIndex;\n      const leadingZeroes = alphabet4[0].repeat(trailIndex);\n      if (trailIndex === bytes.length)\n        return [leadingZeroes, rawBytes.length];\n      const base10Number = bytes.slice(trailIndex).reduce((sum, byte) => sum * 256n + BigInt(byte), 0n);\n      const tailChars = getBaseXFromBigInt(base10Number, alphabet4);\n      return [leadingZeroes + tailChars, rawBytes.length];\n    }\n  });\n};\nvar getBaseXCodec = (alphabet4) => codecsCore.combineCodec(getBaseXEncoder(alphabet4), getBaseXDecoder(alphabet4));\nfunction partitionLeadingZeroes(value, zeroCharacter) {\n  const [leadingZeros, tailChars] = value.split(new RegExp(`((?!${zeroCharacter}).*)`));\n  return [leadingZeros, tailChars];\n}\nfunction getBigIntFromBaseX(value, alphabet4) {\n  const base = BigInt(alphabet4.length);\n  let sum = 0n;\n  for (const char of value) {\n    sum *= base;\n    sum += BigInt(alphabet4.indexOf(char));\n  }\n  return sum;\n}\nfunction getBaseXFromBigInt(value, alphabet4) {\n  const base = BigInt(alphabet4.length);\n  const tailChars = [];\n  while (value > 0n) {\n    tailChars.unshift(alphabet4[Number(value % base)]);\n    value /= base;\n  }\n  return tailChars.join(\"\");\n}\n\n// src/base10.ts\nvar alphabet = \"0123456789\";\nvar getBase10Encoder = () => getBaseXEncoder(alphabet);\nvar getBase10Decoder = () => getBaseXDecoder(alphabet);\nvar getBase10Codec = () => getBaseXCodec(alphabet);\nvar getBase16Encoder = () => codecsCore.createEncoder({\n  getSizeFromValue: (value) => Math.ceil(value.length / 2),\n  write(value, bytes, offset) {\n    const lowercaseValue = value.toLowerCase();\n    assertValidBaseString(\"0123456789abcdef\", lowercaseValue, value);\n    const matches = lowercaseValue.match(/.{1,2}/g);\n    const hexBytes = matches ? matches.map((byte) => parseInt(byte, 16)) : [];\n    bytes.set(hexBytes, offset);\n    return hexBytes.length + offset;\n  }\n});\nvar getBase16Decoder = () => codecsCore.createDecoder({\n  read(bytes, offset) {\n    const value = bytes.slice(offset).reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n    return [value, bytes.length];\n  }\n});\nvar getBase16Codec = () => codecsCore.combineCodec(getBase16Encoder(), getBase16Decoder());\n\n// src/base58.ts\nvar alphabet2 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nvar getBase58Encoder = () => getBaseXEncoder(alphabet2);\nvar getBase58Decoder = () => getBaseXDecoder(alphabet2);\nvar getBase58Codec = () => getBaseXCodec(alphabet2);\nvar getBaseXResliceEncoder = (alphabet4, bits) => codecsCore.createEncoder({\n  getSizeFromValue: (value) => Math.floor(value.length * bits / 8),\n  write(value, bytes, offset) {\n    assertValidBaseString(alphabet4, value);\n    if (value === \"\")\n      return offset;\n    const charIndices = [...value].map((c) => alphabet4.indexOf(c));\n    const reslicedBytes = reslice(charIndices, bits, 8, false);\n    bytes.set(reslicedBytes, offset);\n    return reslicedBytes.length + offset;\n  }\n});\nvar getBaseXResliceDecoder = (alphabet4, bits) => codecsCore.createDecoder({\n  read(rawBytes, offset = 0) {\n    const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);\n    if (bytes.length === 0)\n      return [\"\", rawBytes.length];\n    const charIndices = reslice([...bytes], 8, bits, true);\n    return [charIndices.map((i) => alphabet4[i]).join(\"\"), rawBytes.length];\n  }\n});\nvar getBaseXResliceCodec = (alphabet4, bits) => codecsCore.combineCodec(getBaseXResliceEncoder(alphabet4, bits), getBaseXResliceDecoder(alphabet4, bits));\nfunction reslice(input, inputBits, outputBits, useRemainder) {\n  const output = [];\n  let accumulator = 0;\n  let bitsInAccumulator = 0;\n  const mask = (1 << outputBits) - 1;\n  for (const value of input) {\n    accumulator = accumulator << inputBits | value;\n    bitsInAccumulator += inputBits;\n    while (bitsInAccumulator >= outputBits) {\n      bitsInAccumulator -= outputBits;\n      output.push(accumulator >> bitsInAccumulator & mask);\n    }\n  }\n  if (useRemainder && bitsInAccumulator > 0) {\n    output.push(accumulator << outputBits - bitsInAccumulator & mask);\n  }\n  return output;\n}\n\n// src/base64.ts\nvar alphabet3 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar getBase64Encoder = () => {\n  {\n    return codecsCore.createEncoder({\n      getSizeFromValue: (value) => {\n        try {\n          return atob(value).length;\n        } catch (e2) {\n          throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n            alphabet: alphabet3,\n            base: 64,\n            value\n          });\n        }\n      },\n      write(value, bytes, offset) {\n        try {\n          const bytesToAdd = atob(value).split(\"\").map((c) => c.charCodeAt(0));\n          bytes.set(bytesToAdd, offset);\n          return bytesToAdd.length + offset;\n        } catch (e2) {\n          throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n            alphabet: alphabet3,\n            base: 64,\n            value\n          });\n        }\n      }\n    });\n  }\n};\nvar getBase64Decoder = () => {\n  {\n    return codecsCore.createDecoder({\n      read(bytes, offset = 0) {\n        const slice = bytes.slice(offset);\n        const value = btoa(String.fromCharCode(...slice));\n        return [value, bytes.length];\n      }\n    });\n  }\n};\nvar getBase64Codec = () => codecsCore.combineCodec(getBase64Encoder(), getBase64Decoder());\n\n// src/null-characters.ts\nvar removeNullCharacters = (value) => (\n  // eslint-disable-next-line no-control-regex\n  value.replace(/\\u0000/g, \"\")\n);\nvar padNullCharacters = (value, chars) => value.padEnd(chars, \"\\0\");\n\n// ../text-encoding-impl/dist/index.browser.js\nvar e = globalThis.TextDecoder;\nvar o = globalThis.TextEncoder;\n\n// src/utf8.ts\nvar getUtf8Encoder = () => {\n  let textEncoder;\n  return codecsCore.createEncoder({\n    getSizeFromValue: (value) => (textEncoder ||= new o()).encode(value).length,\n    write: (value, bytes, offset) => {\n      const bytesToAdd = (textEncoder ||= new o()).encode(value);\n      bytes.set(bytesToAdd, offset);\n      return offset + bytesToAdd.length;\n    }\n  });\n};\nvar getUtf8Decoder = () => {\n  let textDecoder;\n  return codecsCore.createDecoder({\n    read(bytes, offset) {\n      const value = (textDecoder ||= new e()).decode(bytes.slice(offset));\n      return [removeNullCharacters(value), bytes.length];\n    }\n  });\n};\nvar getUtf8Codec = () => codecsCore.combineCodec(getUtf8Encoder(), getUtf8Decoder());\n\n// src/string.ts\nfunction getStringEncoder(config = {}) {\n  const size = config.size ?? codecsNumbers.getU32Encoder();\n  const encoding = config.encoding ?? getUtf8Encoder();\n  if (size === \"variable\") {\n    return encoding;\n  }\n  if (typeof size === \"number\") {\n    return codecsCore.fixEncoder(encoding, size);\n  }\n  return codecsCore.createEncoder({\n    getSizeFromValue: (value) => {\n      const contentSize = codecsCore.getEncodedSize(value, encoding);\n      return codecsCore.getEncodedSize(contentSize, size) + contentSize;\n    },\n    write: (value, bytes, offset) => {\n      const contentSize = codecsCore.getEncodedSize(value, encoding);\n      offset = size.write(contentSize, bytes, offset);\n      return encoding.write(value, bytes, offset);\n    }\n  });\n}\nfunction getStringDecoder(config = {}) {\n  const size = config.size ?? codecsNumbers.getU32Decoder();\n  const encoding = config.encoding ?? getUtf8Decoder();\n  if (size === \"variable\") {\n    return encoding;\n  }\n  if (typeof size === \"number\") {\n    return codecsCore.fixDecoder(encoding, size);\n  }\n  return codecsCore.createDecoder({\n    read: (bytes, offset = 0) => {\n      codecsCore.assertByteArrayIsNotEmptyForCodec(\"string\", bytes, offset);\n      const [lengthBigInt, lengthOffset] = size.read(bytes, offset);\n      const length = Number(lengthBigInt);\n      offset = lengthOffset;\n      const contentBytes = bytes.slice(offset, offset + length);\n      codecsCore.assertByteArrayHasEnoughBytesForCodec(\"string\", length, contentBytes);\n      const [value, contentOffset] = encoding.read(contentBytes, 0);\n      offset += contentOffset;\n      return [value, offset];\n    }\n  });\n}\nfunction getStringCodec(config = {}) {\n  return codecsCore.combineCodec(getStringEncoder(config), getStringDecoder(config));\n}\n\nexports.assertValidBaseString = assertValidBaseString;\nexports.getBase10Codec = getBase10Codec;\nexports.getBase10Decoder = getBase10Decoder;\nexports.getBase10Encoder = getBase10Encoder;\nexports.getBase16Codec = getBase16Codec;\nexports.getBase16Decoder = getBase16Decoder;\nexports.getBase16Encoder = getBase16Encoder;\nexports.getBase58Codec = getBase58Codec;\nexports.getBase58Decoder = getBase58Decoder;\nexports.getBase58Encoder = getBase58Encoder;\nexports.getBase64Codec = getBase64Codec;\nexports.getBase64Decoder = getBase64Decoder;\nexports.getBase64Encoder = getBase64Encoder;\nexports.getBaseXCodec = getBaseXCodec;\nexports.getBaseXDecoder = getBaseXDecoder;\nexports.getBaseXEncoder = getBaseXEncoder;\nexports.getBaseXResliceCodec = getBaseXResliceCodec;\nexports.getBaseXResliceDecoder = getBaseXResliceDecoder;\nexports.getBaseXResliceEncoder = getBaseXResliceEncoder;\nexports.getStringCodec = getStringCodec;\nexports.getStringDecoder = getStringDecoder;\nexports.getStringEncoder = getStringEncoder;\nexports.getUtf8Codec = getUtf8Codec;\nexports.getUtf8Decoder = getUtf8Decoder;\nexports.getUtf8Encoder = getUtf8Encoder;\nexports.padNullCharacters = padNullCharacters;\nexports.removeNullCharacters = removeNullCharacters;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.cjs.map","'use strict';\n\n// ../build-scripts/env-shim.ts\nvar __DEV__ = /* @__PURE__ */ (() => process[\"env\"].NODE_ENV === \"development\")();\n\n// src/codes.ts\nvar SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = 1;\nvar SOLANA_ERROR__INVALID_NONCE = 2;\nvar SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = 3;\nvar SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = 4;\nvar SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = 5;\nvar SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = 6;\nvar SOLANA_ERROR__MALFORMED_BIGINT_STRING = 7;\nvar SOLANA_ERROR__MALFORMED_NUMBER_STRING = 8;\nvar SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = 9;\nvar SOLANA_ERROR__JSON_RPC__PARSE_ERROR = -32700;\nvar SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = -32603;\nvar SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = -32602;\nvar SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = -32601;\nvar SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = -32600;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = -32016;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = -32015;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = -32014;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = -32013;\nvar SOLANA_ERROR__JSON_RPC__SCAN_ERROR = -32012;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = -32011;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = -32010;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = -32009;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = -32008;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = -32007;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE = -32006;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = -32005;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = -32004;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE = -32003;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = -32002;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = -32001;\nvar SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = 28e5;\nvar SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = 2800001;\nvar SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = 2800002;\nvar SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = 2800003;\nvar SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = 2800004;\nvar SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = 2800005;\nvar SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = 2800006;\nvar SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = 2800007;\nvar SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = 2800008;\nvar SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = 2800009;\nvar SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = 2800010;\nvar SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = 323e4;\nvar SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = 32300001;\nvar SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = 3230002;\nvar SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = 3230003;\nvar SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = 3230004;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = 361e4;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = 3610001;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = 3610002;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = 3610003;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = 3610004;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = 3610005;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = 3610006;\nvar SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = 3704e3;\nvar SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = 3704001;\nvar SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = 3704002;\nvar SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = 3704003;\nvar SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = 4128e3;\nvar SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = 4128001;\nvar SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = 4128002;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = 4615e3;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = 4615001;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = 4615002;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = 4615003;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = 4615004;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = 4615005;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = 4615006;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = 4615007;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = 4615008;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = 4615009;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = 4615010;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = 4615011;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = 4615012;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = 4615013;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = 4615014;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = 4615015;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = 4615016;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = 4615017;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = 4615018;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = 4615019;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = 4615020;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = 4615021;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = 4615022;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = 4615023;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 4615024;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = 4615025;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = 4615026;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = 4615027;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = 4615028;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = 4615029;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = 4615030;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = 4615031;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = 4615032;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = 4615033;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = 4615034;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = 4615035;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = 4615036;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = 4615037;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = 4615038;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = 4615039;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = 4615040;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = 4615041;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = 4615042;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = 4615043;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = 4615044;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = 4615045;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = 4615046;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = 4615047;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = 4615048;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = 4615049;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = 4615050;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = 4615051;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = 4615052;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = 4615053;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS = 4615054;\nvar SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = 5508e3;\nvar SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = 5508001;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = 5508002;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = 5508003;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = 5508004;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = 5508005;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = 5508006;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = 5508007;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = 5508008;\nvar SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = 5508009;\nvar SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = 5508010;\nvar SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = 5663e3;\nvar SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = 5663001;\nvar SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = 5663002;\nvar SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = 5663003;\nvar SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = 5663004;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING = 5663005;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE = 5663006;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND = 5663007;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = 5663008;\nvar SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = 5663009;\nvar SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = 5663010;\nvar SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = 5663011;\nvar SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = 5663012;\nvar SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING = 5663013;\nvar SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE = 5663014;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = 705e4;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = 7050001;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = 7050002;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = 7050003;\nvar SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = 7050004;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = 7050005;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = 7050006;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = 7050007;\nvar SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = 7050008;\nvar SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = 7050009;\nvar SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = 7050010;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = 7050011;\nvar SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = 7050012;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = 7050013;\nvar SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = 7050014;\nvar SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = 7050015;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 7050016;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = 7050017;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = 7050018;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = 7050019;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = 7050020;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = 7050021;\nvar SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = 7050022;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = 7050023;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = 7050024;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = 7050025;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = 7050026;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = 7050027;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = 7050028;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = 7050029;\nvar SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = 7050030;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = 7050031;\nvar SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = 7050032;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = 7050033;\nvar SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = 7050034;\nvar SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED = 7050035;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = 7050036;\nvar SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = 8078e3;\nvar SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = 8078001;\nvar SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = 8078002;\nvar SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = 8078003;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = 8078004;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = 8078005;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = 8078006;\nvar SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = 8078007;\nvar SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = 8078008;\nvar SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT = 8078009;\nvar SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT = 8078010;\nvar SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = 8078011;\nvar SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = 8078012;\nvar SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = 8078013;\nvar SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = 8078014;\nvar SOLANA_ERROR__RPC__INTEGER_OVERFLOW = 81e5;\nvar SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = 8100001;\nvar SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = 8100002;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST = 819e4;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = 8190001;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED = 8190002;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED = 8190003;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT = 8190004;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING = 99e5;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE = 9900001;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING = 9900002;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = 9900003;\n\n// src/messages.ts\nvar SolanaErrorMessages = {\n  [SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND]: \"Account not found at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED]: \"Not all accounts were decoded. Encoded accounts found at addresses: $addresses.\",\n  [SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT]: \"Expected decoded account at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT]: \"Failed to decode account data at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND]: \"Accounts not found at addresses: $addresses\",\n  [SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED]: \"Unable to find a viable program address bump seed.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS]: \"$putativeAddress is not a base58-encoded address.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH]: \"Expected base58 encoded address to decode to a byte array of length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY]: \"The `CryptoKey` must be an `Ed25519` public key.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE]: \"Invalid seeds; point must fall off the Ed25519 curve.\",\n  [SOLANA_ERROR__ADDRESSES__MALFORMED_PDA]: \"Expected given program derived address to have the following format: [Address, ProgramDerivedAddressBump].\",\n  [SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED]: \"A maximum of $maxSeeds seeds, including the bump seed, may be supplied when creating an address. Received: $actual.\",\n  [SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED]: \"The seed at index $index with length $actual exceeds the maximum length of $maxSeedLength bytes.\",\n  [SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE]: \"Expected program derived address bump to be in the range [0, 255], got: $bump.\",\n  [SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER]: \"Program address cannot end with PDA marker.\",\n  [SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded address string of length in the range [32, 44]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded blockash string of length in the range [32, 44]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED]: \"The network has progressed past the last block for which this transaction could have been committed.\",\n  [SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY]: \"Codec [$codecDescription] cannot decode empty byte arrays.\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH]: \"Encoder and decoder must have the same fixed size, got [$encoderFixedSize] and [$decoderFixedSize].\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH]: \"Encoder and decoder must have the same max size, got [$encoderMaxSize] and [$decoderMaxSize].\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH]: \"Encoder and decoder must either both be fixed-size or variable-size.\",\n  [SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE]: \"Enum discriminator out of range. Expected a number between $minRange and $maxRange, got $discriminator.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH]: \"Expected a fixed-size codec, got a variable-size one.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH]: \"Codec [$codecDescription] expected a positive byte length, got $bytesLength.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH]: \"Expected a variable-size codec, got a fixed-size one.\",\n  [SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH]: \"Codec [$codecDescription] expected $expected bytes, got $bytesLength.\",\n  [SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT]: \"Invalid data enum variant. Expected one of [$variants], got $value.\",\n  [SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS]: \"Expected [$codecDescription] to have $expected items, got $actual.\",\n  [SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT]: \"Invalid scalar enum variant. Expected one of [$variants] or a number between $minRange and $maxRange, got $value.\",\n  [SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE]: \"Invalid value $value for base $base with alphabet $alphabet.\",\n  [SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE]: \"Codec [$codecDescription] expected number to be in the range [$min, $max], got $value.\",\n  [SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE]: \"Codec [$codecDescription] expected offset to be in the range [0, $bytesLength], got $offset.\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED]: \"instruction requires an uninitialized account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED]: \"instruction tries to borrow reference for an account which is already borrowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]: \"instruction left account with an outstanding borrowed reference\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED]: \"program other than the account's owner changed the size of the account data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL]: \"account data too small for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE]: \"instruction expected an executable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT]: \"An account does not have enough lamports to be rent-exempt\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW]: \"Program arithmetic overflowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR]: \"Failed to serialize or deserialize account data: $encodedData\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS]: \"Builtin programs must consume compute units\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH]: \"Cross-program invocation call depth too deep\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED]: \"Computational budget exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM]: \"custom program error: #$code\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX]: \"instruction contains duplicate accounts\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC]: \"instruction modifications of multiply-passed account differ\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT]: \"executable accounts must be rent exempt\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED]: \"instruction changed executable accounts data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE]: \"instruction changed the balance of an executable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED]: \"instruction changed executable bit of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED]: \"instruction modified data of an account it does not own\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND]: \"instruction spent from the balance of an account it does not own\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR]: \"generic instruction error\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER]: \"Provided owner is not allowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE]: \"Account is immutable\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY]: \"Incorrect authority provided\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID]: \"incorrect program id for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS]: \"insufficient funds for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA]: \"invalid account data for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER]: \"Invalid account owner\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT]: \"invalid program argument\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR]: \"program returned invalid error code\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA]: \"invalid instruction data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC]: \"Failed to reallocate account data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS]: \"Provided seeds do not result in a valid address\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED]: \"Accounts data allocations exceeded the maximum allowed per transaction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED]: \"Max accounts exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED]: \"Max instruction trace length exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED]: \"Length of the seed is too long for address generation\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT]: \"An account required by the instruction is missing\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE]: \"missing required signature for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID]: \"instruction illegally modified the program id of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS]: \"insufficient account keys for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION]: \"Cross-program invocation with unauthorized signer or writable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE]: \"Failed to create program execution environment\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE]: \"Program failed to compile\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE]: \"Program failed to complete\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED]: \"instruction modified data of a read-only account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE]: \"instruction changed the balance of a read-only account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED]: \"Cross-program invocation reentrancy not allowed for this instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED]: \"instruction modified rent epoch of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION]: \"sum of account balances before and after instruction do not match\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT]: \"instruction requires an initialized account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN]: \"\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID]: \"Unsupported program id\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR]: \"Unsupported sysvar\",\n  [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS]: \"The instruction does not have any accounts.\",\n  [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA]: \"The instruction does not have any data.\",\n  [SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH]: \"Expected instruction to have progress address $expectedProgramAddress, got $actualProgramAddress.\",\n  [SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH]: \"Expected base58 encoded blockhash to decode to a byte array of length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__INVALID_NONCE]: \"The nonce `$expectedNonceValue` is no longer valid. It has advanced to `$actualNonceValue`\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING]: \"Invariant violation: Found no abortable iterable cache entry for key `$cacheKey`. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE]: \"Invariant violation: Switch statement non-exhaustive. Received unexpected value `$unexpectedValue`. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE]: \"Invariant violation: WebSocket message iterator state is corrupt; iterated without first resolving existing message promise. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING]: \"Invariant violation: WebSocket message iterator is missing state storage. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR]: \"JSON-RPC error: Internal JSON-RPC error ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__INVALID_PARAMS]: \"JSON-RPC error: Invalid method parameter(s) ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__INVALID_REQUEST]: \"JSON-RPC error: The JSON sent is not a valid `Request` object ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND]: \"JSON-RPC error: The method does not exist / is not available ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__PARSE_ERROR]: \"JSON-RPC error: An error occurred on the server while parsing the JSON text ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__SCAN_ERROR]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED]: \"Minimum context slot has not been reached\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY]: \"Node is unhealthy; behind by $numSlotsBehind slots\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT]: \"No snapshot\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE]: \"Transaction simulation failed\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE]: \"Transaction history is not available from this node\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH]: \"Transaction signature length mismatch\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE]: \"Transaction signature verification failure\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION]: \"$__serverMessage\",\n  [SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH]: \"Key pair bytes must be of length 64, got $byteLength.\",\n  [SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH]: \"Expected private key bytes with length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH]: \"Expected base58-encoded signature to decode to a byte array of length 64. Actual length: $actualLength.\",\n  [SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded signature string of length in the range [64, 88]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE]: \"Lamports value must be in the range [0, 2e64-1]\",\n  [SOLANA_ERROR__MALFORMED_BIGINT_STRING]: \"`$value` cannot be parsed as a `BigInt`\",\n  [SOLANA_ERROR__MALFORMED_NUMBER_STRING]: \"`$value` cannot be parsed as a `Number`\",\n  [SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND]: \"No nonce account could be found at address `$nonceAccountAddress`\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST]: \"Either the notification name must end in 'Notifications' or the API must supply a subscription creator function for the notification '$notificationName' to map between the notification name and the subscribe/unsubscribe method names.\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID]: \"Failed to obtain a subscription id from the server\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED]: \"WebSocket was closed before payload could be added to the send buffer\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED]: \"WebSocket connection closed\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT]: \"WebSocket failed to connect\",\n  [SOLANA_ERROR__RPC__INTEGER_OVERFLOW]: \"The $argumentLabel argument to the `$methodName` RPC method$optionalPathLabel was `$value`. This number is unsafe for use with the Solana JSON-RPC because it exceeds `Number.MAX_SAFE_INTEGER`.\",\n  [SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR]: \"HTTP error ($statusCode): $message\",\n  [SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN]: \"HTTP header(s) forbidden: $headers. Learn more at https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name.\",\n  [SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS]: \"Multiple distinct signers were identified for address `$address`. Please ensure that you are using the same signer instance for each address.\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER]: \"The provided value does not implement the `KeyPairSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER]: \"The provided value does not implement the `MessageModifyingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER]: \"The provided value does not implement the `MessagePartialSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER]: \"The provided value does not implement any of the `MessageSigner` interfaces\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER]: \"The provided value does not implement the `TransactionModifyingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER]: \"The provided value does not implement the `TransactionPartialSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER]: \"The provided value does not implement the `TransactionSendingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER]: \"The provided value does not implement any of the `TransactionSigner` interfaces\",\n  [SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS]: \"More than one `TransactionSendingSigner` was identified.\",\n  [SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING]: \"No `TransactionSendingSigner` was identified. Please provide a valid `ITransactionWithSingleSendingSigner` transaction.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED]: \"No digest implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT]: \"Cryptographic operations are only allowed in secure browser contexts. Read more here: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED]: \"This runtime does not support the generation of Ed25519 key pairs.\\n\\nInstall and import `@solana/webcrypto-ed25519-polyfill` before generating keys in environments that do not support Ed25519.\\n\\nFor a list of runtimes that currently support Ed25519 operations, visit https://github.com/WICG/webcrypto-secure-curves/issues/20.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED]: \"No signature verification implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED]: \"No key generation implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED]: \"No signing implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED]: \"No key export implementation could be found.\",\n  [SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE]: \"Timestamp value must be in the range [-8.64e15, 8.64e15]. `$value` given\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]: \"Transaction processing left an account with an outstanding borrowed reference\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE]: \"Account in use\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE]: \"Account loaded twice\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND]: \"Attempt to debit an account but found no record of a prior credit.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND]: \"Transaction loads an address table account that doesn't exist\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED]: \"This transaction has already been processed\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND]: \"Blockhash not found\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP]: \"Loader call chain is too deep\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE]: \"Transactions are currently disabled due to cluster maintenance\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION]: \"Transaction contains a duplicate instruction ($index) that is not allowed\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE]: \"Insufficient funds for fee\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT]: \"Transaction results in an account ($accountIndex) with insufficient funds for rent\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE]: \"This account may not be used to pay transaction fees\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX]: \"Transaction contains an invalid account reference\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA]: \"Transaction loads an address table account with invalid data\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX]: \"Transaction address table lookup uses an invalid index\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER]: \"Transaction loads an address table account with an invalid owner\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT]: \"LoadedAccountsDataSizeLimit set for transaction must be greater than 0.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION]: \"This program may not be used for executing instructions\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT]: \"Transaction leaves an account with a lower balance than rent-exempt minimum\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT]: \"Transaction loads a writable account that cannot be written\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED]: \"Transaction exceeded max loaded accounts data size cap\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE]: \"Transaction requires a fee but has no signature present\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND]: \"Attempt to load a program that does not exist\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED]: \"Execution of the program referenced by account at index $accountIndex is temporarily restricted.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED]: \"ResanitizationNeeded\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE]: \"Transaction failed to sanitize accounts offsets correctly\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE]: \"Transaction did not pass signature verification\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS]: \"Transaction locked too many accounts\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION]: \"Sum of account balances before and after transaction do not match\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN]: \"The transaction failed with the error `$errorName`\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION]: \"Transaction version is unsupported\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT]: \"Transaction would exceed account data limit within the block\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT]: \"Transaction would exceed total account data limit\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT]: \"Transaction would exceed max account limit within the block\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT]: \"Transaction would exceed max Block Cost Limit\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT]: \"Transaction would exceed max Vote Cost Limit\",\n  [SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING]: \"Transaction is missing an address at index: $index.\",\n  [SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME]: \"Transaction does not have a blockhash lifetime\",\n  [SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME]: \"Transaction is not a durable nonce transaction\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING]: \"Contents of these address lookup tables unknown: $lookupTableAddresses\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE]: \"Lookup of address at index $highestRequestedIndex failed for lookup table `$lookupTableAddress`. Highest known index is $highestKnownIndex. The lookup table may have been extended since its contents were retrieved\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING]: \"No fee payer set in CompiledTransaction\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND]: \"Could not find program address at index $index\",\n  [SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING]: \"Transaction is missing a fee payer.\",\n  [SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING]: \"Could not determine this transaction's signature. Make sure that the transaction has been signed by its fee payer.\",\n  [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE]: \"Transaction first instruction is not advance nonce account instruction.\",\n  [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING]: \"Transaction with no instructions cannot be durable nonce transaction.\",\n  [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES]: \"This transaction includes an address (`$programAddress`) which is both invoked and set as the fee payer. Program addresses may not pay fees\",\n  [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE]: \"This transaction includes an address (`$programAddress`) which is both invoked and marked writable. Program addresses may not be writable\",\n  [SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING]: \"Transaction is missing signatures for addresses: $addresses.\",\n  [SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE]: \"Transaction version must be in the range [0, 127]. `$actualVersion` given\"\n};\n\n// src/message-formatter.ts\nfunction encodeValue(value) {\n  if (Array.isArray(value)) {\n    return (\n      /* \"[\" */\n      \"%5B\" + value.map(\n        (element) => typeof element === \"string\" ? encodeURIComponent(`\"${element.replace(/\"/g, '\\\\\"')}\"`) : encodeValue(element)\n      ).join(\n        /* \", \" */\n        \"%2C%20\"\n      ) + /* \"]\" */\n      \"%5D\"\n    );\n  } else if (typeof value === \"bigint\") {\n    return `${value}n`;\n  } else {\n    return encodeURIComponent(\n      String(\n        value != null && Object.getPrototypeOf(value) === null ? (\n          // Plain objects with no protoype don't have a `toString` method.\n          // Convert them before stringifying them.\n          { ...value }\n        ) : value\n      )\n    );\n  }\n}\nfunction encodeObjectContextEntry([key, value]) {\n  return `${key}=${encodeValue(value)}`;\n}\nfunction encodeContextObject(context) {\n  return Object.entries(context).map(encodeObjectContextEntry).join(\"&\");\n}\nfunction getHumanReadableErrorMessage(code, context = {}) {\n  const messageFormatString = SolanaErrorMessages[code];\n  const message = messageFormatString.replace(\n    /(?<!\\\\)\\$(\\w+)/g,\n    (substring, variableName) => variableName in context ? `${context[variableName]}` : substring\n  );\n  return message;\n}\nfunction getErrorMessage(code, context = {}) {\n  if (__DEV__) {\n    return getHumanReadableErrorMessage(code, context);\n  } else {\n    let decodingAdviceMessage = `Solana error #${code}; Decode this error by running \\`npx @solana/errors decode ${code}`;\n    if (Object.keys(context).length) {\n      decodingAdviceMessage += ` $\"${encodeContextObject(context)}\"`;\n    }\n    return `${decodingAdviceMessage}\\``;\n  }\n}\n\n// src/error.ts\nfunction isSolanaError(e, code) {\n  const isSolanaError2 = e instanceof Error && e.name === \"SolanaError\";\n  if (isSolanaError2) {\n    if (code !== void 0) {\n      return e.context.__code === code;\n    }\n    return true;\n  }\n  return false;\n}\nvar SolanaError = class extends Error {\n  context;\n  constructor(...[code, contextAndErrorOptions]) {\n    let context;\n    let errorOptions;\n    if (contextAndErrorOptions) {\n      const { cause, ...contextRest } = contextAndErrorOptions;\n      if (cause) {\n        errorOptions = { cause };\n      }\n      if (Object.keys(contextRest).length > 0) {\n        context = contextRest;\n      }\n    }\n    const message = getErrorMessage(code, context);\n    super(message, errorOptions);\n    this.context = {\n      __code: code,\n      ...context\n    };\n    this.name = \"SolanaError\";\n  }\n};\n\n// src/stack-trace.ts\nfunction safeCaptureStackTrace(...args) {\n  if (\"captureStackTrace\" in Error && typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(...args);\n  }\n}\n\n// src/rpc-enum-errors.ts\nfunction getSolanaErrorFromRpcError({ errorCodeBaseOffset, getErrorContext, orderedErrorNames, rpcEnumError }, constructorOpt) {\n  let rpcErrorName;\n  let rpcErrorContext;\n  if (typeof rpcEnumError === \"string\") {\n    rpcErrorName = rpcEnumError;\n  } else {\n    rpcErrorName = Object.keys(rpcEnumError)[0];\n    rpcErrorContext = rpcEnumError[rpcErrorName];\n  }\n  const codeOffset = orderedErrorNames.indexOf(rpcErrorName);\n  const errorCode = errorCodeBaseOffset + codeOffset;\n  const errorContext = getErrorContext(errorCode, rpcErrorName, rpcErrorContext);\n  const err = new SolanaError(errorCode, errorContext);\n  safeCaptureStackTrace(err, constructorOpt);\n  return err;\n}\n\n// src/instruction-error.ts\nvar ORDERED_ERROR_NAMES = [\n  // Keep synced with RPC source: https://github.com/anza-xyz/agave/blob/master/sdk/program/src/instruction.rs\n  // If this list ever gets too large, consider implementing a compression strategy like this:\n  // https://gist.github.com/steveluscher/aaa7cbbb5433b1197983908a40860c47\n  \"GenericError\",\n  \"InvalidArgument\",\n  \"InvalidInstructionData\",\n  \"InvalidAccountData\",\n  \"AccountDataTooSmall\",\n  \"InsufficientFunds\",\n  \"IncorrectProgramId\",\n  \"MissingRequiredSignature\",\n  \"AccountAlreadyInitialized\",\n  \"UninitializedAccount\",\n  \"UnbalancedInstruction\",\n  \"ModifiedProgramId\",\n  \"ExternalAccountLamportSpend\",\n  \"ExternalAccountDataModified\",\n  \"ReadonlyLamportChange\",\n  \"ReadonlyDataModified\",\n  \"DuplicateAccountIndex\",\n  \"ExecutableModified\",\n  \"RentEpochModified\",\n  \"NotEnoughAccountKeys\",\n  \"AccountDataSizeChanged\",\n  \"AccountNotExecutable\",\n  \"AccountBorrowFailed\",\n  \"AccountBorrowOutstanding\",\n  \"DuplicateAccountOutOfSync\",\n  \"Custom\",\n  \"InvalidError\",\n  \"ExecutableDataModified\",\n  \"ExecutableLamportChange\",\n  \"ExecutableAccountNotRentExempt\",\n  \"UnsupportedProgramId\",\n  \"CallDepth\",\n  \"MissingAccount\",\n  \"ReentrancyNotAllowed\",\n  \"MaxSeedLengthExceeded\",\n  \"InvalidSeeds\",\n  \"InvalidRealloc\",\n  \"ComputationalBudgetExceeded\",\n  \"PrivilegeEscalation\",\n  \"ProgramEnvironmentSetupFailure\",\n  \"ProgramFailedToComplete\",\n  \"ProgramFailedToCompile\",\n  \"Immutable\",\n  \"IncorrectAuthority\",\n  \"BorshIoError\",\n  \"AccountNotRentExempt\",\n  \"InvalidAccountOwner\",\n  \"ArithmeticOverflow\",\n  \"UnsupportedSysvar\",\n  \"IllegalOwner\",\n  \"MaxAccountsDataAllocationsExceeded\",\n  \"MaxAccountsExceeded\",\n  \"MaxInstructionTraceLengthExceeded\",\n  \"BuiltinProgramsMustConsumeComputeUnits\"\n];\nfunction getSolanaErrorFromInstructionError(index, instructionError) {\n  return getSolanaErrorFromRpcError(\n    {\n      errorCodeBaseOffset: 4615001,\n      getErrorContext(errorCode, rpcErrorName, rpcErrorContext) {\n        if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN) {\n          return {\n            errorName: rpcErrorName,\n            index,\n            ...rpcErrorContext !== void 0 ? { instructionErrorContext: rpcErrorContext } : null\n          };\n        } else if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM) {\n          return {\n            code: rpcErrorContext,\n            index\n          };\n        } else if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR) {\n          return {\n            encodedData: rpcErrorContext,\n            index\n          };\n        }\n        return { index };\n      },\n      orderedErrorNames: ORDERED_ERROR_NAMES,\n      rpcEnumError: instructionError\n    },\n    getSolanaErrorFromInstructionError\n  );\n}\n\n// src/transaction-error.ts\nvar ORDERED_ERROR_NAMES2 = [\n  // Keep synced with RPC source: https://github.com/anza-xyz/agave/blob/master/sdk/src/transaction/error.rs\n  // If this list ever gets too large, consider implementing a compression strategy like this:\n  // https://gist.github.com/steveluscher/aaa7cbbb5433b1197983908a40860c47\n  \"AccountInUse\",\n  \"AccountLoadedTwice\",\n  \"AccountNotFound\",\n  \"ProgramAccountNotFound\",\n  \"InsufficientFundsForFee\",\n  \"InvalidAccountForFee\",\n  \"AlreadyProcessed\",\n  \"BlockhashNotFound\",\n  // `InstructionError` intentionally omitted; delegated to `getSolanaErrorFromInstructionError`\n  \"CallChainTooDeep\",\n  \"MissingSignatureForFee\",\n  \"InvalidAccountIndex\",\n  \"SignatureFailure\",\n  \"InvalidProgramForExecution\",\n  \"SanitizeFailure\",\n  \"ClusterMaintenance\",\n  \"AccountBorrowOutstanding\",\n  \"WouldExceedMaxBlockCostLimit\",\n  \"UnsupportedVersion\",\n  \"InvalidWritableAccount\",\n  \"WouldExceedMaxAccountCostLimit\",\n  \"WouldExceedAccountDataBlockLimit\",\n  \"TooManyAccountLocks\",\n  \"AddressLookupTableNotFound\",\n  \"InvalidAddressLookupTableOwner\",\n  \"InvalidAddressLookupTableData\",\n  \"InvalidAddressLookupTableIndex\",\n  \"InvalidRentPayingAccount\",\n  \"WouldExceedMaxVoteCostLimit\",\n  \"WouldExceedAccountDataTotalLimit\",\n  \"DuplicateInstruction\",\n  \"InsufficientFundsForRent\",\n  \"MaxLoadedAccountsDataSizeExceeded\",\n  \"InvalidLoadedAccountsDataSizeLimit\",\n  \"ResanitizationNeeded\",\n  \"ProgramExecutionTemporarilyRestricted\",\n  \"UnbalancedTransaction\"\n];\nfunction getSolanaErrorFromTransactionError(transactionError) {\n  if (typeof transactionError === \"object\" && \"InstructionError\" in transactionError) {\n    return getSolanaErrorFromInstructionError(\n      ...transactionError.InstructionError\n    );\n  }\n  return getSolanaErrorFromRpcError(\n    {\n      errorCodeBaseOffset: 7050001,\n      getErrorContext(errorCode, rpcErrorName, rpcErrorContext) {\n        if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN) {\n          return {\n            errorName: rpcErrorName,\n            ...rpcErrorContext !== void 0 ? { transactionErrorContext: rpcErrorContext } : null\n          };\n        } else if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION) {\n          return {\n            index: rpcErrorContext\n          };\n        } else if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT || errorCode === SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED) {\n          return {\n            accountIndex: rpcErrorContext.account_index\n          };\n        }\n      },\n      orderedErrorNames: ORDERED_ERROR_NAMES2,\n      rpcEnumError: transactionError\n    },\n    getSolanaErrorFromTransactionError\n  );\n}\n\n// src/json-rpc-error.ts\nfunction getSolanaErrorFromJsonRpcError({ code, data, message }) {\n  let out;\n  if (code === SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE) {\n    const { err, ...preflightErrorContext } = data;\n    const causeObject = err ? { cause: getSolanaErrorFromTransactionError(err) } : null;\n    out = new SolanaError(SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE, {\n      ...preflightErrorContext,\n      ...causeObject\n    });\n  } else {\n    let errorContext;\n    switch (code) {\n      case SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR:\n      case SOLANA_ERROR__JSON_RPC__INVALID_PARAMS:\n      case SOLANA_ERROR__JSON_RPC__INVALID_REQUEST:\n      case SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND:\n      case SOLANA_ERROR__JSON_RPC__PARSE_ERROR:\n      case SOLANA_ERROR__JSON_RPC__SCAN_ERROR:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION:\n        errorContext = { __serverMessage: message };\n        break;\n      default:\n        if (typeof data === \"object\" && !Array.isArray(data)) {\n          errorContext = data;\n        }\n    }\n    out = new SolanaError(code, errorContext);\n  }\n  safeCaptureStackTrace(out, getSolanaErrorFromJsonRpcError);\n  return out;\n}\n\nexports.SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED;\nexports.SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT;\nexports.SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT;\nexports.SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND;\nexports.SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY;\nexports.SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE;\nexports.SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = SOLANA_ERROR__ADDRESSES__MALFORMED_PDA;\nexports.SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED;\nexports.SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED;\nexports.SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE;\nexports.SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER;\nexports.SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE;\nexports.SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE;\nexports.SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED;\nexports.SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY;\nexports.SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH;\nexports.SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH;\nexports.SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH;\nexports.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE;\nexports.SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH;\nexports.SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH;\nexports.SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH;\nexports.SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH;\nexports.SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT = SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT;\nexports.SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS;\nexports.SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT = SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT;\nexports.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE;\nexports.SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE;\nexports.SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS = SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID;\nexports.SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR;\nexports.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS;\nexports.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA;\nexports.SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH;\nexports.SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH;\nexports.SOLANA_ERROR__INVALID_NONCE = SOLANA_ERROR__INVALID_NONCE;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING = SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE = SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE;\nexports.SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING = SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING;\nexports.SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR;\nexports.SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = SOLANA_ERROR__JSON_RPC__INVALID_PARAMS;\nexports.SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = SOLANA_ERROR__JSON_RPC__INVALID_REQUEST;\nexports.SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND;\nexports.SOLANA_ERROR__JSON_RPC__PARSE_ERROR = SOLANA_ERROR__JSON_RPC__PARSE_ERROR;\nexports.SOLANA_ERROR__JSON_RPC__SCAN_ERROR = SOLANA_ERROR__JSON_RPC__SCAN_ERROR;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE;\nexports.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION;\nexports.SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH;\nexports.SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH;\nexports.SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH;\nexports.SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE;\nexports.SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE;\nexports.SOLANA_ERROR__MALFORMED_BIGINT_STRING = SOLANA_ERROR__MALFORMED_BIGINT_STRING;\nexports.SOLANA_ERROR__MALFORMED_NUMBER_STRING = SOLANA_ERROR__MALFORMED_NUMBER_STRING;\nexports.SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST = SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED = SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED = SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED;\nexports.SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT = SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT;\nexports.SOLANA_ERROR__RPC__INTEGER_OVERFLOW = SOLANA_ERROR__RPC__INTEGER_OVERFLOW;\nexports.SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR;\nexports.SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN;\nexports.SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER;\nexports.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER;\nexports.SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS;\nexports.SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED;\nexports.SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED = SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT;\nexports.SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME;\nexports.SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND = SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND;\nexports.SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE = SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE;\nexports.SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING = SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES;\nexports.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE;\nexports.SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING;\nexports.SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE;\nexports.SolanaError = SolanaError;\nexports.getSolanaErrorFromInstructionError = getSolanaErrorFromInstructionError;\nexports.getSolanaErrorFromJsonRpcError = getSolanaErrorFromJsonRpcError;\nexports.getSolanaErrorFromTransactionError = getSolanaErrorFromTransactionError;\nexports.isSolanaError = isSolanaError;\nexports.safeCaptureStackTrace = safeCaptureStackTrace;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.cjs.map","'use strict';\n\nvar codecsCore = require('@solana/codecs-core');\nvar codecsNumbers = require('@solana/codecs-numbers');\n\n// src/option.ts\nvar some = (value) => ({ __option: \"Some\", value });\nvar none = () => ({ __option: \"None\" });\nvar isOption = (input) => !!(input && typeof input === \"object\" && \"__option\" in input && (input.__option === \"Some\" && \"value\" in input || input.__option === \"None\"));\nvar isSome = (option) => option.__option === \"Some\";\nvar isNone = (option) => option.__option === \"None\";\n\n// src/unwrap-option.ts\nfunction unwrapOption(option, fallback) {\n  if (isSome(option))\n    return option.value;\n  return fallback ? fallback() : null;\n}\nvar wrapNullable = (nullable) => nullable !== null ? some(nullable) : none();\n\n// src/option-codec.ts\nfunction getOptionEncoder(item, config = {}) {\n  const prefix = config.prefix ?? codecsNumbers.getU8Encoder();\n  const fixed = config.fixed ?? false;\n  const isZeroSizeItem = codecsCore.isFixedSize(item) && codecsCore.isFixedSize(prefix) && item.fixedSize === 0;\n  if (fixed || isZeroSizeItem) {\n    codecsCore.assertIsFixedSize(item);\n    codecsCore.assertIsFixedSize(prefix);\n    const fixedSize = prefix.fixedSize + item.fixedSize;\n    return codecsCore.createEncoder({\n      fixedSize,\n      write: (optionOrNullable, bytes, offset) => {\n        const option = isOption(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);\n        const prefixOffset = prefix.write(Number(isSome(option)), bytes, offset);\n        if (isSome(option)) {\n          item.write(option.value, bytes, prefixOffset);\n        }\n        return offset + fixedSize;\n      }\n    });\n  }\n  return codecsCore.createEncoder({\n    getSizeFromValue: (optionOrNullable) => {\n      const option = isOption(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);\n      return codecsCore.getEncodedSize(Number(isSome(option)), prefix) + (isSome(option) ? codecsCore.getEncodedSize(option.value, item) : 0);\n    },\n    maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? void 0,\n    write: (optionOrNullable, bytes, offset) => {\n      const option = isOption(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);\n      offset = prefix.write(Number(isSome(option)), bytes, offset);\n      if (isSome(option)) {\n        offset = item.write(option.value, bytes, offset);\n      }\n      return offset;\n    }\n  });\n}\nfunction getOptionDecoder(item, config = {}) {\n  const prefix = config.prefix ?? codecsNumbers.getU8Decoder();\n  const fixed = config.fixed ?? false;\n  let fixedSize = null;\n  const isZeroSizeItem = codecsCore.isFixedSize(item) && codecsCore.isFixedSize(prefix) && item.fixedSize === 0;\n  if (fixed || isZeroSizeItem) {\n    codecsCore.assertIsFixedSize(item);\n    codecsCore.assertIsFixedSize(prefix);\n    fixedSize = prefix.fixedSize + item.fixedSize;\n  }\n  return codecsCore.createDecoder({\n    ...fixedSize === null ? { maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? void 0 } : { fixedSize },\n    read: (bytes, offset) => {\n      if (bytes.length - offset <= 0) {\n        return [none(), offset];\n      }\n      const [isSome2, prefixOffset] = prefix.read(bytes, offset);\n      if (isSome2 === 0) {\n        return [none(), fixedSize !== null ? offset + fixedSize : prefixOffset];\n      }\n      const [value, newOffset] = item.read(bytes, prefixOffset);\n      return [some(value), fixedSize !== null ? offset + fixedSize : newOffset];\n    }\n  });\n}\nfunction getOptionCodec(item, config = {}) {\n  return codecsCore.combineCodec(getOptionEncoder(item, config), getOptionDecoder(item, config));\n}\nfunction sumCodecSizes(sizes) {\n  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);\n}\nfunction getMaxSize(codec) {\n  return codecsCore.isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;\n}\n\n// src/unwrap-option-recursively.ts\nfunction unwrapOptionRecursively(input, fallback) {\n  if (!input || ArrayBuffer.isView(input)) {\n    return input;\n  }\n  const next = (x) => fallback ? unwrapOptionRecursively(x, fallback) : unwrapOptionRecursively(x);\n  if (isOption(input)) {\n    if (isSome(input))\n      return next(input.value);\n    return fallback ? fallback() : null;\n  }\n  if (Array.isArray(input)) {\n    return input.map(next);\n  }\n  if (typeof input === \"object\") {\n    return Object.fromEntries(Object.entries(input).map(([k, v]) => [k, next(v)]));\n  }\n  return input;\n}\n\nexports.getOptionCodec = getOptionCodec;\nexports.getOptionDecoder = getOptionDecoder;\nexports.getOptionEncoder = getOptionEncoder;\nexports.isNone = isNone;\nexports.isOption = isOption;\nexports.isSome = isSome;\nexports.none = none;\nexports.some = some;\nexports.unwrapOption = unwrapOption;\nexports.unwrapOptionRecursively = unwrapOptionRecursively;\nexports.wrapNullable = wrapNullable;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TlvInvalidAccountDataError = exports.TlvError = void 0;\n/** Base class for errors */\nclass TlvError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nexports.TlvError = TlvError;\n/** Thrown if the byte length of an tlv buffer doesn't match the expected size */\nclass TlvInvalidAccountDataError extends TlvError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TlvInvalidAccountDataError';\n    }\n}\nexports.TlvInvalidAccountDataError = TlvInvalidAccountDataError;\n//# sourceMappingURL=errors.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./splDiscriminate.js\"), exports);\n__exportStar(require(\"./tlvState.js\"), exports);\n__exportStar(require(\"./errors.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.splDiscriminate = void 0;\nconst crypto_1 = require(\"crypto\");\nconst splDiscriminate = (discriminator, length = 8) => {\n    const digest = (0, crypto_1.createHash)('sha256').update(discriminator).digest();\n    return digest.subarray(0, length);\n};\nexports.splDiscriminate = splDiscriminate;\n//# sourceMappingURL=splDiscriminate.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TlvState = void 0;\nconst errors_js_1 = require(\"./errors.js\");\nclass TlvState {\n    constructor(buffer, discriminatorSize = 2, lengthSize = 2, offset = 0) {\n        this.tlvData = buffer.subarray(offset);\n        this.discriminatorSize = discriminatorSize;\n        this.lengthSize = lengthSize;\n    }\n    /**\n     * Get the raw tlv data\n     *\n     * @return the raw tlv data\n     */\n    get data() {\n        return this.tlvData;\n    }\n    readEntryLength(size, offset, constructor) {\n        switch (size) {\n            case 1:\n                return constructor(this.tlvData.readUInt8(offset));\n            case 2:\n                return constructor(this.tlvData.readUInt16LE(offset));\n            case 4:\n                return constructor(this.tlvData.readUInt32LE(offset));\n            case 8:\n                return constructor(this.tlvData.readBigUInt64LE(offset));\n        }\n    }\n    /**\n     * Get a single entry from the tlv data. This function returns the first entry with the given type.\n     *\n     * @param type the type of the entry to get\n     *\n     * @return the entry from the tlv data or null\n     */\n    firstBytes(discriminator) {\n        const entries = this.bytesRepeating(discriminator, 1);\n        return entries.length > 0 ? entries[0] : null;\n    }\n    /**\n     * Get a multiple entries from the tlv data. This function returns `count` or less entries with the given type.\n     *\n     * @param type the type of the entry to get\n     * @param count the number of entries to get (0 for all entries)\n     *\n     * @return the entry from the tlv data or null\n     */\n    bytesRepeating(discriminator, count = 0) {\n        const entries = [];\n        let offset = 0;\n        while (offset < this.tlvData.length) {\n            if (offset + this.discriminatorSize + this.lengthSize > this.tlvData.length) {\n                throw new errors_js_1.TlvInvalidAccountDataError();\n            }\n            const type = this.tlvData.subarray(offset, offset + this.discriminatorSize);\n            offset += this.discriminatorSize;\n            const entryLength = this.readEntryLength(this.lengthSize, offset, Number);\n            offset += this.lengthSize;\n            if (offset + entryLength > this.tlvData.length) {\n                throw new errors_js_1.TlvInvalidAccountDataError();\n            }\n            if (type.equals(discriminator)) {\n                entries.push(this.tlvData.subarray(offset, offset + entryLength));\n            }\n            if (count > 0 && entries.length >= count) {\n                break;\n            }\n            offset += entryLength;\n        }\n        return entries;\n    }\n    /**\n     * Get all the discriminators from the tlv data. This function will return a type multiple times if it occurs multiple times in the tlv data.\n     *\n     * @return a list of the discriminators.\n     */\n    discriminators() {\n        const discriminators = [];\n        let offset = 0;\n        while (offset < this.tlvData.length) {\n            if (offset + this.discriminatorSize + this.lengthSize > this.tlvData.length) {\n                throw new errors_js_1.TlvInvalidAccountDataError();\n            }\n            const type = this.tlvData.subarray(offset, offset + this.discriminatorSize);\n            discriminators.push(type);\n            offset += this.discriminatorSize;\n            const entryLength = this.readEntryLength(this.lengthSize, offset, Number);\n            offset += this.lengthSize;\n            if (offset + entryLength > this.tlvData.length) {\n                throw new errors_js_1.TlvInvalidAccountDataError();\n            }\n            offset += entryLength;\n        }\n        return discriminators;\n    }\n}\nexports.TlvState = TlvState;\n//# sourceMappingURL=tlvState.js.map","import { PublicKey } from '@solana/web3.js';\n/** Address of the SPL Token program */\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');\n/** Check that the token program provided is not `Tokenkeg...`, useful when using extensions */\nexport function programSupportsExtensions(programId) {\n    if (programId.equals(TOKEN_PROGRAM_ID)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n//# sourceMappingURL=constants.js.map","/** Base class for errors */\nexport class TokenError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenAccountNotFoundError';\n    }\n}\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountError';\n    }\n}\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountDataError';\n    }\n}\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountOwnerError';\n    }\n}\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountSizeError';\n    }\n}\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidMintError';\n    }\n}\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidOwnerError';\n    }\n}\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenOwnerOffCurveError';\n    }\n}\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionProgramError';\n    }\n}\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionKeysError';\n    }\n}\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionDataError';\n    }\n}\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionTypeError';\n    }\n}\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenUnsupportedInstructionError';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountNotFound';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookInvalidSeed';\n    }\n}\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountDataNotFound';\n    }\n}\n//# sourceMappingURL=errors.js.map","import { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);\n}\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.from([1]), programId, associatedTokenProgramId);\n}\nfunction buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, instructionData, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(nestedAssociatedToken, nestedMint, destinationAssociatedToken, ownerAssociatedToken, ownerMint, owner, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: nestedMint, isSigner: false, isWritable: false },\n        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerMint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: true },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.from([2]),\n    });\n}\n//# sourceMappingURL=associatedTokenAccount.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const amountToUiAmountInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n]);\n/**\n * Construct a AmountToUiAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       Amount of tokens to be converted to UiAmount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAmountToUiAmountInstruction(mint, amount, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n    const data = Buffer.alloc(amountToUiAmountInstructionData.span);\n    amountToUiAmountInstructionData.encode({\n        instruction: TokenInstruction.AmountToUiAmount,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a AmountToUiAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeAmountToUiAmountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== amountToUiAmountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeAmountToUiAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.AmountToUiAmount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode a AmountToUiAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeAmountToUiAmountInstructionUnchecked({ programId, keys: [mint], data, }) {\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: amountToUiAmountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=amountToUiAmount.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const approveInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveInstruction(account, delegate, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: delegate, isSigner: false, isWritable: false },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(approveInstructionData.span);\n    approveInstructionData.encode({\n        instruction: TokenInstruction.Approve,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, delegate, owner, multiSigners }, data, } = decodeApproveInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Approve)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !delegate || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveInstructionUnchecked({ programId, keys: [account, delegate, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=approve.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const approveCheckedInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n/**\n * Construct an ApproveChecked instruction\n *\n * @param account      Account to set the delegate for\n * @param mint         Mint account\n * @param delegate     Account authorized to transfer of tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param decimals     Number of decimals in approve amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveCheckedInstruction(account, mint, delegate, owner, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: delegate, isSigner: false, isWritable: false },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(approveCheckedInstructionData.span);\n    approveCheckedInstructionData.encode({\n        instruction: TokenInstruction.ApproveChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an ApproveChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveCheckedInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, delegate, owner, multiSigners }, data, } = decodeApproveCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ApproveChecked)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !delegate || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode an ApproveChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveCheckedInstructionUnchecked({ programId, keys: [account, mint, delegate, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveCheckedInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=approveChecked.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const burnInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Burn instruction\n *\n * @param account      Account to burn tokens from\n * @param mint         Mint for the account\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnInstruction(account, mint, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(burnInstructionData.span);\n    burnInstructionData.encode({\n        instruction: TokenInstruction.Burn,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a Burn instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, owner, multiSigners }, data, } = decodeBurnInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Burn)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a Burn instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnInstructionUnchecked({ programId, keys: [account, mint, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=burn.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const burnCheckedInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnCheckedInstruction(account, mint, owner, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(burnCheckedInstructionData.span);\n    burnCheckedInstructionData.encode({\n        instruction: TokenInstruction.BurnChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnCheckedInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, owner, multiSigners }, data, } = decodeBurnCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.BurnChecked)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnCheckedInstructionUnchecked({ programId, keys: [account, mint, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnCheckedInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=burnChecked.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const closeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCloseAccountInstruction(account, destination, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(closeAccountInstructionData.span);\n    closeAccountInstructionData.encode({ instruction: TokenInstruction.CloseAccount }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeCloseAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== closeAccountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, destination, authority, multiSigners }, data, } = decodeCloseAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.CloseAccount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !destination || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeCloseAccountInstructionUnchecked({ programId, keys: [account, destination, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: closeAccountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=closeAccount.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const freezeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a FreezeAccount instruction\n *\n * @param account      Account to freeze\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createFreezeAccountInstruction(account, mint, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(freezeAccountInstructionData.span);\n    freezeAccountInstructionData.encode({ instruction: TokenInstruction.FreezeAccount }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a FreezeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeFreezeAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== freezeAccountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, authority, multiSigners }, data, } = decodeFreezeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.FreezeAccount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a FreezeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeFreezeAccountInstructionUnchecked({ programId, keys: [account, mint, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: freezeAccountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=freezeAccount.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccountInstruction(account, mint, owner, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeAccountInstructionData.span);\n    initializeAccountInstructionData.encode({ instruction: TokenInstruction.InitializeAccount }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, owner, rent }, data, } = decodeInitializeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner || !rent)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccountInstructionUnchecked({ programId, keys: [account, mint, owner, rent], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data: initializeAccountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=initializeAccount.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\nexport const initializeAccount2InstructionData = struct([\n    u8('instruction'),\n    publicKey('owner'),\n]);\n/**\n * Construct an InitializeAccount2 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccount2Instruction(account, mint, owner, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeAccount2InstructionData.span);\n    initializeAccount2InstructionData.encode({ instruction: TokenInstruction.InitializeAccount2, owner }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeAccount2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccount2Instruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccount2InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, rent }, data, } = decodeInitializeAccount2InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount2)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !rent)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeAccount2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccount2InstructionUnchecked({ programId, keys: [account, mint, rent], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            rent,\n        },\n        data: initializeAccount2InstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=initializeAccount2.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\nexport const initializeAccount3InstructionData = struct([\n    u8('instruction'),\n    publicKey('owner'),\n]);\n/**\n * Construct an InitializeAccount3 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccount3Instruction(account, mint, owner, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeAccount3InstructionData.span);\n    initializeAccount3InstructionData.encode({ instruction: TokenInstruction.InitializeAccount3, owner }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeAccount3 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccount3Instruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccount3InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint }, data, } = decodeInitializeAccount3InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount3)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeAccount3 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccount3InstructionUnchecked({ programId, keys: [account, mint], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data: initializeAccount3InstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=initializeAccount3.js.map","import { Layout } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nexport class COptionPublicKeyLayout extends Layout {\n    constructor(property) {\n        super(-1, property);\n        this.publicKeyLayout = publicKey();\n    }\n    decode(buffer, offset = 0) {\n        const option = buffer[offset];\n        if (option === 0) {\n            return null;\n        }\n        return this.publicKeyLayout.decode(buffer, offset + 1);\n    }\n    encode(src, buffer, offset = 0) {\n        if (src === null) {\n            buffer[offset] = 0;\n            return 1;\n        }\n        else {\n            buffer[offset] = 1;\n            this.publicKeyLayout.encode(src, buffer, offset + 1);\n            return 33;\n        }\n    }\n    getSpan(buffer, offset = 0) {\n        if (buffer) {\n            const option = buffer[offset];\n            return option === 0 ? 1 : 1 + this.publicKeyLayout.span;\n        }\n        return 1 + this.publicKeyLayout.span;\n    }\n}\n//# sourceMappingURL=serialization.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n/** TODO: docs */\nexport const initializeMintInstructionData = struct([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    new COptionPublicKeyLayout('freezeAuthority'),\n]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeMintInstructionData.span);\n    initializeMintInstructionData.encode({\n        instruction: TokenInstruction.InitializeMint,\n        decimals,\n        mintAuthority,\n        freezeAuthority,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, rent }, data, } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint || !rent)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked({ programId, keys: [mint, rent], data, }) {\n    const { instruction, decimals, mintAuthority, freezeAuthority } = initializeMintInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority,\n        },\n    };\n}\n//# sourceMappingURL=initializeMint.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n/** TODO: docs */\nexport const initializeMint2InstructionData = struct([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    new COptionPublicKeyLayout('freezeAuthority'),\n]);\n/**\n * Construct an InitializeMint2 instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMint2Instruction(mint, decimals, mintAuthority, freezeAuthority, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeMint2InstructionData.span);\n    initializeMint2InstructionData.encode({\n        instruction: TokenInstruction.InitializeMint2,\n        decimals,\n        mintAuthority,\n        freezeAuthority,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMint2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMint2Instruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMint2InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeInitializeMint2InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint2)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMint2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMint2InstructionUnchecked({ programId, keys: [mint], data, }) {\n    const { instruction, decimals, mintAuthority, freezeAuthority } = initializeMint2InstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority,\n        },\n    };\n}\n//# sourceMappingURL=initializeMint2.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct([\n    u8('instruction'),\n    u8('m'),\n]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(account, signers, m, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    for (const signer of signers) {\n        keys.push({\n            pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n            isSigner: false,\n            isWritable: false,\n        });\n    }\n    const data = Buffer.alloc(initializeMultisigInstructionData.span);\n    initializeMultisigInstructionData.encode({\n        instruction: TokenInstruction.InitializeMultisig,\n        m,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMultisigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, rent, signers }, data, } = decodeInitializeMultisigInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMultisig)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !rent || !signers.length)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked({ programId, keys: [account, rent, ...signers], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data: initializeMultisigInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=initializeMultisig.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const mintToInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToInstruction(mint, destination, authority, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(mintToInstructionData.span);\n    mintToInstructionData.encode({\n        instruction: TokenInstruction.MintTo,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, destination, authority, multiSigners }, data, } = decodeMintToInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintTo)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToInstructionUnchecked({ programId, keys: [mint, destination, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=mintTo.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const mintToCheckedInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n/**\n * Construct a MintToChecked instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param decimals     Number of decimals in amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToCheckedInstruction(mint, destination, authority, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(mintToCheckedInstructionData.span);\n    mintToCheckedInstructionData.encode({\n        instruction: TokenInstruction.MintToChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a MintToChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToCheckedInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, destination, authority, multiSigners }, data, } = decodeMintToCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintToChecked)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a MintToChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToCheckedInstructionUnchecked({ programId, keys: [mint, destination, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToCheckedInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=mintToChecked.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const revokeInstructionData = struct([u8('instruction')]);\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRevokeInstruction(account, owner, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], owner, multiSigners);\n    const data = Buffer.alloc(revokeInstructionData.span);\n    revokeInstructionData.encode({ instruction: TokenInstruction.Revoke }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeRevokeInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== revokeInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, owner, multiSigners }, data, } = decodeRevokeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Revoke)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeRevokeInstructionUnchecked({ programId, keys: [account, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data: revokeInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=revoke.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n/** Authority types defined by the program */\nexport var AuthorityType;\n(function (AuthorityType) {\n    AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n    AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n    AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n    AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n    AuthorityType[AuthorityType[\"TransferFeeConfig\"] = 4] = \"TransferFeeConfig\";\n    AuthorityType[AuthorityType[\"WithheldWithdraw\"] = 5] = \"WithheldWithdraw\";\n    AuthorityType[AuthorityType[\"CloseMint\"] = 6] = \"CloseMint\";\n    AuthorityType[AuthorityType[\"InterestRate\"] = 7] = \"InterestRate\";\n    AuthorityType[AuthorityType[\"PermanentDelegate\"] = 8] = \"PermanentDelegate\";\n    AuthorityType[AuthorityType[\"ConfidentialTransferMint\"] = 9] = \"ConfidentialTransferMint\";\n    AuthorityType[AuthorityType[\"TransferHookProgramId\"] = 10] = \"TransferHookProgramId\";\n    AuthorityType[AuthorityType[\"ConfidentialTransferFeeConfig\"] = 11] = \"ConfidentialTransferFeeConfig\";\n    AuthorityType[AuthorityType[\"MetadataPointer\"] = 12] = \"MetadataPointer\";\n    AuthorityType[AuthorityType[\"GroupPointer\"] = 13] = \"GroupPointer\";\n    AuthorityType[AuthorityType[\"GroupMemberPointer\"] = 14] = \"GroupMemberPointer\";\n})(AuthorityType || (AuthorityType = {}));\n/** TODO: docs */\nexport const setAuthorityInstructionData = struct([\n    u8('instruction'),\n    u8('authorityType'),\n    new COptionPublicKeyLayout('newAuthority'),\n]);\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);\n    const data = Buffer.alloc(setAuthorityInstructionData.span);\n    setAuthorityInstructionData.encode({\n        instruction: TokenInstruction.SetAuthority,\n        authorityType,\n        newAuthority,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSetAuthorityInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== setAuthorityInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, currentAuthority, multiSigners }, data, } = decodeSetAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SetAuthority)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !currentAuthority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSetAuthorityInstructionUnchecked({ programId, keys: [account, currentAuthority, ...multiSigners], data, }) {\n    const { instruction, authorityType, newAuthority } = setAuthorityInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data: {\n            instruction,\n            authorityType,\n            newAuthority,\n        },\n    };\n}\n//# sourceMappingURL=setAuthority.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const syncNativeInstructionData = struct([u8('instruction')]);\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSyncNativeInstruction(account, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(syncNativeInstructionData.span);\n    syncNativeInstructionData.encode({ instruction: TokenInstruction.SyncNative }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSyncNativeInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== syncNativeInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account }, data, } = decodeSyncNativeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SyncNative)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSyncNativeInstructionUnchecked({ programId, keys: [account], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data: syncNativeInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=syncNative.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const thawAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createThawAccountInstruction(account, mint, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(thawAccountInstructionData.span);\n    thawAccountInstructionData.encode({ instruction: TokenInstruction.ThawAccount }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeThawAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== thawAccountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, authority, multiSigners }, data, } = decodeThawAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ThawAccount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeThawAccountInstructionUnchecked({ programId, keys: [account, mint, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: thawAccountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=thawAccount.js.map","import { blob, struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUiAmountToAmountInstruction(mint, amount, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n    const buf = Buffer.from(amount, 'utf8');\n    const uiAmountToAmountInstructionData = struct([\n        u8('instruction'),\n        blob(buf.length, 'amount'),\n    ]);\n    const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n    uiAmountToAmountInstructionData.encode({\n        instruction: TokenInstruction.UiAmountToAmount,\n        amount: buf,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeUiAmountToAmountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    const uiAmountToAmountInstructionData = struct([\n        u8('instruction'),\n        blob(instruction.data.length - 1, 'amount'),\n    ]);\n    if (instruction.data.length !== uiAmountToAmountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.UiAmountToAmount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeUiAmountToAmountInstructionUnchecked({ programId, keys: [mint], data, }) {\n    const uiAmountToAmountInstructionData = struct([\n        u8('instruction'),\n        blob(data.length - 1, 'amount'),\n    ]);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: uiAmountToAmountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=uiAmountToAmount.js.map","import { u8 } from '@solana/buffer-layout';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { decodeAmountToUiAmountInstruction } from './amountToUiAmount.js';\nimport { decodeApproveInstruction } from './approve.js';\nimport { decodeApproveCheckedInstruction } from './approveChecked.js';\nimport { decodeBurnInstruction } from './burn.js';\nimport { decodeBurnCheckedInstruction } from './burnChecked.js';\nimport { decodeCloseAccountInstruction } from './closeAccount.js';\nimport { decodeFreezeAccountInstruction } from './freezeAccount.js';\nimport { decodeInitializeAccountInstruction } from './initializeAccount.js';\nimport { decodeInitializeAccount2Instruction } from './initializeAccount2.js';\nimport { decodeInitializeAccount3Instruction } from './initializeAccount3.js';\nimport { decodeInitializeMintInstruction } from './initializeMint.js';\nimport { decodeInitializeMint2Instruction } from './initializeMint2.js';\nimport { decodeInitializeMultisigInstruction } from './initializeMultisig.js';\nimport { decodeMintToInstruction } from './mintTo.js';\nimport { decodeMintToCheckedInstruction } from './mintToChecked.js';\nimport { decodeRevokeInstruction } from './revoke.js';\nimport { decodeSetAuthorityInstruction } from './setAuthority.js';\nimport { decodeSyncNativeInstruction } from './syncNative.js';\nimport { decodeThawAccountInstruction } from './thawAccount.js';\nimport { decodeTransferInstruction } from './transfer.js';\nimport { decodeTransferCheckedInstruction } from './transferChecked.js';\nimport { TokenInstruction } from './types.js';\nimport { decodeUiAmountToAmountInstruction } from './uiAmountToAmount.js';\n/** TODO: docs */\nexport function decodeInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.data.length)\n        throw new TokenInvalidInstructionDataError();\n    const type = u8().decode(instruction.data);\n    if (type === TokenInstruction.InitializeMint)\n        return decodeInitializeMintInstruction(instruction, programId);\n    if (type === TokenInstruction.InitializeAccount)\n        return decodeInitializeAccountInstruction(instruction, programId);\n    if (type === TokenInstruction.InitializeMultisig)\n        return decodeInitializeMultisigInstruction(instruction, programId);\n    if (type === TokenInstruction.Transfer)\n        return decodeTransferInstruction(instruction, programId);\n    if (type === TokenInstruction.Approve)\n        return decodeApproveInstruction(instruction, programId);\n    if (type === TokenInstruction.Revoke)\n        return decodeRevokeInstruction(instruction, programId);\n    if (type === TokenInstruction.SetAuthority)\n        return decodeSetAuthorityInstruction(instruction, programId);\n    if (type === TokenInstruction.MintTo)\n        return decodeMintToInstruction(instruction, programId);\n    if (type === TokenInstruction.Burn)\n        return decodeBurnInstruction(instruction, programId);\n    if (type === TokenInstruction.CloseAccount)\n        return decodeCloseAccountInstruction(instruction, programId);\n    if (type === TokenInstruction.FreezeAccount)\n        return decodeFreezeAccountInstruction(instruction, programId);\n    if (type === TokenInstruction.ThawAccount)\n        return decodeThawAccountInstruction(instruction, programId);\n    if (type === TokenInstruction.TransferChecked)\n        return decodeTransferCheckedInstruction(instruction, programId);\n    if (type === TokenInstruction.ApproveChecked)\n        return decodeApproveCheckedInstruction(instruction, programId);\n    if (type === TokenInstruction.MintToChecked)\n        return decodeMintToCheckedInstruction(instruction, programId);\n    if (type === TokenInstruction.BurnChecked)\n        return decodeBurnCheckedInstruction(instruction, programId);\n    if (type === TokenInstruction.InitializeAccount2)\n        return decodeInitializeAccount2Instruction(instruction, programId);\n    if (type === TokenInstruction.SyncNative)\n        return decodeSyncNativeInstruction(instruction, programId);\n    if (type === TokenInstruction.InitializeAccount3)\n        return decodeInitializeAccount3Instruction(instruction, programId);\n    if (type === TokenInstruction.InitializeMint2)\n        return decodeInitializeMint2Instruction(instruction, programId);\n    if (type === TokenInstruction.AmountToUiAmount)\n        return decodeAmountToUiAmountInstruction(instruction, programId);\n    if (type === TokenInstruction.UiAmountToAmount)\n        return decodeUiAmountToAmountInstruction(instruction, programId);\n    // TODO: implement\n    if (type === TokenInstruction.InitializeMultisig2)\n        throw new TokenInvalidInstructionTypeError();\n    throw new TokenInvalidInstructionTypeError();\n}\n/** TODO: docs */\nexport function isInitializeMintInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.InitializeMint;\n}\n/** TODO: docs */\nexport function isInitializeAccountInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.InitializeAccount;\n}\n/** TODO: docs */\nexport function isInitializeMultisigInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.InitializeMultisig;\n}\n/** TODO: docs */\nexport function isTransferInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.Transfer;\n}\n/** TODO: docs */\nexport function isApproveInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.Approve;\n}\n/** TODO: docs */\nexport function isRevokeInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.Revoke;\n}\n/** TODO: docs */\nexport function isSetAuthorityInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.SetAuthority;\n}\n/** TODO: docs */\nexport function isMintToInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.MintTo;\n}\n/** TODO: docs */\nexport function isBurnInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.Burn;\n}\n/** TODO: docs */\nexport function isCloseAccountInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.CloseAccount;\n}\n/** TODO: docs */\nexport function isFreezeAccountInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.FreezeAccount;\n}\n/** TODO: docs */\nexport function isThawAccountInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.ThawAccount;\n}\n/** TODO: docs */\nexport function isTransferCheckedInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.TransferChecked;\n}\n/** TODO: docs */\nexport function isApproveCheckedInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.ApproveChecked;\n}\n/** TODO: docs */\nexport function isMintToCheckedInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.MintToChecked;\n}\n/** TODO: docs */\nexport function isBurnCheckedInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.BurnChecked;\n}\n/** TODO: docs */\nexport function isInitializeAccount2Instruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.InitializeAccount2;\n}\n/** TODO: docs */\nexport function isSyncNativeInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.SyncNative;\n}\n/** TODO: docs */\nexport function isInitializeAccount3Instruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.InitializeAccount3;\n}\n/** TODO: docs, implement */\n// export function isInitializeMultisig2Instruction(\n//     decoded: DecodedInstruction\n// ): decoded is DecodedInitializeMultisig2Instruction {\n//     return decoded.data.instruction === TokenInstruction.InitializeMultisig2;\n// }\n/** TODO: docs */\nexport function isInitializeMint2Instruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.InitializeMint2;\n}\n/** TODO: docs */\nexport function isAmountToUiAmountInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.AmountToUiAmount;\n}\n/** TODO: docs */\nexport function isUiamountToAmountInstruction(decoded) {\n    return decoded.data.instruction === TokenInstruction.UiAmountToAmount;\n}\n//# sourceMappingURL=decode.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const transferInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Transfer instruction\n *\n * @param source       Source account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferInstruction(source, destination, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(transferInstructionData.span);\n    transferInstructionData.encode({\n        instruction: TokenInstruction.Transfer,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a Transfer instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { source, destination, owner, multiSigners }, data, } = decodeTransferInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Transfer)\n        throw new TokenInvalidInstructionTypeError();\n    if (!source || !destination || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a Transfer instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferInstructionUnchecked({ programId, keys: [source, destination, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=transfer.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const transferCheckedInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedInstruction(source, mint, destination, owner, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(transferCheckedInstructionData.span);\n    transferCheckedInstructionData.encode({\n        instruction: TokenInstruction.TransferChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { source, mint, destination, owner, multiSigners }, data, } = decodeTransferCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferChecked)\n        throw new TokenInvalidInstructionTypeError();\n    if (!source || !mint || !destination || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedInstructionUnchecked({ programId, keys: [source, mint, destination, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferCheckedInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=transferChecked.js.map","import { PublicKey } from '@solana/web3.js';\n/** @internal */\nexport function addSigners(keys, ownerOrAuthority, multiSigners) {\n    if (multiSigners.length) {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });\n        for (const signer of multiSigners) {\n            keys.push({\n                pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            });\n        }\n    }\n    else {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });\n    }\n    return keys;\n}\n//# sourceMappingURL=internal.js.map","/** Instructions defined by the program */\nexport var TokenInstruction;\n(function (TokenInstruction) {\n    TokenInstruction[TokenInstruction[\"InitializeMint\"] = 0] = \"InitializeMint\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount\"] = 1] = \"InitializeAccount\";\n    TokenInstruction[TokenInstruction[\"InitializeMultisig\"] = 2] = \"InitializeMultisig\";\n    TokenInstruction[TokenInstruction[\"Transfer\"] = 3] = \"Transfer\";\n    TokenInstruction[TokenInstruction[\"Approve\"] = 4] = \"Approve\";\n    TokenInstruction[TokenInstruction[\"Revoke\"] = 5] = \"Revoke\";\n    TokenInstruction[TokenInstruction[\"SetAuthority\"] = 6] = \"SetAuthority\";\n    TokenInstruction[TokenInstruction[\"MintTo\"] = 7] = \"MintTo\";\n    TokenInstruction[TokenInstruction[\"Burn\"] = 8] = \"Burn\";\n    TokenInstruction[TokenInstruction[\"CloseAccount\"] = 9] = \"CloseAccount\";\n    TokenInstruction[TokenInstruction[\"FreezeAccount\"] = 10] = \"FreezeAccount\";\n    TokenInstruction[TokenInstruction[\"ThawAccount\"] = 11] = \"ThawAccount\";\n    TokenInstruction[TokenInstruction[\"TransferChecked\"] = 12] = \"TransferChecked\";\n    TokenInstruction[TokenInstruction[\"ApproveChecked\"] = 13] = \"ApproveChecked\";\n    TokenInstruction[TokenInstruction[\"MintToChecked\"] = 14] = \"MintToChecked\";\n    TokenInstruction[TokenInstruction[\"BurnChecked\"] = 15] = \"BurnChecked\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount2\"] = 16] = \"InitializeAccount2\";\n    TokenInstruction[TokenInstruction[\"SyncNative\"] = 17] = \"SyncNative\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount3\"] = 18] = \"InitializeAccount3\";\n    TokenInstruction[TokenInstruction[\"InitializeMultisig2\"] = 19] = \"InitializeMultisig2\";\n    TokenInstruction[TokenInstruction[\"InitializeMint2\"] = 20] = \"InitializeMint2\";\n    TokenInstruction[TokenInstruction[\"GetAccountDataSize\"] = 21] = \"GetAccountDataSize\";\n    TokenInstruction[TokenInstruction[\"InitializeImmutableOwner\"] = 22] = \"InitializeImmutableOwner\";\n    TokenInstruction[TokenInstruction[\"AmountToUiAmount\"] = 23] = \"AmountToUiAmount\";\n    TokenInstruction[TokenInstruction[\"UiAmountToAmount\"] = 24] = \"UiAmountToAmount\";\n    TokenInstruction[TokenInstruction[\"InitializeMintCloseAuthority\"] = 25] = \"InitializeMintCloseAuthority\";\n    TokenInstruction[TokenInstruction[\"TransferFeeExtension\"] = 26] = \"TransferFeeExtension\";\n    TokenInstruction[TokenInstruction[\"ConfidentialTransferExtension\"] = 27] = \"ConfidentialTransferExtension\";\n    TokenInstruction[TokenInstruction[\"DefaultAccountStateExtension\"] = 28] = \"DefaultAccountStateExtension\";\n    TokenInstruction[TokenInstruction[\"Reallocate\"] = 29] = \"Reallocate\";\n    TokenInstruction[TokenInstruction[\"MemoTransferExtension\"] = 30] = \"MemoTransferExtension\";\n    TokenInstruction[TokenInstruction[\"CreateNativeMint\"] = 31] = \"CreateNativeMint\";\n    TokenInstruction[TokenInstruction[\"InitializeNonTransferableMint\"] = 32] = \"InitializeNonTransferableMint\";\n    TokenInstruction[TokenInstruction[\"InterestBearingMintExtension\"] = 33] = \"InterestBearingMintExtension\";\n    TokenInstruction[TokenInstruction[\"CpiGuardExtension\"] = 34] = \"CpiGuardExtension\";\n    TokenInstruction[TokenInstruction[\"InitializePermanentDelegate\"] = 35] = \"InitializePermanentDelegate\";\n    TokenInstruction[TokenInstruction[\"TransferHookExtension\"] = 36] = \"TransferHookExtension\";\n    // ConfidentialTransferFeeExtension = 37,\n    // WithdrawalExcessLamports = 38,\n    TokenInstruction[TokenInstruction[\"MetadataPointerExtension\"] = 39] = \"MetadataPointerExtension\";\n    TokenInstruction[TokenInstruction[\"GroupPointerExtension\"] = 40] = \"GroupPointerExtension\";\n    TokenInstruction[TokenInstruction[\"GroupMemberPointerExtension\"] = 41] = \"GroupMemberPointerExtension\";\n})(TokenInstruction || (TokenInstruction = {}));\n//# sourceMappingURL=types.js.map","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, TokenInvalidMintError, TokenOwnerOffCurveError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint)\n            throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(connection, commitment) {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(connection, extensions, commitment) {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n//# sourceMappingURL=mint.js.map","export default function timeoutSignal(timeout) {\r\n\tif (!Number.isInteger(timeout)) {\r\n\t\tthrow new TypeError('Expected an integer');\r\n\t}\r\n\r\n\tconst controller = new AbortController();\r\n\r\n\tconst timeoutId = setTimeout(() => {\r\n\t\tcontroller.abort();\r\n\t}, timeout);\r\n\r\n\t// Allow Node.js processes to exit early if only the timeout is running\r\n\ttimeoutId?.unref?.();\r\n\r\n\treturn controller.signal;\r\n}\r\n"],"names":["layout","decode","bind","encode","bigInt","length","property","blob","bigIntLayout","buffer","offset","src","toBigIntLE","Buffer","from","toBufferLE","bigIntBE","toBigIntBE","toBufferBE","u64","bool","u8","boolLayout","Number","publicKey","publicKeyLayout","PublicKey","toBuffer","number","n","isSafeInteger","Error","bytes","b","lengths","isBytes","a","Uint8Array","constructor","name","includes","h","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","globalThis","crypto","undefined","createView","arr","DataView","byteOffset","byteLength","rotr","word","shift","isLE","Uint32Array","byteSwap","byteSwap32","i","str","TextEncoder","toBytes","data","arrays","sum","res","pad","set","Hash","clone","this","_cloneInto","hashCons","hashC","msg","update","digest","tmp","bytesLength","getRandomValues","Maj","c","HashMD","padOffset","super","pos","view","len","take","Math","subarray","process","dataView","roundClean","digestInto","fill","setBigUint64","value","_32n","BigInt","_u32_max","wh","wl","l","setUint32","oview","outLen","state","get","slice","destroy","to","U32_MASK64","fromBig","le","split","lst","Ah","Al","rotlSH","s","rotlSL","rotlBH","rotlBL","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","_1n","_2n","item","Array","_","toString","padStart","hex","hexToNumber","_0","_9","_A","_F","_a","_f","char","hl","al","array","ai","hi","n1","charCodeAt","n2","reverse","title","expectedLength","e","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","gen","sl","push","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isArray","field","object","Fp","isValid","hash","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","_3n","_4n","_5n","_8n","result","pow","num","power","modulo","x","invert","y","u","q","r","m","FpSqrt","P","p1div4","sqrt3mod4","root","eql","sqr","c1","sqrt5mod8","mul","nv","sub","ONE","tonelliShanks","legendreC","Q","S","Z","tonelliFast","Q1div2","tonelliSlow","neg","g","ZERO","t2","ge","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","bitLen","redef","BITS","BYTES","sqrtP","f","freeze","MASK","is0","isOdd","lhs","rhs","FpPow","p","d","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","FpInvertBatch","nums","lastMultiplied","reduce","acc","inverted","reduceRight","cmov","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","wNAF","bits","constTimeNegate","condition","negate","opts","W","windows","windowSize","unsafeLadder","elm","double","precomputeWindow","points","base","window","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","validateField","Gx","Gy","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","validateOpts","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","CURVE_ORDER","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","fromAffine","normalizeZ","toInv","_setWindowSize","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wnaf","multiply","scalar","multiplyUnsafe","I","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","normed","lastByte","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","toHex","modN","modN_LE","key","hashed","head","prefix","pointBytes","hashDomainToScalar","context","msgs","verifyOpts","getPublicKey","sign","options","R","verify","sig","SB","error","ExtendedPoint","utils","randomPrivateKey","precompute","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","ed25519_domain","ELL2_C1","FpSqrtEven","SHA256_K","SHA256_IV","SHA256_W","SHA256","W15","W2","s0","s1","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","t","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","floor","keccak","keccakP","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","finish","writeInto","bufferOut","xofInto","xof","keccak_256","HMAC","_key","iHash","oHash","buf","getPrototypeOf","hmac","message","bytesToNumberBE","b2n","hexToBytes","h2b","DER","Err","DERErr","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","parseInt","shl","rhl","rl","weierstrassPoints","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","_c","_isCompressed","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","assertPrjPoint","px","py","pz","privateKey","left","right","hasEvenY","U1","U2","b3","t0","t1","t3","t4","t5","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","isCompressed","_bits","ProjectivePoint","weierstrass","bits2int","bits2int_modN","lowS","compressedLen","uncompressedLen","invN","cat","isValidFieldElement","sqrtError","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","mapHashToField","fieldLen","minLen","reduced","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getSharedSecret","privateA","publicB","drbg","signature","sg","_sig","derError","is","getHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","createCurve","defHash","a1","b1","a2","POW_2_128","c2","generatePrivateKey","generateKeypair","privateScalar","secretKey","isOnCurve","isBuffer","Struct","properties","assign","serialize","SOLANA_SCHEMA","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","_PublicKey","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_bn","isPublicKeyData","decoded","unique","eq","toBase58","toJSON","toArrayLike","zeroPad","alloc","copy","Symbol","toStringTag","createWithSeed","fromPublicKey","programId","concat","publicKeyBytes","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddress","pubkeyData","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","rustString","rsl","_decode","_encode","rslShim","chars","span","getAlloc","getItemAlloc","elementLayout","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","start","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","addressTableLookupsCount","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","JSON","stringify","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","TransactionMessage","decompile","numWritableSignedAccounts","numWritableUnsignedAccounts","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","SystemInstruction","decodeInstructionType","checkProgramId","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","authorized","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","UpgradeNonceAccount","createAccount","params","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","getSlot","slot","MS_PER_SLOT","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","getDefaultExportFromCjs","__esModule","objToString","objKeys","obj","isArrayProp","propVal","toStr","isFinite","fastStableStringify$1","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","nextPowerOfTwo","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","fetchImpl","fetch","RpcWebSocketClient","generate_request_id","url","rpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","reject","notify","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","unsafeRes","confirmTransactionInitialTimeout","assertEndpointUrl","putativeUrl","test","makeWebsocketUrl","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","createRpcClient","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","then","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","_blockhashWithExpiryBlockHeight","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","_Lockup","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","lockup","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","rentExemptReserve","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","voteInit","InitializeAccount","voteAuthorizationType","voteAuthorizeWithSeedArgs","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","UpdateValidatorIdentity","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL","eventemitter3_1","utils_1","CommonClient","EventEmitter","rpc_id","queue","ready","reconnect_timer_id","rest_options","current_reconnects","webSocketFactory","dataPack","DefaultDataPack","_connect","timeout","ws_opts","send","promise","login","resp","listMethods","subscribe","event","unsubscribe","setAutoReconnect","setReconnectInterval","interval","setMaxReconnects","emit","ArrayBuffer","listeners","apply","exports","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","listener","default_1","createError","u256be","u256","u192be","u192","u128be","u128","u64be","buffer_layout_1","bigint_buffer_1","base_1","__importDefault","mod","decimal","WAD","bignumber_js_1","bigint_1","decimalLayout","times","integerValue","__createBinding","enumerable","__exportStar","web3_js_1","assertByteArrayHasEnoughBytesForCodec","codecDescription","expected","SolanaError","SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH","assertByteArrayOffsetIsNotOutOfRange","SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE","padBytes","paddedBytes","fixBytes","getEncodedSize","encoder","fixedSize","getSizeFromValue","createEncoder","write","createDecoder","decoder","read","createCodec","codec","isFixedSize","assertIsFixedSize","SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH","isVariableSize","combineCodec","SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH","SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH","decoderFixedSize","encoderFixedSize","maxSize","SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH","decoderMaxSize","encoderMaxSize","fixEncoder","fixedBytes","variableByteArray","fixedByteArray","fixDecoder","mapEncoder","unmap","mapDecoder","newOffset","offsetEncoder","preOffset","wrapBytes","newPreOffset","postOffset","newPostOffset","offsetDecoder","dividend","divisor","resizeEncoder","resize","SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH","newSize","resizeDecoder","padLeftEncoder","padRightEncoder","padLeftDecoder","padRightDecoder","reverseEncoder","reverseDecoder","reverseEnd","reversedBytes","assertByteArrayIsNotEmptyForCodec","SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY","assertIsVariableSize","SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH","fixCodec","mapCodec","mergeBytes","byteArrays","nonEmptyByteArrays","totalLength","offsetCodec","padLeftCodec","padRightCodec","resizeCodec","reverseCodec","__DEV__","SOLANA_ERROR__JSON_RPC__PARSE_ERROR","SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR","SOLANA_ERROR__JSON_RPC__INVALID_PARAMS","SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND","SOLANA_ERROR__JSON_RPC__INVALID_REQUEST","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","SOLANA_ERROR__JSON_RPC__SCAN_ERROR","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP","SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH","SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE","SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS","SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY","SOLANA_ERROR__ADDRESSES__MALFORMED_PDA","SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE","SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED","SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED","SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE","SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED","SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER","SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND","SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND","SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT","SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT","SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED","SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT","SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED","SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED","SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED","SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED","SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED","SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED","SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH","SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH","SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH","SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE","SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS","SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA","SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH","SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN","SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL","SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS","SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID","SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED","SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT","SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION","SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID","SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND","SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED","SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE","SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED","SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX","SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED","SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED","SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING","SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC","SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR","SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED","SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE","SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT","SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID","SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH","SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT","SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED","SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC","SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED","SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION","SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE","SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE","SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE","SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE","SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY","SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER","SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW","SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR","SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER","SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED","SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED","SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED","SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS","SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS","SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER","SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS","SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING","SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES","SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE","SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME","SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME","SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE","SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING","SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE","SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND","SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING","SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING","SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING","SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING","SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING","SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING","SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE","SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN","SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE","SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE","SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND","SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND","SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE","SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED","SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND","SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP","SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX","SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION","SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE","SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE","SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING","SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT","SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS","SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT","SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION","SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT","SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED","SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED","SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION","SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS","SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE","SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT","SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT","SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE","SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE","SOLANA_ERROR__RPC__INTEGER_OVERFLOW","SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN","SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR","SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST","SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID","SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED","SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED","SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT","SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING","SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE","SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING","SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE","SolanaErrorMessages","encodeValue","element","encodeURIComponent","replace","encodeObjectContextEntry","getErrorMessage","getHumanReadableErrorMessage","substring","variableName","decodingAdviceMessage","encodeContextObject","contextAndErrorOptions","errorOptions","cause","contextRest","__code","safeCaptureStackTrace","captureStackTrace","getSolanaErrorFromRpcError","errorCodeBaseOffset","getErrorContext","orderedErrorNames","rpcEnumError","constructorOpt","rpcErrorName","rpcErrorContext","errorCode","errorContext","ORDERED_ERROR_NAMES","getSolanaErrorFromInstructionError","instructionError","errorName","instructionErrorContext","encodedData","ORDERED_ERROR_NAMES2","getSolanaErrorFromTransactionError","transactionError","InstructionError","transactionErrorContext","account_index","SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE","SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED","SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH","SOLANA_ERROR__INVALID_NONCE","SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE","SOLANA_ERROR__MALFORMED_BIGINT_STRING","SOLANA_ERROR__MALFORMED_NUMBER_STRING","SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND","SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE","getSolanaErrorFromJsonRpcError","preflightErrorContext","causeObject","__serverMessage","isSolanaError","codecsCore","assertNumberIsBetweenForCodec","Endian","Endian2","isLittleEndian","endian","numberEncoderFactory","input","arrayBuffer","numberDecoderFactory","toArrayBuffer","bytesOffset","getF32Encoder","setFloat32","getF32Decoder","getFloat32","getF64Encoder","setFloat64","getF64Decoder","getFloat64","getI128Encoder","leftOffset","rightOffset","setBigInt64","getI128Decoder","getBigInt64","getBigUint64","getI16Encoder","setInt16","getI16Decoder","getInt16","getI32Encoder","setInt32","getI32Decoder","getInt32","getI64Encoder","getI64Decoder","getI8Encoder","setInt8","getI8Decoder","getInt8","getShortU16Encoder","shortU16Bytes","alignedValue","nextSevenBits","getShortU16Decoder","byteCount","byteIndex","currentByte","getU128Encoder","getU128Decoder","getU16Encoder","setUint16","getU16Decoder","getUint16","getU32Encoder","getU32Decoder","getU64Encoder","getU64Decoder","getU8Encoder","setUint8","getU8Decoder","getUint8","getF32Codec","getF64Codec","getI128Codec","getI16Codec","getI32Codec","getI64Codec","getI8Codec","getShortU16Codec","getU128Codec","getU16Codec","getU32Codec","getU64Codec","getU8Codec","codecsDataStructures","codecsNumbers","codecsStrings","assertValidNumberOfItemsForCodec","actual","sumCodecSizes","sizes","getFixedSize","getMaxSize","getArrayEncoder","computeArrayLikeCodecSize","getArrayDecoder","itemSize","newOffset2","resolvedSize","getBitArrayEncoder","backward","bytesToAdd","byte","getBitArrayDecoder","booleans","Boolean","getBooleanEncoder","getBooleanDecoder","getBytesEncoder","byteEncoder","getBytesDecoder","byteDecoder","lengthBigInt","lengthOffset","contentBytes","contentOffset","getDataEnumEncoder","variants","getDataEnumFixedSize","variant","discriminator","getVariantDiscriminator","variantEncoder","getDataEnumMaxSize","getDataEnumDecoder","dOffset","variantField","maxRange","minRange","vOffset","__kind","variantSize","maxVariantSize","maxCodecSizes","getTupleEncoder","one","getTupleDecoder","newValue","getMapEncoder","getMapDecoder","getNullableEncoder","fixed","isZeroSizeItem","option","prefixOffset","getNullableDecoder","isSome","getScalarEnumEncoder","allStringInputs","enumKeys","enumValues","getScalarEnumStats","isInvalidNumber","isInvalidString","valueIndex","getScalarEnumDecoder","valueAsNumber","numericValues","deduplicatedConstructor","fromEntries","getSetEncoder","getSetDecoder","getStructEncoder","fieldCodecs","struct","getStructDecoder","getUnitEncoder","_value","_bytes","getUnitDecoder","getArrayCodec","getBitArrayCodec","getBooleanCodec","getBytesCodec","getDataEnumCodec","getMapCodec","getNullableCodec","configCast","getScalarEnumCodec","getSetCodec","getStructCodec","getTupleCodec","getUnitCodec","assertValidBaseString","alphabet4","testValue","givenValue","RegExp","alphabet","getBaseXEncoder","leadingZeroes","tailChars","partitionLeadingZeroes","base10Number","getBigIntFromBaseX","tailBytes","getBaseXDecoder","rawBytes","trailIndex","repeat","getBaseXFromBigInt","getBaseXCodec","zeroCharacter","leadingZeros","getBase16Encoder","lowercaseValue","toLowerCase","hexBytes","getBase16Decoder","alphabet2","getBaseXResliceEncoder","reslicedBytes","reslice","getBaseXResliceDecoder","inputBits","outputBits","useRemainder","accumulator","bitsInAccumulator","alphabet3","getBase64Encoder","atob","e2","getBase64Decoder","btoa","fromCharCode","removeNullCharacters","TextDecoder","getUtf8Encoder","textEncoder","getUtf8Decoder","textDecoder","getStringEncoder","contentSize","getStringDecoder","getBase10Codec","getBase10Decoder","getBase10Encoder","getBase16Codec","getBase58Codec","getBase58Decoder","getBase58Encoder","getBase64Codec","getBaseXResliceCodec","getStringCodec","getUtf8Codec","padNullCharacters","padEnd","__option","none","isOption","wrapNullable","nullable","getOptionEncoder","optionOrNullable","getOptionDecoder","isSome2","getOptionCodec","isNone","unwrapOption","fallback","unwrapOptionRecursively","isView","next","TlvInvalidAccountDataError","TlvError","arguments","desc","getOwnPropertyDescriptor","configurable","splDiscriminate","crypto_1","createHash","TlvState","errors_js_1","discriminatorSize","lengthSize","tlvData","readEntryLength","readUInt8","readUInt16LE","readUInt32LE","readBigUInt64LE","firstBytes","bytesRepeating","entryLength","discriminators","TOKEN_PROGRAM_ID","TOKEN_2022_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","TokenError","TokenOwnerOffCurveError","TokenInvalidInstructionProgramError","TokenInvalidInstructionKeysError","TokenInvalidInstructionDataError","TokenInvalidInstructionTypeError","createAssociatedTokenAccountInstruction","associatedToken","associatedTokenProgramId","buildAssociatedTokenAccountInstruction","amountToUiAmountInstructionData","decodeAmountToUiAmountInstruction","decodeAmountToUiAmountInstructionUnchecked","AmountToUiAmount","approveInstructionData","decodeApproveInstruction","multiSigners","decodeApproveInstructionUnchecked","Approve","approveCheckedInstructionData","decodeApproveCheckedInstruction","decodeApproveCheckedInstructionUnchecked","ApproveChecked","burnInstructionData","decodeBurnInstruction","decodeBurnInstructionUnchecked","Burn","burnCheckedInstructionData","decodeBurnCheckedInstruction","decodeBurnCheckedInstructionUnchecked","BurnChecked","closeAccountInstructionData","decodeCloseAccountInstruction","destination","decodeCloseAccountInstructionUnchecked","CloseAccount","freezeAccountInstructionData","decodeFreezeAccountInstruction","decodeFreezeAccountInstructionUnchecked","FreezeAccount","initializeAccountInstructionData","decodeInitializeAccountInstruction","rent","decodeInitializeAccountInstructionUnchecked","initializeAccount2InstructionData","decodeInitializeAccount2Instruction","decodeInitializeAccount2InstructionUnchecked","InitializeAccount2","initializeAccount3InstructionData","decodeInitializeAccount3Instruction","decodeInitializeAccount3InstructionUnchecked","InitializeAccount3","COptionPublicKeyLayout","Layout","getSpan","initializeMintInstructionData","decodeInitializeMintInstruction","decodeInitializeMintInstructionUnchecked","mintAuthority","freezeAuthority","InitializeMint","initializeMint2InstructionData","decodeInitializeMint2Instruction","decodeInitializeMint2InstructionUnchecked","InitializeMint2","initializeMultisigInstructionData","decodeInitializeMultisigInstruction","decodeInitializeMultisigInstructionUnchecked","InitializeMultisig","mintToInstructionData","decodeMintToInstruction","decodeMintToInstructionUnchecked","MintTo","mintToCheckedInstructionData","decodeMintToCheckedInstruction","decodeMintToCheckedInstructionUnchecked","MintToChecked","revokeInstructionData","decodeRevokeInstruction","decodeRevokeInstructionUnchecked","Revoke","AuthorityType","setAuthorityInstructionData","decodeSetAuthorityInstruction","currentAuthority","decodeSetAuthorityInstructionUnchecked","authorityType","newAuthority","SetAuthority","syncNativeInstructionData","decodeSyncNativeInstruction","decodeSyncNativeInstructionUnchecked","SyncNative","thawAccountInstructionData","decodeThawAccountInstruction","decodeThawAccountInstructionUnchecked","ThawAccount","decodeUiAmountToAmountInstruction","uiAmountToAmountInstructionData","decodeUiAmountToAmountInstructionUnchecked","UiAmountToAmount","decodeInstruction","TransferChecked","InitializeMultisig2","transferInstructionData","decodeTransferInstruction","decodeTransferInstructionUnchecked","transferCheckedInstructionData","createTransferCheckedInstruction","addSigners","ownerOrAuthority","decodeTransferCheckedInstruction","decodeTransferCheckedInstructionUnchecked","TokenInstruction","MintLayout","u32","getAssociatedTokenAddressSync","allowOwnerOffCurve","timeoutSignal","isInteger","controller","AbortController","abort","unref"],"sourceRoot":""}