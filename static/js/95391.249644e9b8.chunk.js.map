{"version":3,"file":"static/js/95391.249644e9b8.chunk.js","mappings":"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","sources":["webpack://web/../../node_modules/@onekeyfe/coinselect/utils.js","webpack://web/../../packages/core/src/base/ChainSigner.ts","webpack://web/../../packages/core/src/base/CoreChainApiBase.ts","webpack://web/../../packages/core/src/chains/bfc/CoreChainHd.ts","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/cryptography/keypair.js","webpack://web/../../node_modules/@benfen/bfc.js/node_modules/@scure/bip39/esm/index.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/cryptography/mnemonics.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/keypairs/ed25519/ed25519-hd-key.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/keypairs/ed25519/keypair.js","webpack://web/../../packages/core/src/chains/bfc/CoreChainSoftware.ts","webpack://web/../../packages/core/src/utils/index.ts","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/cryptography/intent.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/cryptography/publickey.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/cryptography/signature-scheme.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/zklogin/helper/jwt-utils.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/zklogin/helper/bcs.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/zklogin/helper/utils.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/zklogin/helper/publickey.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/zklogin/helper/signature.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/cryptography/signature.js","webpack://web/../../node_modules/@benfen/bfc.js/dist/esm/keypairs/ed25519/publickey.js","webpack://web/../../node_modules/@noble/hashes/esm/pbkdf2.js","webpack://web/../../node_modules/@noble/hashes/esm/sha512.js"],"sourcesContent":["// baseline estimates, used to improve performance\nvar TX_EMPTY_SIZE = 4 + 1 + 1 + 4\nvar TX_INPUT_BASE = 32 + 4 + 1 + 4\nvar TX_INPUT_PUBKEYHASH = 107\nvar TX_OUTPUT_BASE = 8 + 1\nvar TX_OUTPUT_PUBKEYHASH = 25\nvar OP_RETURN_OVERHEAD = 1 + 8 + 1\n\nfunction inputBytes (input) {\n  return TX_INPUT_BASE + (input.script ? input.script.length : TX_INPUT_PUBKEYHASH)\n}\n\nfunction outputBytes (output) {\n  if (output.script) {\n    return OP_RETURN_OVERHEAD + output.script.length + (output.script.length >= 74 ? 2 : 1)\n  }\n  return TX_OUTPUT_BASE + (output.script ? output.script.length : TX_OUTPUT_PUBKEYHASH)\n}\n\nfunction dustThreshold (output, feeRate) {\n  /* ... classify the output for input estimate  */\n  return inputBytes({}) * feeRate\n}\n\nfunction transactionBytes (inputs, outputs) {\n  return TX_EMPTY_SIZE +\n    inputs.reduce(function (a, x) { return a + inputBytes(x) }, 0) +\n    outputs.reduce(function (a, x) { return a + outputBytes(x) }, 0)\n}\n\nfunction uintOrNaN (v) {\n  if (typeof v !== 'number') return NaN\n  if (!isFinite(v)) return NaN\n  if (Math.floor(v) !== v) return NaN\n  if (v < 0) return NaN\n  return v\n}\n\nfunction sumForgiving (range) {\n  return range.reduce(function (a, x) { return a + (isFinite(x.value) ? x.value : 0) }, 0)\n}\n\nfunction sumOrNaN (range) {\n  return range.reduce(function (a, x) { return a + uintOrNaN(x.value) }, 0)\n}\n\nvar BLANK_OUTPUT = outputBytes({})\n\nfunction finalize (inputs, outputs, feeRate) {\n  var bytesAccum = transactionBytes(inputs, outputs)\n  var feeAfterExtraOutput = feeRate * (bytesAccum + BLANK_OUTPUT)\n  var remainderAfterExtraOutput = sumOrNaN(inputs) - (sumOrNaN(outputs) + feeAfterExtraOutput)\n\n  // is it worth a change output?\n  if (remainderAfterExtraOutput > dustThreshold({}, feeRate)) {\n    outputs = outputs.concat({ value: remainderAfterExtraOutput })\n  }\n\n  var fee = sumOrNaN(inputs) - sumOrNaN(outputs)\n  if (!isFinite(fee)) return { fee: feeRate * bytesAccum }\n\n  return {\n    inputs: inputs,\n    outputs: outputs,\n    fee: fee\n  }\n}\n\nmodule.exports = {\n  dustThreshold: dustThreshold,\n  finalize: finalize,\n  inputBytes: inputBytes,\n  outputBytes: outputBytes,\n  sumOrNaN: sumOrNaN,\n  sumForgiving: sumForgiving,\n  transactionBytes: transactionBytes,\n  uintOrNaN: uintOrNaN\n}\n","import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _createClass from\"@babel/runtime/helpers/createClass\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function(){return!!t;})();}import bufferUtils from'@onekeyhq/shared/src/utils/bufferUtils';import{N,decrypt,sign as _sign,uncompressPublicKey,verify}from\"../secret\";export var Verifier=function(){function Verifier(pub,curve){this.curve=curve;this.compressedPublicKey=Buffer.from(pub,'hex');this.uncompressedPublicKey=uncompressPublicKey(curve,this.compressedPublicKey);}var _proto=Verifier.prototype;_proto.getPubkey=function getPubkey(compressed){return Promise.resolve(compressed?this.compressedPublicKey:this.uncompressedPublicKey);};_proto.getPubkeyHex=function(){var _getPubkeyHex=_asyncToGenerator(function*(compressed){return bufferUtils.bytesToHex(yield this.getPubkey(compressed));});function getPubkeyHex(_x){return _getPubkeyHex.apply(this,arguments);}return getPubkeyHex;}();_proto.verify=function verify(){return Promise.resolve(Buffer.from([]));};_proto.verifySignature=function verifySignature({publicKey,digest,signature}){var p=bufferUtils.toBuffer(publicKey);var d=bufferUtils.toBuffer(digest);var s=bufferUtils.toBuffer(signature);var{curve}=this;var result=verify(curve,p,d,s);return Promise.resolve(result);};return _createClass(Verifier);}();export var ChainSigner=function(_Verifier){_inherits(ChainSigner,_Verifier);var _super=_createSuper(ChainSigner);function ChainSigner(encryptedPrivateKey,password,curve){var _this;var pub=N(curve,{key:encryptedPrivateKey,chainCode:Buffer.alloc(32)},password).key.toString('hex');_this=_super.call(this,pub,curve);_this.encryptedPrivateKey=encryptedPrivateKey;_this.password=password;_this.curve=curve;return _this;}var _proto2=ChainSigner.prototype;_proto2.getPrvkey=function getPrvkey(){return Promise.resolve(decrypt(this.password,this.encryptedPrivateKey));};_proto2.getPrvkeyHex=function(){var _getPrvkeyHex=_asyncToGenerator(function*(){return bufferUtils.bytesToHex(yield this.getPrvkey());});function getPrvkeyHex(){return _getPrvkeyHex.apply(this,arguments);}return getPrvkeyHex;}();_proto2.sign=function sign(digest){var signature=_sign(this.curve,this.encryptedPrivateKey,digest,this.password);if(this.curve==='secp256k1'){return Promise.resolve([signature.slice(0,-1),signature[signature.length-1]]);}return Promise.resolve([signature,0]);};return _createClass(ChainSigner);}(Verifier);","import _merge from\"lodash/merge\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _createClass from\"@babel/runtime/helpers/createClass\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{NotImplemented,OneKeyInternalError}from'@onekeyhq/shared/src/errors';import bufferUtils from'@onekeyhq/shared/src/utils/bufferUtils';import{batchGetPrivateKeys,batchGetPublicKeysAsync,decrypt,decryptImportedCredential,ed25519,encrypt,nistp256,secp256k1}from\"../secret\";import{ECoreCredentialType}from\"../types\";import{slicePathTemplate}from\"../utils\";import{ChainSigner}from\"./ChainSigner\";export var CoreChainApiBase=function(){function CoreChainApiBase(){}var _proto=CoreChainApiBase.prototype;_proto.baseGetCurve=function baseGetCurve(curveName){switch(curveName){case'ed25519':return ed25519;case'secp256k1':return secp256k1;case'nistp256':return nistp256;default:throw new OneKeyInternalError('Unsupported curve');}};_proto.baseCreateSigner=function(){var _baseCreateSigner=_asyncToGenerator(function*({curve,privateKey,password}){if(typeof password==='undefined'){throw new OneKeyInternalError('Software signing requires a password.');}var privateKeyBuffer=bufferUtils.toBuffer(privateKey);return Promise.resolve(new ChainSigner(privateKeyBuffer,password,curve));});function baseCreateSigner(_x){return _baseCreateSigner.apply(this,arguments);}return baseCreateSigner;}();_proto.baseGetSingleSigner=function(){var _baseGetSingleSigner=_asyncToGenerator(function*({payload,curve}){var privateKeys=yield this.getPrivateKeys(payload);var accountPath=payload.account.path;var privateKey=privateKeys[accountPath];var firstRelPath=payload?.relPaths?.[0];if(!privateKey&&firstRelPath){var fullPath=[accountPath,firstRelPath].join('/');privateKey=privateKeys[fullPath];}if(!privateKey){throw new Error(`No private key found: ${accountPath}`);}return this.baseCreateSigner({curve,privateKey,password:payload.password});});function baseGetSingleSigner(_x2){return _baseGetSingleSigner.apply(this,arguments);}return baseGetSingleSigner;}();_proto.baseGetPrivateKeys=function(){var _baseGetPrivateKeys=_asyncToGenerator(function*({payload,curve}){var{credentials,account,password,relPaths}=payload;var privateKeys={};if(credentials.hd&&credentials.imported){throw new OneKeyInternalError('getPrivateKeys ERROR: hd and imported credentials can NOT both set.');}if(credentials.hd){privateKeys=yield this.baseGetPrivateKeysHd({curve,account,hdCredential:credentials.hd,password,relPaths});}if(credentials.imported){var{privateKey:p}=decryptImportedCredential({password,credential:credentials.imported});var encryptPrivateKey=bufferUtils.bytesToHex(encrypt(password,p));privateKeys[account.path]=encryptPrivateKey;privateKeys['']=encryptPrivateKey;}if(!Object.keys(privateKeys).length){throw new Error('No private keys found');}return privateKeys;});function baseGetPrivateKeys(_x3){return _baseGetPrivateKeys.apply(this,arguments);}return baseGetPrivateKeys;}();_proto.baseGetPrivateKeysHd=function(){var _baseGetPrivateKeysHd=_asyncToGenerator(function*({curve,password,account,relPaths,hdCredential}){var{path}=account;var pathComponents=path.split('/');var usedRelativePaths=relPaths||[pathComponents.pop()];var basePath=pathComponents.join('/');if(usedRelativePaths.length===0){throw new OneKeyInternalError('getPrivateKeysHd ERROR: relPaths is empty.');}var keys=batchGetPrivateKeys(curve,hdCredential,password,basePath,usedRelativePaths);var map=keys.reduce(function(ret,key){var result=_objectSpread(_objectSpread({},ret),{},{[key.path]:bufferUtils.bytesToHex(key.extendedKey.key)});return result;},{});return map;});function baseGetPrivateKeysHd(_x4){return _baseGetPrivateKeysHd.apply(this,arguments);}return baseGetPrivateKeysHd;}();_proto.baseGetAddressesFromHd=function(){var _baseGetAddressesFromHd=_asyncToGenerator(function*(query,options){var _this=this;var{curve,generateFrom}=options;var{template,hdCredential,password,indexes}=query;var{pathPrefix,pathSuffix}=slicePathTemplate(template);var indexFormatted=indexes.map(function(index){return pathSuffix.replace('{index}',index.toString());});var isPrivateKeyMode=generateFrom==='privateKey';var pubkeyInfos=[];var pvtkeyInfos=[];if(isPrivateKeyMode){pvtkeyInfos=batchGetPrivateKeys(curve,hdCredential,password,pathPrefix,indexFormatted);}else{pubkeyInfos=yield batchGetPublicKeysAsync({curveName:curve,hdCredential,password,prefix:pathPrefix,relPaths:indexFormatted});}var infos=isPrivateKeyMode?pvtkeyInfos:pubkeyInfos;if(infos.length!==indexes.length){throw new OneKeyInternalError('Unable to get publick key.');}var addresses=yield Promise.all(infos.map(function(){var _ref=_asyncToGenerator(function*(info){var{path,extendedKey:{key}}=info;var publicKey;var result;if(isPrivateKeyMode){var privateKeyRaw=bufferUtils.bytesToHex(decrypt(password,key));result=yield _this.getAddressFromPrivate({networkInfo:query.networkInfo,privateKeyRaw,privateKeyInfo:info});}else{publicKey=key.toString('hex');result=yield _this.getAddressFromPublic({networkInfo:query.networkInfo,publicKey,publicKeyInfo:info});}return _merge({publicKey,path},result);});return function(_x7){return _ref.apply(this,arguments);};}()));return{addresses};});function baseGetAddressesFromHd(_x5,_x6){return _baseGetAddressesFromHd.apply(this,arguments);}return baseGetAddressesFromHd;}();_proto.baseGetCredentialsType=function baseGetCredentialsType({credentials}){if(credentials.hd&&credentials.imported){throw new OneKeyInternalError('getCredentialsType ERROR: hd and imported credentials can NOT both set.');}if(credentials.hd){return ECoreCredentialType.hd;}if(credentials.imported){return ECoreCredentialType.imported;}throw new OneKeyInternalError('getCredentialsType ERROR: no credentials found');};_proto.baseGetDefaultPrivateKey=function(){var _baseGetDefaultPrivateKey=_asyncToGenerator(function*(params){var privateKeysMap=yield this.getPrivateKeys(params);var[encryptedPrivateKey]=Object.values(privateKeysMap);return{privateKeyRaw:encryptedPrivateKey};});function baseGetDefaultPrivateKey(_x8){return _baseGetDefaultPrivateKey.apply(this,arguments);}return baseGetDefaultPrivateKey;}();_proto.validateXpub=function(){var _validateXpub=_asyncToGenerator(function*(params){throw new NotImplemented();});function validateXpub(_x9){return _validateXpub.apply(this,arguments);}return validateXpub;}();_proto.validateXprvt=function(){var _validateXprvt=_asyncToGenerator(function*(params){throw new NotImplemented();});function validateXprvt(_x10){return _validateXprvt.apply(this,arguments);}return validateXprvt;}();return _createClass(CoreChainApiBase);}();","import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function(){return!!t;})();}import CoreChainSoftware from\"./CoreChainSoftware\";var CoreChainHd=function(_CoreChainSoftware){_inherits(CoreChainHd,_CoreChainSoftware);var _super=_createSuper(CoreChainHd);function CoreChainHd(){return _super.apply(this,arguments);}return _createClass(CoreChainHd);}(CoreChainSoftware);export{CoreChainHd as default};","import { blake2b } from \"@noble/hashes/blake2b\";\nimport { bech32 } from \"bech32\";\nimport { bcs } from \"../bcs/index.js\";\nimport { toB64 } from \"../bcs/src/index.js\";\nimport { IntentScope, messageWithIntent } from \"./intent.js\";\nimport { SIGNATURE_FLAG_TO_SCHEME, SIGNATURE_SCHEME_TO_FLAG } from \"./signature-scheme.js\";\nimport { toSerializedSignature } from \"./signature.js\";\nconst PRIVATE_KEY_SIZE = 32;\nconst LEGACY_PRIVATE_KEY_SIZE = 64;\nconst BENFEN_PRIVATE_KEY_PREFIX = \"benfenprivkey\";\nclass Signer {\n  /**\n   * Sign messages with a specific intent. By combining the message bytes with the intent before hashing and signing,\n   * it ensures that a signed message is tied to a specific purpose and domain separator is provided\n   */\n  async signWithIntent(bytes, intent) {\n    const intentMessage = messageWithIntent(intent, bytes);\n    const digest = blake2b(intentMessage, { dkLen: 32 });\n    const signature = toSerializedSignature({\n      signature: await this.sign(digest),\n      signatureScheme: this.getKeyScheme(),\n      publicKey: this.getPublicKey()\n    });\n    return {\n      signature,\n      bytes: toB64(bytes)\n    };\n  }\n  /**\n   * Signs provided transaction block by calling `signWithIntent()` with a `TransactionData` provided as intent scope\n   */\n  async signTransactionBlock(bytes) {\n    return this.signWithIntent(bytes, IntentScope.TransactionData);\n  }\n  /**\n   * Signs provided personal message by calling `signWithIntent()` with a `PersonalMessage` provided as intent scope\n   */\n  async signPersonalMessage(bytes) {\n    return this.signWithIntent(\n      bcs.vector(bcs.u8()).serialize(bytes).toBytes(),\n      IntentScope.PersonalMessage\n    );\n  }\n  toHexAddress() {\n    return this.getPublicKey().toHexAddress();\n  }\n}\nclass Keypair extends Signer {\n  /**\n   * @deprecated use {@link Keypair.getSecretKey} instead\n   * This returns an exported keypair object, schema is the signature\n   * scheme name, and the private key field is a Bech32 encoded string\n   * of 33-byte `flag || private_key` that starts with `benfenprivkey`.\n   */\n  export() {\n    return {\n      schema: this.getKeyScheme(),\n      privateKey: this.getSecretKey()\n    };\n  }\n}\nfunction decodeBenfenPrivateKey(value) {\n  const { prefix, words } = bech32.decode(value);\n  if (prefix !== BENFEN_PRIVATE_KEY_PREFIX) {\n    throw new Error(\"invalid private key prefix\");\n  }\n  const extendedSecretKey = new Uint8Array(bech32.fromWords(words));\n  const secretKey = extendedSecretKey.slice(1);\n  const signatureScheme = SIGNATURE_FLAG_TO_SCHEME[extendedSecretKey[0]];\n  return {\n    schema: signatureScheme,\n    secretKey\n  };\n}\nfunction encodeBenfenPrivateKey(bytes, scheme) {\n  if (bytes.length !== PRIVATE_KEY_SIZE) {\n    throw new Error(\"Invalid bytes length\");\n  }\n  const flag = SIGNATURE_SCHEME_TO_FLAG[scheme];\n  const privKeyBytes = new Uint8Array(bytes.length + 1);\n  privKeyBytes.set([flag]);\n  privKeyBytes.set(bytes, 1);\n  return bech32.encode(BENFEN_PRIVATE_KEY_PREFIX, bech32.toWords(privKeyBytes));\n}\nexport {\n  BENFEN_PRIVATE_KEY_PREFIX,\n  Keypair,\n  LEGACY_PRIVATE_KEY_SIZE,\n  PRIVATE_KEY_SIZE,\n  Signer,\n  decodeBenfenPrivateKey,\n  encodeBenfenPrivateKey\n};\n//# sourceMappingURL=keypair.js.map\n","/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { bytes as assertBytes, number as assertNumber } from '@noble/hashes/_assert';\nimport { pbkdf2, pbkdf2Async } from '@noble/hashes/pbkdf2';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { utils as baseUtils } from '@scure/base';\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\n// https://tonsky.me/blog/unicode/#why-is-a----\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError(`Invalid mnemonic type: ${typeof str}`);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction assertEntropy(entropy) {\n    assertBytes(entropy, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nexport function generateMnemonic(wordlist, strength = 128) {\n    assertNumber(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic(randomBytes(strength / 8), wordlist);\n}\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([(sha256(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string')\n        throw new Error('Wordlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error(`Wordlist: non-string element: ${i}`);\n    });\n    return baseUtils.chain(baseUtils.checksum(1, calcChecksum), baseUtils.radix2(11, true), baseUtils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    assertEntropy(entropy);\n    return entropy;\n}\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nexport function entropyToMnemonic(entropy, wordlist) {\n    assertEntropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nexport function validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nconst salt = (passphrase) => nfkd(`mnemonic${passphrase}`);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nexport function mnemonicToSeed(mnemonic, passphrase = '') {\n    return pbkdf2Async(sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nexport function mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return pbkdf2(sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\n","import { mnemonicToSeedSync as bip39MnemonicToSeedSync } from \"@scure/bip39\";\nimport { toHEX } from \"../bcs/src/index.js\";\nfunction isValidHardenedPath(path) {\n  if (!new RegExp(\"^m\\\\/44'\\\\/728'\\\\/[0-9]+'\\\\/[0-9]+'\\\\/[0-9]+'+$\").test(path)) {\n    return false;\n  }\n  return true;\n}\nfunction isValidBIP32Path(path) {\n  if (!new RegExp(\"^m\\\\/(54|74)'\\\\/728'\\\\/[0-9]+'\\\\/[0-9]+\\\\/[0-9]+$\").test(path)) {\n    return false;\n  }\n  return true;\n}\nfunction mnemonicToSeed(mnemonics) {\n  return bip39MnemonicToSeedSync(mnemonics, \"\");\n}\nfunction mnemonicToSeedHex(mnemonics) {\n  return toHEX(mnemonicToSeed(mnemonics));\n}\nexport {\n  isValidBIP32Path,\n  isValidHardenedPath,\n  mnemonicToSeed,\n  mnemonicToSeedHex\n};\n//# sourceMappingURL=mnemonics.js.map\n","import { hmac } from \"@noble/hashes/hmac\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport nacl from \"tweetnacl\";\nimport { fromHEX } from \"../../bcs/index.js\";\nconst ED25519_CURVE = \"ed25519 seed\";\nconst HARDENED_OFFSET = 2147483648;\nconst pathRegex = new RegExp(\"^m(\\\\/[0-9]+')+$\");\nconst replaceDerive = (val) => val.replace(\"'\", \"\");\nconst getMasterKeyFromSeed = (seed) => {\n  const h = hmac.create(sha512, ED25519_CURVE);\n  const I = h.update(fromHEX(seed)).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR\n  };\n};\nconst CKDPriv = ({ key, chainCode }, index) => {\n  const indexBuffer = new ArrayBuffer(4);\n  const cv = new DataView(indexBuffer);\n  cv.setUint32(0, index);\n  const data = new Uint8Array(1 + key.length + indexBuffer.byteLength);\n  data.set(new Uint8Array(1).fill(0));\n  data.set(key, 1);\n  data.set(new Uint8Array(indexBuffer, 0, indexBuffer.byteLength), key.length + 1);\n  const I = hmac.create(sha512, chainCode).update(data).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR\n  };\n};\nconst getPublicKey = (privateKey, withZeroByte = true) => {\n  const keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n  const signPk = keyPair.secretKey.subarray(32);\n  const newArr = new Uint8Array(signPk.length + 1);\n  newArr.set([0]);\n  newArr.set(signPk, 1);\n  return withZeroByte ? newArr : signPk;\n};\nconst isValidPath = (path) => {\n  if (!pathRegex.test(path)) {\n    return false;\n  }\n  return !path.split(\"/\").slice(1).map(replaceDerive).some(\n    isNaN\n    /* ts T_T*/\n  );\n};\nconst derivePath = (path, seed, offset = HARDENED_OFFSET) => {\n  if (!isValidPath(path)) {\n    throw new Error(\"Invalid derivation path\");\n  }\n  const { key, chainCode } = getMasterKeyFromSeed(seed);\n  const segments = path.split(\"/\").slice(1).map(replaceDerive).map((el) => parseInt(el, 10));\n  return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {\n    key,\n    chainCode\n  });\n};\nexport {\n  derivePath,\n  getMasterKeyFromSeed,\n  getPublicKey,\n  isValidPath,\n  pathRegex,\n  replaceDerive\n};\n//# sourceMappingURL=ed25519-hd-key.js.map\n","import nacl from \"tweetnacl\";\nimport { encodeBenfenPrivateKey, Keypair, PRIVATE_KEY_SIZE } from \"../../cryptography/keypair.js\";\nimport { isValidHardenedPath, mnemonicToSeedHex } from \"../../cryptography/mnemonics.js\";\nimport { derivePath } from \"./ed25519-hd-key.js\";\nimport { Ed25519PublicKey } from \"./publickey.js\";\nconst DEFAULT_ED25519_DERIVATION_PATH = \"m/44'/728'/0'/0'/0'\";\nclass Ed25519Keypair extends Keypair {\n  /**\n   * Create a new Ed25519 keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair Ed25519 keypair\n   */\n  constructor(keypair) {\n    super();\n    if (keypair) {\n      this.keypair = keypair;\n    } else {\n      this.keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Get the key scheme of the keypair ED25519\n   */\n  getKeyScheme() {\n    return \"ED25519\";\n  }\n  /**\n   * Generate a new random Ed25519 keypair\n   */\n  static generate() {\n    return new Ed25519Keypair(nacl.sign.keyPair());\n  }\n  /**\n   * Create a Ed25519 keypair from a raw secret key byte array, also known as seed.\n   * This is NOT the private scalar which is result of hashing and bit clamping of\n   * the raw secret key.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(secretKey, options) {\n    const secretKeyLength = secretKey.length;\n    if (secretKeyLength !== PRIVATE_KEY_SIZE) {\n      throw new Error(\n        `Wrong secretKey size. Expected ${PRIVATE_KEY_SIZE} bytes, got ${secretKeyLength}.`\n      );\n    }\n    const keypair = nacl.sign.keyPair.fromSeed(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode(\"benfen validation\");\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error(\"provided secretKey is invalid\");\n      }\n    }\n    return new Ed25519Keypair(keypair);\n  }\n  /**\n   * The public key for this Ed25519 keypair\n   */\n  getPublicKey() {\n    return new Ed25519PublicKey(this.keypair.publicKey);\n  }\n  /**\n   * The Bech32 secret key string for this Ed25519 keypair\n   */\n  getSecretKey() {\n    return encodeBenfenPrivateKey(\n      this.keypair.secretKey.slice(0, PRIVATE_KEY_SIZE),\n      this.getKeyScheme()\n    );\n  }\n  async sign(data) {\n    return this.signData(data);\n  }\n  /**\n   * Return the signature for the provided data using Ed25519.\n   */\n  signData(data) {\n    return nacl.sign.detached(data, this.keypair.secretKey);\n  }\n  /**\n   * Derive Ed25519 keypair from mnemonics and path. The mnemonics must be normalized\n   * and validated against the english wordlist.\n   *\n   * If path is none, it will default to m/44'/728'/0'/0'/0', otherwise the path must\n   * be compliant to SLIP-0010 in form m/44'/728'/{account_index}'/{change_index}'/{address_index}'.\n   */\n  static deriveKeypair(mnemonics, path) {\n    if (path == null) {\n      path = DEFAULT_ED25519_DERIVATION_PATH;\n    }\n    if (!isValidHardenedPath(path)) {\n      throw new Error(\"Invalid derivation path\");\n    }\n    const { key } = derivePath(path, mnemonicToSeedHex(mnemonics));\n    return Ed25519Keypair.fromSecretKey(key);\n  }\n  /**\n   * Derive Ed25519 keypair from mnemonicSeed and path.\n   *\n   * If path is none, it will default to m/44'/728'/0'/0'/0', otherwise the path must\n   * be compliant to SLIP-0010 in form m/44'/728'/{account_index}'/{change_index}'/{address_index}'.\n   */\n  static deriveKeypairFromSeed(seedHex, path) {\n    if (path == null) {\n      path = DEFAULT_ED25519_DERIVATION_PATH;\n    }\n    if (!isValidHardenedPath(path)) {\n      throw new Error(\"Invalid derivation path\");\n    }\n    const { key } = derivePath(path, seedHex);\n    return Ed25519Keypair.fromSecretKey(key);\n  }\n}\nexport {\n  DEFAULT_ED25519_DERIVATION_PATH,\n  Ed25519Keypair\n};\n//# sourceMappingURL=keypair.js.map\n","import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function(){return!!t;})();}import{IntentScope,messageWithIntent,toSerializedSignature}from'@benfen/bfc.js/cryptography';import{Ed25519Keypair,Ed25519PublicKey}from'@benfen/bfc.js/keypairs/ed25519';import{hex2BfcAddress,toB64}from'@benfen/bfc.js/utils';import{blake2b}from'@noble/hashes/blake2b';import{checkIsDefined}from'@onekeyhq/shared/src/utils/assertUtils';import bufferUtils from'@onekeyhq/shared/src/utils/bufferUtils';import hexUtils from'@onekeyhq/shared/src/utils/hexUtils';import{CoreChainApiBase}from\"../../base/CoreChainApiBase\";import{decrypt}from\"../../secret\";import{ECoreApiExportedSecretKeyType}from\"../../types\";var curve='ed25519';export function handleSignData(txnBytes){var serializeTxn=messageWithIntent(IntentScope.TransactionData,txnBytes);return serializeTxn;}var CoreChainSoftware=function(_CoreChainApiBase){_inherits(CoreChainSoftware,_CoreChainApiBase);var _super=_createSuper(CoreChainSoftware);function CoreChainSoftware(){return _super.apply(this,arguments);}var _proto=CoreChainSoftware.prototype;_proto.getExportedSecretKey=function(){var _getExportedSecretKey=_asyncToGenerator(function*(query){var{password,keyType,credentials}=query;var{privateKeyRaw}=yield this.baseGetDefaultPrivateKey(query);if(!privateKeyRaw){throw new Error('privateKeyRaw is required');}if(keyType===ECoreApiExportedSecretKeyType.privateKey){return`0x${decrypt(password,privateKeyRaw).toString('hex')}`;}throw new Error(`SecretKey type not support: ${keyType}`);});function getExportedSecretKey(_x){return _getExportedSecretKey.apply(this,arguments);}return getExportedSecretKey;}();_proto.getPrivateKeys=function(){var _getPrivateKeys=_asyncToGenerator(function*(payload){return this.baseGetPrivateKeys({payload,curve});});function getPrivateKeys(_x2){return _getPrivateKeys.apply(this,arguments);}return getPrivateKeys;}();_proto.signTransaction=function(){var _signTransaction=_asyncToGenerator(function*(payload){var{unsignedTx,account:{pub}}=payload;var signer=yield this.baseGetSingleSigner({payload,curve});if(!unsignedTx.rawTxUnsigned){throw new Error('unsignedTx.rawTxUnsigned is undefined');}var prvKey=yield signer.getPrvkey();var keypair=Ed25519Keypair.fromSecretKey(prvKey);var txnBytes=bufferUtils.toBuffer(unsignedTx.rawTxUnsigned);var intentMessage=handleSignData(txnBytes);var digest=blake2b(intentMessage,{dkLen:32});var pubkey=keypair.getPublicKey();var signature=keypair.signData(digest);var signatureScheme=keypair.getKeyScheme();var serializeSignature=toSerializedSignature({signature,signatureScheme,publicKey:pubkey});return{txid:'',rawTx:toB64(txnBytes),signatureScheme:'ed25519',signature:serializeSignature,publicKey:hexUtils.addHexPrefix(checkIsDefined(pub)),encodedTx:unsignedTx.encodedTx};});function signTransaction(_x3){return _signTransaction.apply(this,arguments);}return signTransaction;}();_proto.signMessage=function(){var _signMessage=_asyncToGenerator(function*(payload){var unsignedMsg=payload.unsignedMsg;var signer=yield this.baseGetSingleSigner({payload,curve});var prvKey=yield signer.getPrvkey();var keypair=Ed25519Keypair.fromSecretKey(prvKey);var messageBytes=bufferUtils.toBuffer(unsignedMsg.message);var signature=yield keypair.signPersonalMessage(messageBytes);return signature.signature;});function signMessage(_x4){return _signMessage.apply(this,arguments);}return signMessage;}();_proto.getAddressFromPrivate=function(){var _getAddressFromPrivate=_asyncToGenerator(function*(query){var{privateKeyRaw}=query;var privateKey;if(hexUtils.isHexString(privateKeyRaw)){privateKey=bufferUtils.toBuffer(privateKeyRaw,'hex');}else{}if(!privateKey){throw new Error('Invalid private key');}var pub=this.baseGetCurve(curve).publicFromPrivate(privateKey);return this.getAddressFromPublic({publicKey:bufferUtils.bytesToHex(pub),networkInfo:query.networkInfo});});function getAddressFromPrivate(_x5){return _getAddressFromPrivate.apply(this,arguments);}return getAddressFromPrivate;}();_proto.getAddressFromPublic=function(){var _getAddressFromPublic=_asyncToGenerator(function*(query){var{publicKey}=query;var pub=new Ed25519PublicKey(bufferUtils.toBuffer(publicKey));var hexAddress=pub.toHexAddress();var address=hex2BfcAddress(hexAddress);return Promise.resolve({address,publicKey});});function getAddressFromPublic(_x6){return _getAddressFromPublic.apply(this,arguments);}return getAddressFromPublic;}();_proto.getAddressesFromHd=function(){var _getAddressesFromHd=_asyncToGenerator(function*(query){return this.baseGetAddressesFromHd(query,{curve});});function getAddressesFromHd(_x7){return _getAddressesFromHd.apply(this,arguments);}return getAddressesFromHd;}();return _createClass(CoreChainSoftware);}(CoreChainApiBase);export{CoreChainSoftware as default};","import coinselectUtils from'@onekeyfe/coinselect/utils';import accountUtils from'@onekeyhq/shared/src/utils/accountUtils';export function slicePathTemplate(template){return accountUtils.slicePathTemplate(template);}export function getUtxoAccountPrefixPath({fullPath}){var pathComponent=fullPath.split('/');pathComponent.pop();pathComponent.pop();var prefixPath=pathComponent.join('/');return prefixPath;}export function getBIP44Path(account,address){var realPath='';for(var[key,value]of Object.entries(account.addresses)){if(value===address){realPath=key;break;}}return`${account.path}/${realPath}`;}export function estimateTxSize(inputsForCoinSelect,outputsForCoinSelect){return coinselectUtils.transactionBytes(inputsForCoinSelect,outputsForCoinSelect);}","var AppId = /* @__PURE__ */ ((AppId2) => {\n  AppId2[AppId2[\"Benfen\"] = 0] = \"Benfen\";\n  return AppId2;\n})(AppId || {});\nvar IntentVersion = /* @__PURE__ */ ((IntentVersion2) => {\n  IntentVersion2[IntentVersion2[\"V0\"] = 0] = \"V0\";\n  return IntentVersion2;\n})(IntentVersion || {});\nvar IntentScope = /* @__PURE__ */ ((IntentScope2) => {\n  IntentScope2[IntentScope2[\"TransactionData\"] = 0] = \"TransactionData\";\n  IntentScope2[IntentScope2[\"TransactionEffects\"] = 1] = \"TransactionEffects\";\n  IntentScope2[IntentScope2[\"CheckpointSummary\"] = 2] = \"CheckpointSummary\";\n  IntentScope2[IntentScope2[\"PersonalMessage\"] = 3] = \"PersonalMessage\";\n  return IntentScope2;\n})(IntentScope || {});\nfunction intentWithScope(scope) {\n  return [scope, 0 /* V0 */, 0 /* Benfen */];\n}\nfunction messageWithIntent(scope, message) {\n  const intent = intentWithScope(scope);\n  const intentMessage = new Uint8Array(intent.length + message.length);\n  intentMessage.set(intent);\n  intentMessage.set(message, intent.length);\n  return intentMessage;\n}\nexport {\n  AppId,\n  IntentScope,\n  IntentVersion,\n  messageWithIntent\n};\n//# sourceMappingURL=intent.js.map\n","import { blake2b } from \"@noble/hashes/blake2b\";\nimport { bytesToHex } from \"@noble/hashes/utils\";\nimport { bcs } from \"../bcs/index.js\";\nimport { toB64 } from \"../bcs/src/index.js\";\nimport { BENFEN_ADDRESS_LENGTH, normalizeHexAddress } from \"../utils/bf-types.js\";\nimport { IntentScope, messageWithIntent } from \"./intent.js\";\nfunction bytesEqual(a, b) {\n  if (a === b)\n    return true;\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nclass PublicKey {\n  /**\n   * Checks if two public keys are equal\n   */\n  equals(publicKey) {\n    return bytesEqual(this.toRawBytes(), publicKey.toRawBytes());\n  }\n  /**\n   * Return the base-64 representation of the public key\n   */\n  toBase64() {\n    return toB64(this.toRawBytes());\n  }\n  toString() {\n    throw new Error(\n      \"`toString` is not implemented on public keys. Use `toBase64()` or `toRawBytes()` instead.\"\n    );\n  }\n  /**\n   * Return the Benfen representation of the public key encoded in\n   * base-64. A Benfen public key is formed by the concatenation\n   * of the scheme flag with the raw bytes of the public key\n   */\n  toBenfenPublicKey() {\n    const bytes = this.toBenfenBytes();\n    return toB64(bytes);\n  }\n  verifyWithIntent(bytes, signature, intent) {\n    const intentMessage = messageWithIntent(intent, bytes);\n    const digest = blake2b(intentMessage, { dkLen: 32 });\n    return this.verify(digest, signature);\n  }\n  /**\n   * Verifies that the signature is valid for for the provided PersonalMessage\n   */\n  verifyPersonalMessage(message, signature) {\n    return this.verifyWithIntent(\n      bcs.vector(bcs.u8()).serialize(message).toBytes(),\n      signature,\n      IntentScope.PersonalMessage\n    );\n  }\n  /**\n   * Verifies that the signature is valid for for the provided TransactionBlock\n   */\n  verifyTransactionBlock(transactionBlock, signature) {\n    return this.verifyWithIntent(transactionBlock, signature, IntentScope.TransactionData);\n  }\n  /**\n   * Returns the bytes representation of the public key\n   * prefixed with the signature scheme flag\n   */\n  toBenfenBytes() {\n    const rawBytes = this.toRawBytes();\n    const benfenBytes = new Uint8Array(rawBytes.length + 1);\n    benfenBytes.set([this.flag()]);\n    benfenBytes.set(rawBytes, 1);\n    return benfenBytes;\n  }\n  /**\n   * Return the Benfen address associated with this Ed25519 public key\n   */\n  toHexAddress() {\n    return normalizeHexAddress(\n      bytesToHex(blake2b(this.toBenfenBytes(), { dkLen: 32 })).slice(0, BENFEN_ADDRESS_LENGTH * 2)\n    );\n  }\n}\nexport {\n  PublicKey,\n  bytesEqual\n};\n//# sourceMappingURL=publickey.js.map\n","const SIGNATURE_SCHEME_TO_FLAG = {\n  ED25519: 0,\n  Secp256k1: 1,\n  Secp256r1: 2,\n  MultiSig: 3,\n  ZkLogin: 5\n};\nconst SIGNATURE_SCHEME_TO_SIZE = {\n  ED25519: 32,\n  Secp256k1: 33,\n  Secp256r1: 33\n};\nconst SIGNATURE_FLAG_TO_SCHEME = {\n  0: \"ED25519\",\n  1: \"Secp256k1\",\n  2: \"Secp256r1\",\n  3: \"MultiSig\",\n  5: \"ZkLogin\"\n};\nexport {\n  SIGNATURE_FLAG_TO_SCHEME,\n  SIGNATURE_SCHEME_TO_FLAG,\n  SIGNATURE_SCHEME_TO_SIZE\n};\n//# sourceMappingURL=signature-scheme.js.map\n","function base64UrlCharTo6Bits(base64UrlChar) {\n  if (base64UrlChar.length !== 1) {\n    throw new Error(\"Invalid base64Url character: \" + base64UrlChar);\n  }\n  const base64UrlCharacterSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n  const index = base64UrlCharacterSet.indexOf(base64UrlChar);\n  if (index === -1) {\n    throw new Error(\"Invalid base64Url character: \" + base64UrlChar);\n  }\n  const binaryString = index.toString(2).padStart(6, \"0\");\n  const bits = Array.from(binaryString).map(Number);\n  return bits;\n}\nfunction base64UrlStringToBitVector(base64UrlString) {\n  let bitVector = [];\n  for (let i = 0; i < base64UrlString.length; i++) {\n    const base64UrlChar = base64UrlString.charAt(i);\n    const bits = base64UrlCharTo6Bits(base64UrlChar);\n    bitVector = bitVector.concat(bits);\n  }\n  return bitVector;\n}\nfunction decodeBase64URL(s, i) {\n  if (s.length < 2) {\n    throw new Error(`Input (s = ${s}) is not tightly packed because s.length < 2`);\n  }\n  let bits = base64UrlStringToBitVector(s);\n  const firstCharOffset = i % 4;\n  if (firstCharOffset === 0) {\n  } else if (firstCharOffset === 1) {\n    bits = bits.slice(2);\n  } else if (firstCharOffset === 2) {\n    bits = bits.slice(4);\n  } else {\n    throw new Error(`Input (s = ${s}) is not tightly packed because i%4 = 3 (i = ${i}))`);\n  }\n  const lastCharOffset = (i + s.length - 1) % 4;\n  if (lastCharOffset === 3) {\n  } else if (lastCharOffset === 2) {\n    bits = bits.slice(0, bits.length - 2);\n  } else if (lastCharOffset === 1) {\n    bits = bits.slice(0, bits.length - 4);\n  } else {\n    throw new Error(\n      `Input (s = ${s}) is not tightly packed because (i + s.length - 1)%4 = 0 (i = ${i}))`\n    );\n  }\n  if (bits.length % 8 !== 0) {\n    throw new Error(`We should never reach here...`);\n  }\n  const bytes = new Uint8Array(Math.floor(bits.length / 8));\n  let currentByteIndex = 0;\n  for (let i2 = 0; i2 < bits.length; i2 += 8) {\n    const bitChunk = bits.slice(i2, i2 + 8);\n    const byte = parseInt(bitChunk.join(\"\"), 2);\n    bytes[currentByteIndex++] = byte;\n  }\n  return new TextDecoder().decode(bytes);\n}\nfunction verifyExtendedClaim(claim) {\n  if (!(claim.slice(-1) === \"}\" || claim.slice(-1) === \",\")) {\n    throw new Error(\"Invalid claim\");\n  }\n  const json = JSON.parse(\"{\" + claim.slice(0, -1) + \"}\");\n  if (Object.keys(json).length !== 1) {\n    throw new Error(\"Invalid claim\");\n  }\n  const key = Object.keys(json)[0];\n  return [key, json[key]];\n}\nfunction extractClaimValue(claim, claimName) {\n  const extendedClaim = decodeBase64URL(claim.value, claim.indexMod4);\n  const [name, value] = verifyExtendedClaim(extendedClaim);\n  if (name !== claimName) {\n    throw new Error(`Invalid field name: found ${name} expected ${claimName}`);\n  }\n  return value;\n}\nexport {\n  extractClaimValue\n};\n//# sourceMappingURL=jwt-utils.js.map\n","import { bcs } from \"../../bcs/index.js\";\nconst zkLoginSignature = bcs.struct(\"ZkLoginSignature\", {\n  inputs: bcs.struct(\"ZkLoginSignatureInputs\", {\n    proofPoints: bcs.struct(\"ZkLoginSignatureInputsProofPoints\", {\n      a: bcs.vector(bcs.string()),\n      b: bcs.vector(bcs.vector(bcs.string())),\n      c: bcs.vector(bcs.string())\n    }),\n    issBase64Details: bcs.struct(\"ZkLoginSignatureInputsClaim\", {\n      value: bcs.string(),\n      indexMod4: bcs.u8()\n    }),\n    headerBase64: bcs.string(),\n    addressSeed: bcs.string()\n  }),\n  maxEpoch: bcs.u64(),\n  userSignature: bcs.vector(bcs.u8())\n});\nexport {\n  zkLoginSignature\n};\n//# sourceMappingURL=bcs.js.map\n","import { hexToBytes } from \"@noble/hashes/utils\";\nfunction findFirstNonZeroIndex(bytes) {\n  for (let i = 0; i < bytes.length; i++) {\n    if (bytes[i] !== 0) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction toPaddedBigEndianBytes(num, width) {\n  const hex = num.toString(16);\n  return hexToBytes(hex.padStart(width * 2, \"0\").slice(-width * 2));\n}\nfunction toBigEndianBytes(num, width) {\n  const bytes = toPaddedBigEndianBytes(num, width);\n  const firstNonZeroIndex = findFirstNonZeroIndex(bytes);\n  if (firstNonZeroIndex === -1) {\n    return new Uint8Array([0]);\n  }\n  return bytes.slice(firstNonZeroIndex);\n}\nexport {\n  toBigEndianBytes,\n  toPaddedBigEndianBytes\n};\n//# sourceMappingURL=utils.js.map\n","var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _data;\nimport { fromB64, toB64 } from \"../../bcs/index.js\";\nimport { PublicKey } from \"../../cryptography/publickey.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature-scheme.js\";\nimport { extractClaimValue } from \"./jwt-utils.js\";\nimport { parseZkLoginSignature } from \"./signature.js\";\nimport { toPaddedBigEndianBytes } from \"./utils.js\";\nclass ZkLoginPublicIdentifier extends PublicKey {\n  /**\n   * Create a new ZkLoginPublicIdentifier object\n   * @param value zkLogin public identifier as buffer or base-64 encoded string\n   */\n  constructor(value) {\n    super();\n    __privateAdd(this, _data, void 0);\n    if (typeof value === \"string\") {\n      __privateSet(this, _data, fromB64(value));\n    } else if (value instanceof Uint8Array) {\n      __privateSet(this, _data, value);\n    } else {\n      __privateSet(this, _data, Uint8Array.from(value));\n    }\n  }\n  /**\n   * Checks if two zkLogin public identifiers are equal\n   */\n  equals(publicKey) {\n    return super.equals(publicKey);\n  }\n  /**\n   * Return the byte array representation of the zkLogin public identifier\n   */\n  toRawBytes() {\n    return __privateGet(this, _data);\n  }\n  /**\n   * Return the Benfen address associated with this ZkLogin public identifier\n   */\n  flag() {\n    return SIGNATURE_SCHEME_TO_FLAG[\"ZkLogin\"];\n  }\n  /**\n   * Verifies that the signature is valid for for the provided message\n   */\n  async verify(_message, _signature) {\n    throw Error(\"does not support\");\n  }\n  /**\n   * Verifies that the signature is valid for for the provided PersonalMessage\n   */\n  verifyPersonalMessage(message, signature) {\n    return Promise.resolve(true);\n  }\n  /**\n   * Verifies that the signature is valid for for the provided TransactionBlock\n   */\n  verifyTransactionBlock(transactionBlock, signature) {\n    return Promise.resolve(true);\n  }\n}\n_data = new WeakMap();\nfunction toZkLoginPublicIdentifier(addressSeed, iss) {\n  const addressSeedBytesBigEndian = toPaddedBigEndianBytes(addressSeed, 32);\n  const issBytes = new TextEncoder().encode(iss);\n  const tmp = new Uint8Array(1 + issBytes.length + addressSeedBytesBigEndian.length);\n  tmp.set([issBytes.length], 0);\n  tmp.set(issBytes, 1);\n  tmp.set(addressSeedBytesBigEndian, 1 + issBytes.length);\n  return new ZkLoginPublicIdentifier(tmp);\n}\nfunction parseSerializedZkLoginSignature(signature) {\n  const bytes = typeof signature === \"string\" ? fromB64(signature) : signature;\n  if (bytes[0] !== SIGNATURE_SCHEME_TO_FLAG.ZkLogin) {\n    throw new Error(\"Invalid signature scheme\");\n  }\n  const signatureBytes = bytes.slice(1);\n  const { inputs, maxEpoch, userSignature } = parseZkLoginSignature(signatureBytes);\n  const { issBase64Details, addressSeed } = inputs;\n  const iss = extractClaimValue(issBase64Details, \"iss\");\n  const publicIdentifer = toZkLoginPublicIdentifier(BigInt(addressSeed), iss);\n  const address = publicIdentifer.toHexAddress();\n  return {\n    serializedSignature: toB64(bytes),\n    signatureScheme: \"ZkLogin\",\n    zkLogin: {\n      inputs,\n      maxEpoch,\n      userSignature,\n      iss,\n      address,\n      addressSeed: BigInt(addressSeed)\n    },\n    signature: bytes,\n    publicKey: publicIdentifer.toRawBytes()\n  };\n}\nexport {\n  ZkLoginPublicIdentifier,\n  parseSerializedZkLoginSignature,\n  toZkLoginPublicIdentifier\n};\n//# sourceMappingURL=publickey.js.map\n","import { fromB64, toB64 } from \"../../bcs/index.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature-scheme.js\";\nimport { zkLoginSignature } from \"./bcs.js\";\nfunction getZkLoginSignatureBytes({ inputs, maxEpoch, userSignature }) {\n  return zkLoginSignature.serialize(\n    {\n      inputs,\n      maxEpoch,\n      userSignature: typeof userSignature === \"string\" ? fromB64(userSignature) : userSignature\n    },\n    { maxSize: 2048 }\n  ).toBytes();\n}\nfunction getZkLoginSignature({ inputs, maxEpoch, userSignature }) {\n  const bytes = getZkLoginSignatureBytes({ inputs, maxEpoch, userSignature });\n  const signatureBytes = new Uint8Array(bytes.length + 1);\n  signatureBytes.set([SIGNATURE_SCHEME_TO_FLAG.ZkLogin]);\n  signatureBytes.set(bytes, 1);\n  return toB64(signatureBytes);\n}\nfunction parseZkLoginSignature(signature) {\n  return zkLoginSignature.parse(typeof signature === \"string\" ? fromB64(signature) : signature);\n}\nexport {\n  getZkLoginSignature,\n  parseZkLoginSignature\n};\n//# sourceMappingURL=signature.js.map\n","import { bcs } from \"../bcs/index.js\";\nimport { fromB64, toB64 } from \"../bcs/src/index.js\";\nimport { parseSerializedZkLoginSignature } from \"../zklogin/helper/publickey.js\";\nimport {\n  SIGNATURE_FLAG_TO_SCHEME,\n  SIGNATURE_SCHEME_TO_FLAG,\n  SIGNATURE_SCHEME_TO_SIZE\n} from \"./signature-scheme.js\";\nfunction toSerializedSignature({\n  signature,\n  signatureScheme,\n  publicKey\n}) {\n  if (!publicKey) {\n    throw new Error(\"`publicKey` is required\");\n  }\n  const pubKeyBytes = publicKey.toRawBytes();\n  const serializedSignature = new Uint8Array(1 + signature.length + pubKeyBytes.length);\n  serializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n  serializedSignature.set(signature, 1);\n  serializedSignature.set(pubKeyBytes, 1 + signature.length);\n  return toB64(serializedSignature);\n}\nfunction parseSerializedSignature(serializedSignature) {\n  const bytes = fromB64(serializedSignature);\n  const signatureScheme = SIGNATURE_FLAG_TO_SCHEME[bytes[0]];\n  switch (signatureScheme) {\n    case \"MultiSig\":\n      const multisig = bcs.MultiSig.parse(bytes.slice(1));\n      return {\n        serializedSignature,\n        signatureScheme,\n        multisig,\n        bytes\n      };\n    case \"ZkLogin\":\n      return parseSerializedZkLoginSignature(serializedSignature);\n    case \"ED25519\":\n    case \"Secp256k1\":\n    case \"Secp256r1\":\n      const size = SIGNATURE_SCHEME_TO_SIZE[signatureScheme];\n      const signature = bytes.slice(1, bytes.length - size);\n      const publicKey = bytes.slice(1 + signature.length);\n      return {\n        serializedSignature,\n        signatureScheme,\n        signature,\n        publicKey,\n        bytes\n      };\n    default:\n      throw new Error(\"Unsupported signature scheme\");\n  }\n}\nexport {\n  parseSerializedSignature,\n  toSerializedSignature\n};\n//# sourceMappingURL=signature.js.map\n","import nacl from \"tweetnacl\";\nimport { fromB64 } from \"../../bcs/src/index.js\";\nimport { bytesEqual, PublicKey } from \"../../cryptography/publickey.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature-scheme.js\";\nimport { parseSerializedSignature } from \"../../cryptography/signature.js\";\nconst PUBLIC_KEY_SIZE = 32;\nclass Ed25519PublicKey extends PublicKey {\n  /**\n   * Create a new Ed25519PublicKey object\n   * @param value ed25519 public key as buffer or base-64 encoded string\n   */\n  constructor(value) {\n    super();\n    if (typeof value === \"string\") {\n      this.data = fromB64(value);\n    } else if (value instanceof Uint8Array) {\n      this.data = value;\n    } else {\n      this.data = Uint8Array.from(value);\n    }\n    if (this.data.length !== PUBLIC_KEY_SIZE) {\n      throw new Error(\n        `Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`\n      );\n    }\n  }\n  /**\n   * Checks if two Ed25519 public keys are equal\n   */\n  equals(publicKey) {\n    return super.equals(publicKey);\n  }\n  /**\n   * Return the byte array representation of the Ed25519 public key\n   */\n  toRawBytes() {\n    return this.data;\n  }\n  /**\n   * Return the benfen address associated with this Ed25519 public key\n   */\n  flag() {\n    return SIGNATURE_SCHEME_TO_FLAG[\"ED25519\"];\n  }\n  /**\n   * Verifies that the signature is valid for for the provided message\n   */\n  async verify(message, signature) {\n    let bytes;\n    if (typeof signature === \"string\") {\n      const parsed = parseSerializedSignature(signature);\n      if (parsed.signatureScheme !== \"ED25519\") {\n        throw new Error(\"Invalid signature scheme\");\n      }\n      if (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n        throw new Error(\"Signature does not match public key\");\n      }\n      bytes = parsed.signature;\n    } else {\n      bytes = signature;\n    }\n    return nacl.sign.detached.verify(message, bytes, this.toRawBytes());\n  }\n}\nEd25519PublicKey.SIZE = PUBLIC_KEY_SIZE;\nexport {\n  Ed25519PublicKey\n};\n//# sourceMappingURL=publickey.js.map\n","import { hash as assertHash, number as assertNumber } from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    assertHash(hash);\n    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    assertNumber(c);\n    assertNumber(dkLen);\n    assertNumber(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = toBytes(_password);\n    const salt = toBytes(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexport async function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await asyncLoop(c - 1, asyncTick, () => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n//# sourceMappingURL=pbkdf2.js.map","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map"],"names":["TX_EMPTY_SIZE","TX_INPUT_BASE","TX_INPUT_PUBKEYHASH","TX_OUTPUT_BASE","TX_OUTPUT_PUBKEYHASH","OP_RETURN_OVERHEAD","inputBytes","input","script","length","outputBytes","output","dustThreshold","feeRate","transactionBytes","inputs","outputs","reduce","a","x","uintOrNaN","v","NaN","isFinite","Math","floor","sumOrNaN","range","value","BLANK_OUTPUT","module","exports","finalize","bytesAccum","feeAfterExtraOutput","remainderAfterExtraOutput","concat","fee","sumForgiving","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","result","Super","NewTarget","this","constructor","Reflect","construct","arguments","apply","t","Boolean","prototype","valueOf","call","ChainSigner","_Verifier","_super","encryptedPrivateKey","password","curve","_this","pub","N","key","chainCode","Buffer","alloc","toString","_getPrvkeyHex","_proto2","getPrvkey","Promise","resolve","getPrvkeyHex","bufferUtils","bytesToHex","sign","digest","signature","slice","Verifier","compressedPublicKey","from","uncompressedPublicKey","_getPubkeyHex","_proto","getPubkey","compressed","getPubkeyHex","_x","verify","verifySignature","publicKey","p","toBuffer","d","s","ownKeys","e","r","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","_objectSpread","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","CoreChainApiBase","_baseCreateSigner","_baseGetSingleSigner","_baseGetPrivateKeys","_baseGetPrivateKeysHd","_baseGetAddressesFromHd","_baseGetDefaultPrivateKey","_validateXpub","_validateXprvt","baseGetCurve","curveName","baseCreateSigner","privateKey","privateKeyBuffer","baseGetSingleSigner","payload","privateKeys","getPrivateKeys","accountPath","account","path","firstRelPath","relPaths","join","Error","_x2","baseGetPrivateKeys","credentials","hd","imported","baseGetPrivateKeysHd","hdCredential","credential","encryptPrivateKey","_x3","pathComponents","split","usedRelativePaths","pop","basePath","ret","extendedKey","_x4","baseGetAddressesFromHd","query","options","generateFrom","template","indexes","pathPrefix","pathSuffix","indexFormatted","map","index","replace","isPrivateKeyMode","pubkeyInfos","pvtkeyInfos","prefix","infos","_ref","addresses","all","info","privateKeyRaw","getAddressFromPrivate","networkInfo","privateKeyInfo","getAddressFromPublic","publicKeyInfo","_x7","_x5","_x6","baseGetCredentialsType","ECoreCredentialType","baseGetDefaultPrivateKey","params","privateKeysMap","values","_x8","validateXpub","_x9","validateXprvt","_x10","CoreChainHd","_CoreChainSoftware","BENFEN_PRIVATE_KEY_PREFIX","Signer","signWithIntent","bytes","intent","intentMessage","blake2b","dkLen","signatureScheme","getKeyScheme","getPublicKey","signTransactionBlock","TransactionData","signPersonalMessage","bcs","vector","u8","serialize","toBytes","PersonalMessage","toHexAddress","Keypair","schema","getSecretKey","nfkd","str","TypeError","normalize","norm","words","includes","salt","passphrase","isValidHardenedPath","RegExp","test","mnemonics","mnemonicToSeedSync","mnemonic","pbkdf2","c","pathRegex","replaceDerive","val","derivePath","seed","offset","some","isNaN","isValidPath","I","hmac","create","update","getMasterKeyFromSeed","el","parseInt","parentKeys","segment","indexBuffer","ArrayBuffer","DataView","setUint32","data","Uint8Array","byteLength","set","fill","CKDPriv","DEFAULT_ED25519_DERIVATION_PATH","Ed25519Keypair","keypair","super","keyPair","generate","fromSecretKey","secretKey","secretKeyLength","fromSeed","skipValidation","signData","TextEncoder","encode","detached","encodeBenfenPrivateKey","scheme","flag","privKeyBytes","bech32","toWords","deriveKeypair","mnemonicToSeedHex","deriveKeypairFromSeed","seedHex","handleSignData","txnBytes","CoreChainSoftware","_CoreChainApiBase","_getExportedSecretKey","_getPrivateKeys","_signTransaction","_signMessage","_getAddressFromPrivate","_getAddressFromPublic","_getAddressesFromHd","getExportedSecretKey","keyType","ECoreApiExportedSecretKeyType","signTransaction","unsignedTx","signer","rawTxUnsigned","prvKey","pubkey","serializeSignature","txid","rawTx","hexUtils","addHexPrefix","encodedTx","signMessage","unsignedMsg","messageBytes","message","isHexString","publicFromPrivate","hexAddress","address","getAddressesFromHd","slicePathTemplate","getUtxoAccountPrefixPath","fullPath","pathComponent","getBIP44Path","realPath","entries","estimateTxSize","inputsForCoinSelect","outputsForCoinSelect","IntentScope","IntentScope2","messageWithIntent","scope","intentWithScope","bytesEqual","b","i","PublicKey","equals","toRawBytes","toBase64","toBenfenPublicKey","toBenfenBytes","verifyWithIntent","verifyPersonalMessage","verifyTransactionBlock","transactionBlock","rawBytes","benfenBytes","SIGNATURE_SCHEME_TO_FLAG","ED25519","Secp256k1","Secp256r1","MultiSig","ZkLogin","SIGNATURE_SCHEME_TO_SIZE","SIGNATURE_FLAG_TO_SCHEME","base64UrlCharTo6Bits","base64UrlChar","indexOf","binaryString","padStart","Array","Number","decodeBase64URL","bits","base64UrlStringToBitVector","base64UrlString","bitVector","charAt","firstCharOffset","lastCharOffset","currentByteIndex","i2","bitChunk","byte","TextDecoder","decode","extractClaimValue","claim","claimName","extendedClaim","indexMod4","name","verifyExtendedClaim","json","JSON","parse","struct","proofPoints","string","issBase64Details","headerBase64","addressSeed","maxEpoch","u64","userSignature","toPaddedBigEndianBytes","num","width","hex","_data","__accessCheck","obj","member","msg","has","__privateSet","setter","ZkLoginPublicIdentifier","WeakSet","add","__privateAdd","getter","get","_message","_signature","parseSerializedZkLoginSignature","signatureBytes","parseZkLoginSignature","iss","publicIdentifer","toZkLoginPublicIdentifier","addressSeedBytesBigEndian","issBytes","tmp","BigInt","serializedSignature","zkLogin","toSerializedSignature","pubKeyBytes","parseSerializedSignature","multisig","size","WeakMap","Ed25519PublicKey","parsed","SIZE","pbkdf2Init","hash","_password","_salt","_opts","opts","asyncTick","DK","PRF","PRFSalt","_cloneInto","pbkdf2Output","prfW","u","destroy","arr","view","outputLen","ti","pos","Ti","subarray","setInt32","digestInto","ui","SHA512_Kh","SHA512_Kl","n","SHA512_W_H","Uint32Array","SHA512_W_L","SHA512","Ah","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","process","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","h","l","All","roundClean","buffer","sha512"],"sourceRoot":""}