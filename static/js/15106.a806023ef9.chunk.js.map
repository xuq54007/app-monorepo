{"version":3,"file":"static/js/15106.a806023ef9.chunk.js","mappings":"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","sources":["webpack://web/../../node_modules/@zondax/izari-filecoin/node_modules/multiformats/vendor/varint.js","webpack://web/../../node_modules/@zondax/izari-filecoin/node_modules/multiformats/src/varint.js","webpack://web/../../node_modules/@zondax/izari-filecoin/node_modules/multiformats/src/bytes.js","webpack://web/../../node_modules/@zondax/izari-filecoin/node_modules/multiformats/src/hashes/digest.js","webpack://web/../../node_modules/@zondax/izari-filecoin/node_modules/multiformats/vendor/base-x.js","webpack://web/../../node_modules/@zondax/izari-filecoin/node_modules/multiformats/src/bases/base.js","webpack://web/../../node_modules/@zondax/izari-filecoin/node_modules/multiformats/src/bases/base58.js","webpack://web/../../node_modules/@zondax/izari-filecoin/node_modules/multiformats/src/bases/base32.js","webpack://web/../../node_modules/@zondax/izari-filecoin/node_modules/multiformats/src/cid.js","webpack://web/../../node_modules/@zondax/izari-filecoin/node_modules/multiformats/src/hashes/hasher.js"],"sourcesContent":["var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n"],"names":["encode_1","encode","num","out","offset","oldOffset","INT","MSB","MSBALL","bytes","Math","pow","decode","read","buf","b","res","shift","counter","l","length","RangeError","REST$1","MSB$1","N1","N2","N3","N4","N5","N6","N7","N8","N9","encodingLength","value","data","encodeTo","int","target","empty","Uint8Array","toHex","d","reduce","hex","byte","toString","padStart","fromHex","hexes","match","map","parseInt","equals","aa","bb","byteLength","ii","coerce","o","constructor","name","ArrayBuffer","isView","buffer","byteOffset","Error","isBinary","fromString","str","TextEncoder","TextDecoder","create","code","digest","size","sizeOffset","digestOffset","set","Digest","multihash","subarray","a","this","base","ALPHABET","TypeError","BASE_MAP","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","carry","it3","it4","vch","Array","isArray","from","pbegin","pend","b58","it1","it2","repeat","string","Encoder","prefix","baseEncode","Decoder","baseDecode","undefined","codePointAt","prefixCodePoint","text","JSON","stringify","slice","or","decoder","ComposedDecoder","decoders","input","Object","keys","left","right","Codec","encoder","baseX","alphabet","rfc4648","bitsPerChar","pad","mask","bits","codes","end","written","SyntaxError","base58btc","base32","format","link","version","toStringV0","baseCache","toStringV1","cache","WeakMap","cid","get","Map","CID","asCID","toV0","DAG_PB_CODE","SHA_256_CODE","createV0","toV1","createV1","other","self","unknown","toJSON","Symbol","toStringTag","for","encodeCID","cidSymbol","remainder","decodeFirst","specs","inspectBytes","prefixSize","multihashSize","multihashBytes","digestBytes","digestSize","multihashCode","codec","initialBytes","next","parse","parseCIDtoBytes","codeOffset","hashOffset","Hasher","result","then"],"sourceRoot":""}