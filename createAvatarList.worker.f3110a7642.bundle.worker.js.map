{"version":3,"file":"createAvatarList.worker.f3110a7642.bundle.worker.js","mappings":"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","sources":["webpack://web/../../node_modules/ethereum-blockies-base64/dist/main.js","webpack://web/webpack/bootstrap","webpack://web/../../packages/kit/src/components/AccountAvatar/makeBlockieImageUriList/createAvatarList.worker.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ethereum-blockies-base64\"] = factory();\n\telse\n\t\troot[\"ethereum-blockies-base64\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tconst pnglib = __webpack_require__(1);\n\tconst hsl2rgb = __webpack_require__(2);\n\n\t// The random number is a js implementation of the Xorshift PRNG\n\tconst randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\n\tfunction seedrand(seed) {\n\t  for (let i = 0; i < randseed.length; i++) {\n\t    randseed[i] = 0;\n\t  }\n\t  for (let i = 0; i < seed.length; i++) {\n\t    randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);\n\t  }\n\t}\n\n\tfunction rand() {\n\t  // based on Java's String.hashCode(), expanded to 4 32bit values\n\t  const t = randseed[0] ^ (randseed[0] << 11);\n\n\t  randseed[0] = randseed[1];\n\t  randseed[1] = randseed[2];\n\t  randseed[2] = randseed[3];\n\t  randseed[3] = randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8);\n\n\t  return (randseed[3] >>> 0) / (1 << 31 >>> 0);\n\t}\n\n\tfunction createColor() {\n\t  //saturation is the whole color spectrum\n\t  const h = Math.floor(rand() * 360);\n\t  //saturation goes from 40 to 100, it avoids greyish colors\n\t  const s = rand() * 60 + 40;\n\t  //lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\t  const l = (rand() + rand() + rand() + rand()) * 25 ;\n\n\t  return [h / 360, s / 100, l / 100];\n\t}\n\n\tfunction createImageData(size) {\n\t  const width = size; // Only support square icons for now\n\t  const height = size;\n\n\t  const dataWidth = Math.ceil(width / 2);\n\t  const mirrorWidth = width - dataWidth;\n\n\t  const data = [];\n\t  for (let y = 0; y < height; y++) {\n\t    let row = [];\n\t    for (let x = 0; x < dataWidth; x++) {\n\t      // this makes foreground and background color to have a 43% (1/2.3) probability\n\t      // spot color has 13% chance\n\t      row[x] = Math.floor(rand() * 2.3);\n\t    }\n\t    const r = row.slice(0, mirrorWidth).reverse();\n\t    row = row.concat(r);\n\n\t    for (let i = 0; i < row.length; i++) {\n\t      data.push(row[i]);\n\t    }\n\t  }\n\n\t  return data;\n\t}\n\n\t// Modifies the passed PNG to fill in a specified rectangle\n\tfunction fillRect(png, x, y, w, h, color) {\n\t  for(let i = 0; i < w; i++) {\n\t    for (let j = 0; j < h; j++) {\n\t      png.buffer[png.index(x + i, y + j)] = color;\n\t    }\n\t  }\n\t}\n\n\tfunction buildOpts(opts) {\n\t  if (!opts.seed) {\n\t    throw new Error('No seed provided');\n\t  }\n\n\t  seedrand(opts.seed);\n\n\t  return Object.assign({\n\t    size: 8,\n\t    scale: 16,\n\t    color: createColor(),\n\t    bgcolor: createColor(),\n\t    spotcolor: createColor(),\n\t  }, opts)\n\t}\n\n\tfunction makeBlockie(address) {\n\t  const opts = buildOpts({ seed: address.toLowerCase() });\n\n\t  const imageData = createImageData(opts.size);\n\t  const width = Math.sqrt(imageData.length);\n\n\t  const p = new pnglib(opts.size * opts.scale, opts.size * opts.scale, 3);\n\t  const bgcolor = p.color(...hsl2rgb(...opts.bgcolor));\n\t  const color = p.color(...hsl2rgb(...opts.color));\n\t  const spotcolor = p.color(...hsl2rgb(...opts.spotcolor));\n\n\t  for (let i = 0; i < imageData.length; i++) {\n\t    const row = Math.floor(i / width);\n\t    const col = i % width;\n\t    // if data is 0, leave the background\n\t    if (imageData[i]) {\n\t      // if data is 2, choose spot color, if 1 choose foreground\n\t      const pngColor = imageData[i] == 1 ? color : spotcolor;\n\t      fillRect(p, col * opts.scale, row * opts.scale, opts.scale, opts.scale, pngColor);\n\t    }\n\t  }\n\t  return `data:image/png;base64,${p.getBase64()}`;\n\t}\n\n\tmodule.exports = makeBlockie;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/**\n\t * A handy class to calculate color values.\n\t *\n\t * @version 1.0\n\t * @author Robert Eisele <robert@xarg.org>\n\t * @copyright Copyright (c) 2010, Robert Eisele\n\t * @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/\n\t * @license http://www.opensource.org/licenses/bsd-license.php BSD License\n\t *\n\t */\n\n\t// Modified by George Chan <gchan@21cn.com>\n\n\t// Further modified by Will O'B <@wbobeirne> to make it\n\t// UglifyJS and \"use strict\"; friendly\n\n\tmodule.exports = function(width,height,depth) {\n\n\n\t    // helper functions for that ctx\n\t    function write(buffer, offs) {\n\t        for (var i = 2; i < arguments.length; i++) {\n\t            for (var j = 0; j < arguments[i].length; j++) {\n\t                buffer[offs++] = arguments[i].charAt(j);\n\t            }\n\t        }\n\t    }\n\n\t    function byte2(w) {\n\t        return String.fromCharCode((w >> 8) & 255, w & 255);\n\t    }\n\n\t    function byte4(w) {\n\t        return String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);\n\t    }\n\n\t    function byte2lsb(w) {\n\t        return String.fromCharCode(w & 255, (w >> 8) & 255);\n\t    }\n\n\t    this.width   = width;\n\t    this.height  = height;\n\t    this.depth   = depth;\n\n\t    // pixel data and row filter identifier size\n\t    this.pix_size = height * (width + 1);\n\n\t    // deflate header, pix_size, block headers, adler32 checksum\n\t    this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;\n\n\t    // offsets and sizes of Png chunks\n\t    this.ihdr_offs = 0; // IHDR offset and size\n\t    this.ihdr_size = 4 + 4 + 13 + 4;\n\t    this.plte_offs = this.ihdr_offs + this.ihdr_size; // PLTE offset and size\n\t    this.plte_size = 4 + 4 + 3 * depth + 4;\n\t    this.trns_offs = this.plte_offs + this.plte_size; // tRNS offset and size\n\t    this.trns_size = 4 + 4 + depth + 4;\n\t    this.idat_offs = this.trns_offs + this.trns_size; // IDAT offset and size\n\t    this.idat_size = 4 + 4 + this.data_size + 4;\n\t    this.iend_offs = this.idat_offs + this.idat_size; // IEND offset and size\n\t    this.iend_size = 4 + 4 + 4;\n\t    this.buffer_size  = this.iend_offs + this.iend_size; // total PNG size\n\n\t    this.buffer  = new Array();\n\t    this.palette = new Object();\n\t    this.pindex  = 0;\n\n\t    var _crc32 = new Array();\n\n\t    // initialize buffer with zero bytes\n\t    for (var i = 0; i < this.buffer_size; i++) {\n\t        this.buffer[i] = \"\\x00\";\n\t    }\n\n\t    // initialize non-zero elements\n\t    write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\n\t    write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\n\t    write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\n\t    write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\n\t    write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');\n\n\t    // initialize deflate header\n\t    var header = ((8 + (7 << 4)) << 8) | (3 << 6);\n\t    header+= 31 - (header % 31);\n\n\t    write(this.buffer, this.idat_offs + 8, byte2(header));\n\n\t    // initialize deflate block headers\n\t    for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\n\t        var size, bits;\n\t        if (i + 0xffff < this.pix_size) {\n\t            size = 0xffff;\n\t            bits = \"\\x00\";\n\t        } else {\n\t            size = this.pix_size - (i << 16) - i;\n\t            bits = \"\\x01\";\n\t        }\n\t        write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\n\t    }\n\n\t    /* Create crc32 lookup table */\n\t    for (var i = 0; i < 256; i++) {\n\t        var c = i;\n\t        for (var j = 0; j < 8; j++) {\n\t            if (c & 1) {\n\t                c = -306674912 ^ ((c >> 1) & 0x7fffffff);\n\t            } else {\n\t                c = (c >> 1) & 0x7fffffff;\n\t            }\n\t        }\n\t        _crc32[i] = c;\n\t    }\n\n\t    // compute the index into a png for a given pixel\n\t    this.index = function(x,y) {\n\t        var i = y * (this.width + 1) + x + 1;\n\t        var j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;\n\t        return j;\n\t    }\n\n\t    // convert a color and build up the palette\n\t    this.color = function(red, green, blue, alpha) {\n\n\t        alpha = alpha >= 0 ? alpha : 255;\n\t        var color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;\n\n\t        if (typeof this.palette[color] == \"undefined\") {\n\t            if (this.pindex == this.depth) return \"\\x00\";\n\n\t            var ndx = this.plte_offs + 8 + 3 * this.pindex;\n\n\t            this.buffer[ndx + 0] = String.fromCharCode(red);\n\t            this.buffer[ndx + 1] = String.fromCharCode(green);\n\t            this.buffer[ndx + 2] = String.fromCharCode(blue);\n\t            this.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);\n\n\t            this.palette[color] = String.fromCharCode(this.pindex++);\n\t        }\n\t        return this.palette[color];\n\t    }\n\n\t    // output a PNG string, Base64 encoded\n\t    this.getBase64 = function() {\n\n\t        var s = this.getDump();\n\n\t        var ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\t        var c1, c2, c3, e1, e2, e3, e4;\n\t        var l = s.length;\n\t        var i = 0;\n\t        var r = \"\";\n\n\t        do {\n\t            c1 = s.charCodeAt(i);\n\t            e1 = c1 >> 2;\n\t            c2 = s.charCodeAt(i+1);\n\t            e2 = ((c1 & 3) << 4) | (c2 >> 4);\n\t            c3 = s.charCodeAt(i+2);\n\t            if (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }\n\t            if (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }\n\t            r+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\n\t        } while ((i+= 3) < l);\n\t        return r;\n\t    }\n\n\t    // output a PNG string\n\t    this.getDump = function() {\n\t        // compute adler32 of output pixels + row filter bytes\n\t        var BASE = 65521; /* largest prime smaller than 65536 */\n\t        var NMAX = 5552; /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\n\t        var s1 = 1;\n\t        var s2 = 0;\n\t        var n = NMAX;\n\n\t        for (var y = 0; y < this.height; y++) {\n\t            for (var x = -1; x < this.width; x++) {\n\t                s1+= this.buffer[this.index(x, y)].charCodeAt(0);\n\t                s2+= s1;\n\t                if ((n-= 1) == 0) {\n\t                    s1%= BASE;\n\t                    s2%= BASE;\n\t                    n = NMAX;\n\t                }\n\t            }\n\t        }\n\t        s1%= BASE;\n\t        s2%= BASE;\n\t        write(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));\n\n\t        // compute crc32 of the PNG chunks\n\t        function crc32(png, offs, size) {\n\t            var crc = -1;\n\t            for (var i = 4; i < size-4; i += 1) {\n\t                crc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);\n\t            }\n\t            write(png, offs+size-4, byte4(crc ^ -1));\n\t        }\n\n\t        crc32(this.buffer, this.ihdr_offs, this.ihdr_size);\n\t        crc32(this.buffer, this.plte_offs, this.plte_size);\n\t        crc32(this.buffer, this.trns_offs, this.trns_size);\n\t        crc32(this.buffer, this.idat_offs, this.idat_size);\n\t        crc32(this.buffer, this.iend_offs, this.iend_size);\n\n\t        // convert PNG to string\n\t        return \"\\x89PNG\\r\\n\\x1a\\n\" + this.buffer.join('');\n\t    }\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t// https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n\t/**\n\t * Converts an HSL color value to RGB. Conversion formula\n\t * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n\t * Assumes h, s, and l are contained in the set [0, 1] and\n\t * returns r, g, and b in the set [0, 255].\n\t *\n\t * @param   {number}  h       The hue\n\t * @param   {number}  s       The saturation\n\t * @param   {number}  l       The lightness\n\t * @return  {Array}           The RGB representation\n\t */\n\n\t function hue2rgb(p, q, t) {\n\t   if(t < 0) t += 1;\n\t   if(t > 1) t -= 1;\n\t   if(t < 1/6) return p + (q - p) * 6 * t;\n\t   if(t < 1/2) return q;\n\t   if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n\t   return p;\n\t }\n\n\tfunction hsl2rgb(h, s, l){\n\t  let r, g, b;\n\n\t  if (s == 0) {\n\t    r = g = b = l; // achromatic\n\t  } else {\n\t    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t    const p = 2 * l - q;\n\t    r = hue2rgb(p, q, h + 1/3);\n\t    g = hue2rgb(p, q, h);\n\t    b = hue2rgb(p, q, h - 1/3);\n\t  }\n\n\t  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), 255];\n\t}\n\n\tmodule.exports = hsl2rgb;\n\n\n/***/ }\n/******/ ])\n});\n;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const createAvatar = require('ethereum-blockies-base64');\n\nconst caches = {};\n\n// TODO: here is a better idea.\n//  Intercept network requests and generate avatar in service worker.\n//   In this way, you can use the browser's cache system to cache Avatar images, avoiding manual maintenance of memory cache.\n//   https://gist.github.com/dsheiko/8a5878678371f950d37f3ee074fe8031\n\nonmessage = (event) => {\n  const id = event.data;\n\n  let result = caches[id];\n  if (!result) {\n    result = {\n      id,\n      data: createAvatar(id),\n    };\n    caches[id] = result;\n  }\n  postMessage(result);\n};\n"],"names":["webpackUniversalModuleDefinition","root","factory","module","exports","this","modules","installedModules","moduleId","id","loaded","call","m","c","p","pnglib","hsl2rgb","randseed","Array","rand","t","createColor","Math","floor","fillRect","png","x","y","w","h","color","i","j","buffer","index","buildOpts","opts","seed","Error","seedrand","length","charCodeAt","Object","assign","size","scale","bgcolor","spotcolor","makeBlockie","address","toLowerCase","imageData","createImageData","width","height","dataWidth","ceil","mirrorWidth","data","row","r","slice","reverse","concat","push","sqrt","col","pngColor","getBase64","depth","write","offs","arguments","charAt","byte4","String","fromCharCode","byte2lsb","pix_size","data_size","ihdr_offs","ihdr_size","plte_offs","plte_size","trns_offs","trns_size","idat_offs","idat_size","iend_offs","iend_size","buffer_size","palette","pindex","_crc32","header","byte2","bits","red","green","blue","alpha","ndx","c1","c2","c3","e1","e2","e3","e4","s","getDump","ch","l","BASE","s1","s2","n","crc32","crc","join","hue2rgb","q","g","b","round","__webpack_module_cache__","__webpack_require__","cachedModule","undefined","__webpack_modules__","createAvatar","caches","onmessage","event","result","postMessage"],"sourceRoot":""}